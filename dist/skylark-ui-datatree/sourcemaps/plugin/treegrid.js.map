{"version":3,"sources":["plugin/treegrid.js"],"names":["define","langx","browser","eventer","noder","geom","velm","$","menu","jstree","BLANKRE","IDREGEX","escapeId","id","replace","NODE_DATA_ATTR","COL_DATA_ATTR","SEARCHCLASS","SPECIAL_TITLE","styled","MINCOLWIDTH","generateCellId","tree","getIds","nodes","makeArray","map","this","findDataCell","uniq","ids","col","scope","undefined","length","cellId","ret","columns","concat","join","forEach","elm","i","find","isClickedSep","toResize","oldMouseX","newMouseX","htmlstripre","copyData","fromtree","from","totree","to","recurse","j","data","extend","children_d","get_node","findLastClosedNode","node","children","state","opened","renderATitle","t","title","a","hasClass","settings","grid","get_text","attr","getCellData","value","val","defaults","width","plugins","options","parent","_guid","s4","Math","floor","random","toString","substring","_initialize","_initialized","styles","s","container","element","gs","_gridSettings","treeClass","context","contextmenu","columnWidth","defaultConf","*display","*+display","isThemeroller","_data","themeroller","treeWidthDiff","resizable","draggable","stateful","indent","sortOrder","sortAsc","caseInsensitive","fixedHeader","height","gridcontextmenu","treecol","gridcols","cols","columnSearch","target","edit","label","action","obj","_edit","len","push","ceil","rootid","msie","test","navigator","userAgent","toLowerCase","version","parseFloat","appVersion","split","display","zoom","appendTo","gridWrapper","addClass","insertAfter","midWrapper","append","scroll","css","scrollTop","defaultSort","proxy","sort","b","bigger","colrefs","caseInsensitiveSort","localeCompare","nodeA","nodeB","valueA","valueB","ui","sortable","axis","handle","cancel","start","event","item","index","stop","splice","console","warn","searchColumn","searchObj","validatedSearchObj","columnIndex","hasOwnProperty","Object","keys","search","column","search_callback","str","columnValue","f","vakata","caseSensitive","searchSettings","case_sensitive","fuzzy","isMatch","omniSearchCallback","matched","text","searchValue","trigger","init","el","call","bind","on","e","_detachColumns","_prepare_grid","_reattachColumns","removeNodes","remove","_hideOrShowTree","_hide_grid","_prepare_headers","q","anchorHeight","outerHeight","cls","match","new_instance","each","selected","_hover_node","removeClass","nodesToShow","endTime","that","startTime","Date","getTime","filter","holdingCells","cells","som","smc","add","parentsUntil","hide","_domManipulation","show","time","newtree","oldtree","old_instance","original","rslt","nextAll","localStorage","teardown","gw","gridparent","detach","_clean_grid","header","cl","ccl","name","last","puller","coluuid","_this","defaultWidth","tr","classAdd","hasHeaders","conf","borPadWidth","totalWidth","headerClass","columnClass","String","minWidth","maxWidth","html","core","themes","ellipsis","prependTo","outerWidth","next","bound","document","mouseup","ref","headers","currentTree","colNum","prevAll","closest","reference","isNaN","mousemove","pageX","oldPrevHeaderInner","oldPrevColWidth","newPrevColWidth","diff","innerWidth","max","clickedSep","newWidth","stopPropagation","symbol","rootNode","redraw_node","mw","parentNode","removeChild","appendChild","open_node","callback","animation","isArray","deep","is_callback","force_render","refresh","apply","arguments","set_id","old","result","oldNodes","_hideOrShowNode","child","lenj","getHoldingCells","hc","hidden","prop","rtl","w","h1","position","top","left","visibility","h2","class","padding","border","box-sizing","lineHeight","blur","v","keydown","key","which","stopImmediatePropagation","preventDefault","click","mousedown","keyup","min","keypress","fn","fontFamily","fontSize","fontWeight","fontStyle","fontStretch","fontVariant","letterSpacing","wordSpacing","select","grid_hide_column","grid_show_column","img","wcl","valClass","wideValClass","span","paddingleft","gridCellName","gridCellParentId","gridCellParent","gridCellPrev","gridCellPrevId","gridCellNext","gridCellNextId","gridCellChild","gridCellChildId","content","tmpWidth","highlightSearch","isClicked","closed","c","objData","cellClickHandler","create","sourceName","isDefaultPrevented","cellRightClickHandler","popup","x","y","pageY","hoverInHandler","jsTreeInstance","hover_node","hoverOutHandler","dehover_node","lid","peers","pos","inArray","rendered","cellClass","wideCellClass","format","images","substr","valueClass","valueClassPrefix","wideValueClass","wideValueClassPrefix","insertBefore","toRen","after","hover","overflow-y"],"mappings":"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","file":"../../plugin/treegrid.js","sourcesContent":["define([\n  \"skylark-utils/langx\",\n  \"skylark-utils/browser\",\n  \"skylark-utils/eventer\",\n  \"skylark-utils/noder\",\n  \"skylark-utils/geom\",\n  \"skylark-utils/velm\",\n  \"skylark-utils/query\",\n  \"./menu\",\n  \"../tree\"\n],function(langx,browser,eventer,noder,geom,velm,$,menu,jstree){\n    var BLANKRE = /^\\s*$/g,\n        IDREGEX = /[\\\\:&!^|()\\[\\]<>@*'+~#\";,= \\/${}%]/g,\n        escapeId = function(id) {\n            return (id || \"\").replace(IDREGEX, '\\\\$&');\n        },\n        NODE_DATA_ATTR = \"data-jstreegrid\",\n        COL_DATA_ATTR = \"data-jstreegrid-column\",\n        SEARCHCLASS = \"jstree-search\",\n        SPECIAL_TITLE = \"_DATA_\",\n        LEVELINDENT = 24,\n        styled = false,\n        MINCOLWIDTH = 10,\n        generateCellId = function(tree, id) {\n            return (\"jstree_\" + tree + \"_grid_\" + escapeId(id) + \"_col\");\n        },\n        getIds = function(nodes) {\n            return $.makeArray(nodes.map(function() {\n                return this.id;\n            }));\n        },\n        findDataCell = function(uniq, ids, col, scope) {\n            if (scope == undefined) {\n                scope = $();\n            };\n            if (ids === null || ids === undefined || ids.length === 0) {\n                return scope;\n            }\n            var ret = $(),\n                columns = [].concat(col),\n                cellId;\n            if (typeof(ids) === \"string\") {\n                cellId = generateCellId(uniq, ids);\n                ret = columns.map(function(col) {\n                    return \"#\" + cellId + col;\n                }).join(\", \");\n            } else {\n                ret = []\n                ids.forEach(function(elm, i) {\n                    var cellId = generateCellId(uniq, elm);\n                    ret = ret.concat(columns.map(function(col) {\n                        return \"#\" + cellId + col;\n                    }));\n                });\n                ret = ret.join(\", \");\n            }\n            return columns.length == 1 ? scope.find(ret) : $(ret);\n        },\n        isClickedSep = false,\n        toResize = null,\n        oldMouseX = 0,\n        newMouseX = 0,\n\n        /*jslint regexp:true */\n        htmlstripre = /<\\/?[^>]+>/gi,\n        /*jslint regexp:false */\n\n        getIndent = function(node, tree) {\n            var div, i, li, width;\n\n            // did we already save it for this tree?\n            tree._gridSettings = tree._gridSettings || {};\n            if (tree._gridSettings.indent > 0) {\n                width = tree._gridSettings.indent;\n            } else {\n                // create a new div on the DOM but not visible on the page\n                div = $(\"<div></div>\");\n                i = node.prev(\"i\");\n                li = i.parent();\n                // add to that div all of the classes on the tree root\n                div.addClass(tree.get_node(\"#\", true).attr(\"class\"));\n\n                // move the li to the temporary div root\n                li.appendTo(div);\n\n                // attach to the body quickly\n                div.appendTo($(\"body\"));\n\n                // get the width\n                width = i.width() || LEVELINDENT;\n\n                // detach the li from the new div and destroy the new div\n                li.detach();\n                div.remove();\n\n                // save it for the future\n                tree._gridSettings.indent = width;\n            }\n\n\n            return (width);\n\n        },\n\n        copyData = function(fromtree, from, totree, to, recurse) {\n            var i, j;\n            to.data = $.extend(true, {}, from.data);\n            if (from && from.children_d && recurse) {\n                for (i = 0, j = from.children_d.length; i < j; i++) {\n                    copyData(fromtree, fromtree.get_node(from.children_d[i]), totree, totree.get_node(to.children_d[i]), recurse);\n                }\n            }\n        },\n\n        findLastClosedNode = function(tree, id) {\n            // first get our node\n            var ret, node = tree.get_node(id),\n                children = node.children;\n            // is it closed?\n            if (!children || children.length <= 0 || !node.state.opened) {\n                ret = id;\n            } else {\n                ret = findLastClosedNode(tree, children[children.length - 1]);\n            }\n            return (ret);\n        },\n\n        renderAWidth = function(node, tree) {\n            var depth, width,\n                fullWidth = parseInt(tree.settings.grid.columns[0].width, 10) + parseInt(tree._gridSettings.treeWidthDiff, 10);\n            // need to use a selector in jquery 1.4.4+\n            depth = tree.get_node(node).parents.length;\n            width = fullWidth - depth * getIndent(node, tree);\n            // the following line is no longer needed, since we are doing this inside a <td>\n            //a.css({\"vertical-align\": \"top\", \"overflow\":\"hidden\"});\n            return (fullWidth);\n        },\n        renderATitle = function(node, t, tree) {\n            var a = node.hasClass(\"jstree-anchor\") ? node : node.children(\"[class~='jstree-anchor']\"),\n                title, col = tree.settings.grid.columns[0];\n            // get the title\n            title = \"\";\n            if (col.title) {\n                if (col.title === SPECIAL_TITLE) {\n                    title = tree.get_text(t);\n                } else if (t.attr(col.title)) {\n                    title = t.attr(col.title);\n                }\n            }\n            // strip out HTML\n            title = title.replace(htmlstripre, '');\n            if (title) {\n                a.attr(\"title\", title);\n            }\n        },\n        getCellData = function(value, data) {\n            var val;\n            // get the contents of the cell - value could be a string or a function\n            if (value !== undefined && value !== null) {\n                if (typeof(value) === \"function\") {\n                    val = value(data);\n                } else if (data.data !== null && data.data !== undefined && data.data[value] !== undefined) {\n                    val = data.data[value];\n                } else {\n                    val = \"\";\n                }\n            } else {\n                val = \"\";\n            }\n            return val;\n        };\n\n    $.jstree.defaults.grid = {\n        width: 'auto'\n    };\n\n    $.jstree.plugins.grid = function(options, parent) {\n        this._initialize = function() {\n            if (!this._initialized) {\n                var s = this.settings.grid || {},\n                    styles, container = this.element,\n                    i,\n                    gs = this._gridSettings = {\n                        columns: s.columns || [],\n                        treeClass: \"jstree-grid-col-0\",\n                        context: s.contextmenu || false,\n                        columnWidth: s.columnWidth,\n                        defaultConf: {\n                            \"*display\": \"inline\",\n                            \"*+display\": \"inline\"\n                        },\n                        isThemeroller: !!this._data.themeroller,\n                        treeWidthDiff: 0,\n                        resizable: s.resizable,\n                        draggable: s.draggable,\n                        stateful: s.stateful,\n                        indent: 0,\n                        sortOrder: 'text',\n                        sortAsc: true,\n                        caseInsensitive: s.caseInsensitive,\n                        fixedHeader: s.fixedHeader !== false,\n                        width: s.width,\n                        height: s.height,\n                        gridcontextmenu: s.gridcontextmenu,\n                        treecol: 0,\n                        gridcols: []\n                    },\n                    cols = gs.columns,\n                    treecol = 0,\n                    columnSearch = false;\n                if (gs.gridcontextmenu === true) {\n                    gs.gridcontextmenu = function(grid, tree, node, val, col, t, target) {\n                        return {\n                            \"edit\": {\n                                label: \"Edit\",\n                                \"action\": function(data) {\n                                    var obj = t.get_node(node);\n                                    grid._edit(obj, col, target);\n                                }\n                            }\n                        }\n                    }\n                } else if (gs.gridcontextmenu === false) {\n                    gs.gridcontextmenu = false;\n                }\n                // find which column our tree shuld go in\n                for (var i = 0, len = s.columns.length; i < len; i++) {\n                    if (s.columns[i].tree) {\n                        // save which column it was\n                        treecol = i;\n                        gs.treecol = treecol;\n                    } else {\n                        gs.gridcols.push(i);\n                    }\n                }\n                // set a unique ID for this table\n                this.uniq = Math.ceil(Math.random() * 1000);\n                this.rootid = container.attr(\"id\");\n\n                var msie = /msie/.test(navigator.userAgent.toLowerCase());\n                if (msie) {\n                    var version = parseFloat(navigator.appVersion.split(\"MSIE\")[1]);\n                    if (version < 8) {\n                        gs.defaultConf.display = \"inline\";\n                        gs.defaultConf.zoom = \"1\";\n                    }\n                }\n\n                // set up the classes we need\n                if (!styled) {\n                    styled = true;\n                    styles = [\n                        '.jstree-grid-cell {vertical-align: top; overflow:hidden;margin-left:0;position:relative;width: 100%;padding-left:7px;white-space: nowrap;}',\n                        '.jstree-grid-cell span {margin-right:0px;margin-right:0px;*display:inline;*+display:inline;white-space: nowrap;}',\n                        '.jstree-grid-separator {position:absolute; top:0; right:0; height:24px; margin-left: -2px; border-width: 0 2px 0 0; *display:inline; *+display:inline; margin-right:0px;width:0px;}',\n                        '.jstree-grid-header-cell {overflow: hidden; white-space: nowrap;padding: 1px 3px 2px 5px; cursor: default;}',\n                        '.jstree-grid-header-themeroller {border: 0; padding: 1px 3px;}',\n                        '.jstree-grid-header-regular {position:relative; background-color: #EBF3FD; z-index: 1;}',\n                        '.jstree-grid-hidden {display: none;}',\n                        '.jstree-grid-resizable-separator {cursor: col-resize; width: 2px;}',\n                        '.jstree-grid-separator-regular {border-color: #d0d0d0; border-style: solid;}',\n                        '.jstree-grid-cell-themeroller {border: none !important; background: transparent !important;}',\n                        '.jstree-grid-wrapper {table-layout: fixed; width: 100%; overflow: auto; position: relative;}',\n                        '.jstree-grid-midwrapper {display: table-row;}',\n                        '.jstree-grid-width-auto {width:auto;display:block;}',\n                        '.jstree-grid-column {display: table-cell; overflow: hidden;}',\n                        '.jstree-grid-ellipsis {text-overflow: ellipsis;}',\n                        '.jstree-grid-col-0 {width: 100%;}'\n                    ];\n                    $('<style type=\"text/css\">' + styles.join(\"\\n\") + '</style>').appendTo(\"head\");\n                }\n                this.gridWrapper = $(\"<div></div>\").addClass(\"jstree-grid-wrapper\").insertAfter(container);\n                this.midWrapper = $(\"<div></div>\").addClass(\"jstree-grid-midwrapper\").appendTo(this.gridWrapper);\n                // set the wrapper width\n                if (s.width) {\n                    this.gridWrapper.width(s.width);\n                }\n                if (s.height) {\n                    this.gridWrapper.height(s.height);\n                }\n                // create the data columns\n                for (var i = 0, len = cols.length; i < len; i++) {\n                    // create the column\n                    $(\"<div></div>\").addClass(\"jstree-default jstree-grid-column jstree-grid-column-\" + i + \" jstree-grid-column-root-\" + this.rootid).appendTo(this.midWrapper);\n                }\n                this.midWrapper.children(\"div:eq(\" + treecol + \")\").append(container);\n                container.addClass(\"jstree-grid-cell\");\n\n                //move header with scroll\n                if (gs.fixedHeader) {\n                    this.gridWrapper.scroll(function() {\n                        $(this).find('.jstree-grid-header').css('top', $(this).scrollTop());\n                    });\n                }\n\n                // copy original sort function\n                var defaultSort = $.proxy(this.settings.sort, this);\n\n                // override sort function\n                this.settings.sort = function(a, b) {\n                    var bigger, colrefs = this.colrefs;\n\n                    if (gs.sortOrder === 'text') {\n                        var caseInsensitiveSort = this.get_text(a).toLowerCase().localeCompare(this.get_text(b).toLowerCase());\n                        bigger = gs.caseInsensitive ? (caseInsensitiveSort === 1) : (defaultSort(a, b) === 1);\n                    } else {\n                        // gs.sortOrder just refers to the unique random name for this column\n                        // we need to get the correct value\n                        var nodeA = this.get_node(a),\n                            nodeB = this.get_node(b),\n                            value = colrefs[gs.sortOrder].value,\n                            valueA = typeof(value) === 'function' ? value(nodeA) : nodeA.data[value],\n                            valueB = typeof(value) === 'function' ? value(nodeB) : nodeB.data[value];\n                        if (typeof(valueA) && typeof(valueB) !== 'undefined') {\n                            bigger = gs.caseInsensitive ? valueA.toLowerCase() > valueB.toLowerCase() : valueA > valueB;\n                        }\n                    }\n\n                    if (!gs.sortAsc)\n                        bigger = !bigger;\n\n                    return bigger ? 1 : -1;\n                };\n\n                // sortable columns when jQuery UI is available\n                if (gs.draggable) {\n                    if (!$.ui || !$.ui.sortable) {\n                        console.warn('[jstree-grid] draggable option requires jQuery UI');\n                    } else {\n                        var from, to;\n\n                        $(this.midWrapper).sortable({\n                            axis: \"x\",\n                            handle: \".jstree-grid-header\",\n                            cancel: \".jstree-grid-separator\",\n                            start: function(event, ui) {\n                                from = ui.item.index();\n                            },\n                            stop: function(event, ui) {\n                                to = ui.item.index();\n                                gs.columns.splice(to, 0, gs.columns.splice(from, 1)[0]);\n                            }\n                        });\n                    }\n                }\n\n                //public function. validate searchObject keys, set columnSearch flag, calls jstree search and reset columnSearch flag\n                this.searchColumn = function(searchObj) {\n                    var validatedSearchObj = {};\n\n                    if (typeof searchObj == 'object') {\n                        for (var columnIndex in searchObj) {\n                            if (searchObj.hasOwnProperty(columnIndex)) {\n                                // keys should be the index of a column. This means the following:\n                                // only integers and smaller than the number of columns and bigger or equal to 0\n                                // (possilbe idea for in the future: ability to set key as a more human readable term like the column header and then map it here to an index)\n                                if (columnIndex % 1 === 0 && columnIndex < cols.length && columnIndex >= 0) {\n                                    validatedSearchObj[columnIndex] = searchObj[columnIndex];\n                                }\n                            }\n                        }\n                    }\n                    columnSearch = validatedSearchObj;\n\n                    if (Object.keys(validatedSearchObj).length !== 0) {\n                        //the search string doesn't matter. we'll use the search string in the columnSearch object!\n                        this.search('someValue');\n                    } else { // nothing to search so reset jstree's search by passing an empty string\n                        this.search('');\n                    }\n                    columnSearch = false;\n                }\n\n\n                // set default search for each column with no user defined search function (used when doing a columnSearch)\n                for (var i = 0, len = cols.length; i < len; i++) {\n                    var column = cols[i];\n                    if (typeof(column.search_callback) !== \"function\") {\n                        // no search callback so set default function\n                        column.search_callback = function(str, columnValue, node, column) {\n                            var f = new $.vakata.search(str, true, {\n                                caseSensitive: searchSettings.case_sensitive,\n                                fuzzy: searchSettings.fuzzy\n                            });\n\n                            return f.search(columnValue).isMatch;\n\n                        };\n                    }\n                }\n\n                // if there was no overridden search_callback, we will provide it\n                // it will use the default per-node search algorithm, augmented by searching our data nodes\n                var searchSettings = this.settings.search;\n                var omniSearchCallback = searchSettings.search_callback;\n\n                if (!omniSearchCallback) {\n                    omniSearchCallback = function(str, node) {\n                        var i, f = new $.vakata.search(str, true, {\n                                caseSensitive: searchSettings.case_sensitive,\n                                fuzzy: searchSettings.fuzzy\n                            }),\n                            matched = f.search(node.text).isMatch,\n                            col;\n\n                        // only bother looking in each cell if it was not yet matched\n                        if (!matched) {\n                            for (var i = 0, len = cols.length; i < len; i++) {\n                                if (treecol === i) {\n                                    continue;\n                                }\n                                col = cols[i];\n                                matched = f.search(getCellData(col.value, node)).isMatch;\n                                if (matched) {\n                                    break;\n                                }\n                            }\n                        }\n                        return matched;\n                    }\n                }\n\n                searchSettings.search_callback = function(str, node) {\n                    var matched = false;\n                    if (columnSearch) {\n                        //using logical AND for column searches (more options in the future)\n                        for (var columnIndex in columnSearch) {\n                            if (columnSearch.hasOwnProperty(columnIndex)) {\n                                var searchValue = columnSearch[columnIndex];\n                                if (searchValue == '') {\n                                    continue;\n                                }\n                                var col = cols[columnIndex];\n                                if (treecol == columnIndex) {\n                                    matched = col.search_callback(searchValue, node.text, node, col)\n                                } else {\n                                    matched = col.search_callback(searchValue, getCellData(col.value, node), node, col)\n                                }\n\n                                if (!matched) {\n                                    break; //found one that didn't match\n                                }\n                            }\n                        }\n\n                        container.trigger(\"columnSearch_grid.jstree\");\n                    } else {\n                        matched = omniSearchCallback(str, node);\n                        container.trigger(\"omniSearch_grid.jstree\");\n                    }\n                    return matched;\n                };\n                this._initialized = true;\n            }\n        };\n        this.init = function(el, options) {\n            parent.init.call(this, el, options);\n            this._initialize();\n        };\n        this.bind = function() {\n            parent.bind.call(this);\n            this._initialize();\n            this.element\n                .on(\"move_node.jstree create_node.jstree clean_node.jstree change_node.jstree\", $.proxy(function(e, data) {\n                    var target = this.get_node(data || \"#\", true);\n                    var id = _guid();\n                    this._detachColumns(id);\n                    this._prepare_grid(target);\n                    this._reattachColumns(id);\n                }, this))\n                .on(\"delete_node.jstree\", $.proxy(function(e, data) {\n                    if (data.node.id !== undefined) {\n                        var grid = this.gridWrapper,\n                            removeNodes = [data.node.id],\n                            i;\n                        // add children to remove list\n                        if (data.node && data.node.children_d) {\n                            removeNodes = removeNodes.concat(data.node.children_d);\n                        }\n                        findDataCell(this.uniq, removeNodes, this._gridSettings.gridcols).remove();\n                    }\n                }, this))\n                .on(\"show_node.jstree\", $.proxy(function(e, data) {\n                    this._hideOrShowTree(data.node, false);\n                }, this))\n                .on(\"hide_node.jstree\", $.proxy(function(e, data) {\n                    this._hideOrShowTree(data.node, true);\n                }, this))\n                .on(\"close_node.jstree\", $.proxy(function(e, data) {\n                    this._hide_grid(data.node);\n                }, this))\n                .on(\"open_node.jstree\", $.proxy(function(e, data) {}, this))\n                .on(\"load_node.jstree\", $.proxy(function(e, data) {}, this))\n                .on(\"loaded.jstree\", $.proxy(function(e) {\n                    this._prepare_headers();\n                    this.element.trigger(\"loaded_grid.jstree\");\n                }, this))\n                .on(\"ready.jstree\", $.proxy(function(e, data) {\n                    // find the line-height of the first known node\n                    var anchorHeight = this.element.find(\"[class~='jstree-anchor']:first\").outerHeight(),\n                        q,\n                        cls = this.element.attr(\"class\") || \"\";\n                    $('<style type=\"text/css\">div.jstree-grid-cell-root-' + this.rootid + ' {line-height: ' + anchorHeight + 'px; height: ' + anchorHeight + 'px;}</style>').appendTo(\"head\");\n\n                    // add container classes to the wrapper - EXCEPT those that are added by jstree, i.e. \"jstree\" and \"jstree-*\"\n                    q = cls.split(/\\s+/).map(function(i) {\n                        var match = i.match(/^jstree(-|$)/);\n                        return (match ? \"\" : i);\n                    });\n                    this.gridWrapper.addClass(q.join(\" \"));\n\n                }, this))\n                .on(\"move_node.jstree\", $.proxy(function(e, data) {\n                    var node = data.new_instance.element;\n                    //renderAWidth(node,this);\n                    // check all the children, because we could drag a tree over\n                    node.find(\"li > a\").each($.proxy(function(i, elm) {\n                        //renderAWidth($(elm),this);\n                    }, this));\n\n                }, this))\n                .on(\"hover_node.jstree\", $.proxy(function(node, selected, event) {\n                    var id = selected.node.id;\n                    if (this._hover_node !== null && this._hover_node !== undefined) {\n                        findDataCell(this.uniq, this._hover_node, this._gridSettings.gridcols).removeClass(\"jstree-hovered\");\n                    }\n                    this._hover_node = id;\n                    findDataCell(this.uniq, id, this._gridSettings.gridcols).addClass(\"jstree-hovered\");\n                }, this))\n                .on(\"dehover_node.jstree\", $.proxy(function(node, selected, event) {\n                    var id = selected.node.id;\n                    this._hover_node = null;\n                    findDataCell(this.uniq, id, this._gridSettings.gridcols).removeClass(\"jstree-hovered\");\n                }, this))\n                .on(\"select_node.jstree\", $.proxy(function(node, selected, event) {\n                    var id = selected.node.id;\n                    findDataCell(this.uniq, id, this._gridSettings.gridcols).addClass(\"jstree-clicked\");\n                    this.get_node(selected.node.id, true).children(\"div.jstree-grid-cell\").addClass(\"jstree-clicked\");\n                }, this))\n                .on(\"deselect_node.jstree\", $.proxy(function(node, selected, event) {\n                    var id = selected.node.id;\n                    findDataCell(this.uniq, id, this._gridSettings.gridcols).removeClass(\"jstree-clicked\");\n                }, this))\n                .on(\"deselect_all.jstree\", $.proxy(function(node, selected, event) {\n                    // get all of the ids that were unselected\n                    var ids = selected.node || [],\n                        i;\n                    findDataCell(this.uniq, ids, this._gridSettings.gridcols).removeClass(\"jstree-clicked\");\n                }, this))\n                .on(\"search.jstree\", $.proxy(function(e, data) {\n                    // search sometimes filters, so we need to hide all of the appropriate grid cells as well, and show only the matches\n                    var grid = this.gridWrapper,\n                        that = this,\n                        nodesToShow, startTime = new Date().getTime(),\n                        ids = getIds(data.nodes.filter(\".jstree-node\")),\n                        endTime;\n                    this.holdingCells = {};\n                    if (data.nodes.length) {\n                        var id = _guid();\n                        // save the cells we will hide\n                        var cells = grid.find('div.jstree-grid-cell-regular');\n                        this._detachColumns(id);\n                        if (this._data.search.som) {\n                            // create the list of nodes we want to look at\n                            if (this._data.search.smc) {\n                                nodesToShow = data.nodes.add(data.nodes.find('.jstree-node'));\n                            }\n                            nodesToShow = (nodesToShow || data.nodes).add(data.nodes.parentsUntil(\".jstree\"));\n\n                            // hide all of the grid cells\n                            cells.hide();\n                            // show only those that match\n                            nodesToShow.filter(\".jstree-node\").each(function(i, node) {\n                                var id = node.id;\n                                if (id) {\n                                    that._prepare_grid(node);\n                                    for (var i = 0, len = that._gridSettings.gridcols.length; i < len; i++) {\n                                        if (i === that._gridSettings.treecol) {\n                                            continue;\n                                        }\n                                        findDataCell(that.uniq, id, that._gridSettings.gridcols[i], $(that._domManipulation.columns[i])).show();\n                                    }\n                                }\n                            });\n                        }\n\n                        for (var i = 0, len = this._gridSettings.gridcols.length; i < len; i++) {\n                            if (i === this._gridSettings.treecol) {\n                                continue;\n                            }\n                            findDataCell(that.uniq, ids, this._gridSettings.gridcols[i], $(this._domManipulation.columns[i])).addClass(SEARCHCLASS);\n                        }\n                        this._reattachColumns(id);\n                        endTime = new Date().getTime();\n                        this.element.trigger(\"search-complete.jstree-grid\", [{\n                            time: endTime - startTime\n                        }]);\n                    }\n                    return true;\n                }, this))\n                .on(\"clear_search.jstree\", $.proxy(function(e, data) {\n                    // search has been cleared, so we need to show all rows\n                    var grid = this.gridWrapper,\n                        ids = getIds(data.nodes.filter(\".jstree-node\"));\n                    grid.find('div.jstree-grid-cell').show();\n                    findDataCell(this.uniq, ids, this._gridSettings.gridcols).removeClass(SEARCHCLASS);\n                    return true;\n                }, this))\n                .on(\"copy_node.jstree\", function(e, data) {\n                    var newtree = data.new_instance,\n                        oldtree = data.old_instance,\n                        obj = newtree.get_node(data.node, true);\n                    copyData(oldtree, data.original, newtree, data.node, true);\n                    newtree._detachColumns(obj.id);\n                    newtree._prepare_grid(obj);\n                    newtree._reattachColumns(obj.id);\n                    return true;\n                })\n                .on(\"show_ellipsis.jstree\", $.proxy(function(e, data) {\n                    this.gridWrapper.find(\".jstree-grid-cell\").add(\".jstree-grid-header\", this.gridWrapper).addClass(\"jstree-grid-ellipsis\");\n                    return true;\n                }, this))\n                .on(\"hide_ellipsis.jstree\", $.proxy(function(e, data) {\n                    this.gridWrapper.find(\".jstree-grid-cell\").add(\".jstree-grid-header\", this.gridWrapper).removeClass(\"jstree-grid-ellipsis\");\n                    return true;\n                }, this));\n            if (this._gridSettings.isThemeroller) {\n                this.element\n                    .on(\"select_node.jstree\", $.proxy(function(e, data) {\n                        data.rslt.obj.children(\"[class~='jstree-anchor']\").nextAll(\"div\").addClass(\"ui-state-active\");\n                    }, this))\n                    .on(\"deselect_node.jstree deselect_all.jstree\", $.proxy(function(e, data) {\n                        data.rslt.obj.children(\"[class~='jstree-anchor']\").nextAll(\"div\").removeClass(\"ui-state-active\");\n                    }, this))\n                    .on(\"hover_node.jstree\", $.proxy(function(e, data) {\n                        data.rslt.obj.children(\"[class~='jstree-anchor']\").nextAll(\"div\").addClass(\"ui-state-hover\");\n                    }, this))\n                    .on(\"dehover_node.jstree\", $.proxy(function(e, data) {\n                        data.rslt.obj.children(\"[class~='jstree-anchor']\").nextAll(\"div\").removeClass(\"ui-state-hover\");\n                    }, this));\n            }\n\n            if (this._gridSettings.stateful) {\n                this.element\n                    .on(\"resize_column.jstree-grid\", $.proxy(function(e, col, width) {\n                        localStorage['jstree-root-' + this.rootid + '-column-' + col] = width;\n                    }, this));\n            }\n        };\n\n        // tear down the tree entirely\n        this.teardown = function() {\n            var gw = this.gridWrapper,\n                container = this.element,\n                gridparent = gw.parent();\n            container.detach();\n            gw.remove();\n            gridparent.append(container);\n            parent.teardown.call(this);\n        };\n        // clean the grid in case of redraw or refresh entire tree\n        this._clean_grid = function(target, id) {\n            var grid = this.gridWrapper;\n            if (target) {\n                findDataCell(this.uniq, id, this._gridSettings.gridcols).remove();\n            } else {\n                // get all of the `div` children in all of the `td` in dataRow except for :first (that is the tree itself) and remove\n                grid.find(\"div.jstree-grid-cell-regular\").remove();\n            }\n        };\n        // prepare the headers\n        this._prepare_headers = function() {\n            var header, i, col, _this = this,\n                gs = this._gridSettings,\n                cols = gs.columns || [],\n                width, defaultWidth = gs.columnWidth,\n                resizable = gs.resizable || false,\n                cl, ccl, val, name, last, tr = gs.isThemeroller,\n                classAdd = (tr ? \"themeroller\" : \"regular\"),\n                puller,\n                hasHeaders = false,\n                gridparent = this.gridparent,\n                rootid = this.rootid,\n                conf = gs.defaultConf,\n                coluuid,\n                borPadWidth = 0,\n                totalWidth = 0;\n\n            // save the original parent so we can reparent on destroy\n            this.parent = gridparent;\n\n            // save the references to columns by unique ID\n            this.colrefs = {};\n\n\n            // create the headers\n            for (var i = 0, len = cols.length; i < len; i++) {\n                //col = $(\"<col/>\");\n                //col.appendTo(colgroup);\n                cl = cols[i].headerClass || \"\";\n                ccl = cols[i].columnClass || \"\";\n                val = cols[i].header || \"\";\n                do {\n                    coluuid = String(Math.floor(Math.random() * 10000));\n                } while (this.colrefs[coluuid] !== undefined);\n                // create a unique name for this column\n                name = cols[i].value ? coluuid : \"text\";\n                this.colrefs[name] = cols[i];\n\n                if (val) {\n                    hasHeaders = true;\n                }\n                if (gs.stateful && localStorage['jstree-root-' + rootid + '-column-' + i])\n                    width = localStorage['jstree-root-' + rootid + '-column-' + i];\n                else\n                    width = cols[i].width || defaultWidth;\n\n                var minWidth = cols[i].minWidth || width;\n                var maxWidth = cols[i].maxWidth || width;\n\n                // we only deal with borders if width is not auto and not percentages\n                borPadWidth = tr ? 1 + 6 : 2 + 8; // account for the borders and padding\n                if (width !== 'auto' && typeof(width) !== \"string\") {\n                    width -= borPadWidth;\n                }\n                col = this.midWrapper.children(\"div.jstree-grid-column-\" + i);\n                last = $(\"<div></div>\").css(conf).addClass(\"jstree-grid-div-\" + this.uniq + \"-\" + i + \" \" + (tr ? \"ui-widget-header \" : \"\") + \" jstree-grid-header jstree-grid-header-cell jstree-grid-header-\" + classAdd + \" \" + cl + \" \" + ccl).html(val);\n                last.addClass((tr ? \"ui-widget-header \" : \"\") + \"jstree-grid-header jstree-grid-header-\" + classAdd);\n                if (this.settings.core.themes.ellipsis === true) {\n                    last.addClass('jstree-grid-ellipsis');\n                }\n                last.prependTo(col);\n                last.attr(COL_DATA_ATTR, name);\n                totalWidth += last.outerWidth();\n                puller = $(\"<div class='jstree-grid-separator jstree-grid-separator-\" + classAdd + (tr ? \" ui-widget-header\" : \"\") + (resizable ? \" jstree-grid-resizable-separator\" : \"\") + \"'>&nbsp;</div>\").appendTo(last);\n                col.width(width);\n                col.css(\"min-width\", minWidth);\n                col.css(\"max-width\", maxWidth);\n            }\n\n            last.addClass((tr ? \"ui-widget-header \" : \"\") + \"jstree-grid-header jstree-grid-header-last jstree-grid-header-\" + classAdd);\n            // if there is no width given for the last column, do it via automatic\n            if (cols[cols.length - 1].width === undefined) {\n                totalWidth -= width;\n                col.css({\n                    width: \"auto\"\n                });\n                last.addClass(\"jstree-grid-width-auto\").next(\".jstree-grid-separator\").remove();\n            }\n            if (hasHeaders) {\n                // save the offset of the div from the body\n                //gs.divOffset = header.parent().offset().left;\n                gs.header = header;\n            } else {\n                $(\"div.jstree-grid-header\").hide();\n            }\n\n            if (!this.bound && resizable) {\n                this.bound = true;\n                $(document).mouseup(function() {\n                    var ref, cols, width, headers, currentTree, colNum;\n                    if (isClickedSep) {\n                        colNum = toResize.prevAll(\".jstree-grid-column\").length;\n                        currentTree = toResize.closest(\".jstree-grid-wrapper\").find(\".jstree\");\n                        ref = $.jstree.reference(currentTree);\n                        cols = ref.settings.grid.columns;\n                        headers = toResize.parent().children(\"div.jstree-grid-column\");\n                        if (isNaN(colNum) || colNum < 0) {\n                            ref._gridSettings.treeWidthDiff = currentTree.find(\"ins:eq(0)\").width() + currentTree.find(\"[class~='jstree-anchor']:eq(0)\").width() - ref._gridSettings.columns[0].width;\n                        }\n                        width = ref._gridSettings.columns[colNum].width = parseFloat(toResize.css(\"width\"));\n                        isClickedSep = false;\n                        toResize = null;\n\n                        currentTree.trigger(\"resize_column.jstree-grid\", [colNum, width]);\n                    }\n                }).mousemove(function(e) {\n                    if (isClickedSep) {\n                        newMouseX = e.pageX;\n                        var diff = newMouseX - oldMouseX,\n                            oldPrevHeaderInner,\n                            oldPrevColWidth, newPrevColWidth;\n\n                        if (diff !== 0) {\n                            oldPrevHeaderInner = toResize.width();\n                            oldPrevColWidth = parseFloat(toResize.css(\"width\"));\n\n                            // handle a Chrome issue with columns set to auto\n                            // thanks to Brabus https://github.com/side-by-side\n                            if (!oldPrevColWidth) {\n                                oldPrevColWidth = toResize.innerWidth();\n                            }\n\n                            // make sure that diff cannot be beyond the left/right limits\n                            diff = diff < 0 ? Math.max(diff, -oldPrevHeaderInner) : diff;\n                            newPrevColWidth = oldPrevColWidth + diff;\n\n                            // only do this if we are not shrinking past 0 on left - and limit it to that amount\n                            if ((diff > 0 || oldPrevHeaderInner > 0) && newPrevColWidth > MINCOLWIDTH) {\n                                toResize.width(newPrevColWidth + \"px\");\n                                toResize.css(\"min-width\", newPrevColWidth + \"px\");\n                                toResize.css(\"max-width\", newPrevColWidth + \"px\");\n                                oldMouseX = newMouseX;\n                            }\n                        }\n                    }\n                });\n                this.gridWrapper.on(\"selectstart\", \".jstree-grid-resizable-separator\", function() {\n                        return false;\n                    }).on(\"mousedown\", \".jstree-grid-resizable-separator\", function(e) {\n                        isClickedSep = true;\n                        oldMouseX = e.pageX;\n                        toResize = $(this).closest(\"div.jstree-grid-column\");\n                        // the max rightmost position we will allow is the right-most of the wrapper minus a buffer (10)\n                        return false;\n                    })\n                    .on(\"dblclick\", \".jstree-grid-resizable-separator\", function(e) {\n                        var clickedSep = $(this),\n                            col = clickedSep.closest(\"div.jstree-grid-column\"),\n                            oldPrevColWidth = parseFloat(col.css(\"width\")),\n                            newWidth = 0,\n                            diff,\n                            colNum = col.prevAll(\".jstree-grid-column\").length,\n                            oldPrevHeaderInner = col.width(),\n                            newPrevColWidth;\n\n\n                        //find largest width\n                        col.find(\".jstree-grid-cell\").each(function() {\n                            var item = $(this),\n                                width;\n                            item.css(\"position\", \"absolute\");\n                            item.css(\"width\", \"auto\");\n                            width = item.outerWidth();\n                            item.css(\"position\", \"relative\");\n\n                            if (width > newWidth) {\n                                newWidth = width;\n                            }\n                        });\n\n                        diff = newWidth - oldPrevColWidth;\n\n                        // make sure that diff cannot be beyond the left limits\n                        diff = diff < 0 ? Math.max(diff, -oldPrevHeaderInner) : diff;\n                        newPrevColWidth = (oldPrevColWidth + diff) + \"px\";\n\n                        col.width(newPrevColWidth);\n                        col.css(\"min-width\", newPrevColWidth);\n                        col.css(\"max-width\", newPrevColWidth);\n\n                        $(this).closest(\".jstree-grid-wrapper\").find(\".jstree\").trigger(\"resize_column.jstree-grid\", [colNum, newPrevColWidth]);\n                    })\n                    .on(\"click\", \".jstree-grid-separator\", function(e) {\n                        // don't sort after resize\n                        e.stopPropagation();\n                    });\n            }\n            this.gridWrapper.on(\"click\", \".jstree-grid-header-cell\", function(e) {\n                if (!_this.sort) {\n                    return;\n                }\n\n                // get column\n                var name = $(this).attr(COL_DATA_ATTR);\n\n                // sort order\n                var symbol;\n                if (gs.sortOrder === name && gs.sortAsc === true) {\n                    gs.sortAsc = false;\n                    symbol = \"&darr;\";\n                } else {\n                    gs.sortOrder = name;\n                    gs.sortAsc = true;\n                    symbol = \"&uarr;\";\n                }\n\n                // add sort arrow\n                $(this.closest('.jstree-grid-wrapper')).find(\".jstree-grid-sort-icon\").remove();\n                $(\"<span></span>\").addClass(\"jstree-grid-sort-icon\").appendTo($(this)).html(symbol);\n\n                // sort by column\n                var rootNode = _this.get_node('#');\n                _this.sort(rootNode, true);\n                _this.redraw_node(rootNode, true);\n            });\n\n        };\n\n        this._domManipulation = null; // We'll store the column nodes in this object and an id for the grid-node that started the manipulation { id: \"id of the node that started the manipulation\", columns: { Key-Value-Pair col-No: Column }}\n\n        function _guid() {\n            function s4() {\n                return Math.floor((1 + Math.random()) * 0x10000)\n                    .toString(16)\n                    .substring(1);\n            }\n            return s4() + s4() + '-' + s4() + '-' + s4() + '-' +\n                s4() + '-' + s4() + s4() + s4();\n        }\n        /*\n         * Trys to detach the tree columns on massive dom manipulations\n         */\n        this._detachColumns = function(id) {\n            // if the columns are not detached, then detach them\n            if (this._domManipulation == null) {\n                var cols = this._gridSettings.columns || [],\n                    treecol = this._gridSettings.treecol,\n                    mw = this.midWrapper;\n                this._domManipulation = {\n                    id: id,\n                    columns: {}\n                };\n                for (var i = 0, len = cols.length; i < len; i++) {\n                    //if (treecol === i) {\n                    //  continue;\n                    //}\n                    this._domManipulation.columns[i] = mw.children(\".jstree-grid-column-\" + i)[0];\n                    this._domManipulation.columns[i].parentNode.removeChild(this._domManipulation.columns[i]);\n                }\n            }\n            return this._domManipulation;\n        }\n\n        this._reattachColumns = function(id) {\n            if (this._domManipulation == null) {\n                return false;\n            }\n            if (this._domManipulation.id === id) {\n                var cols = this._gridSettings.columns || [],\n                    treecol = this._gridSettings.treecol,\n                    mw = this.midWrapper;\n                for (var i = 0, len = cols.length; i < len; i++) {\n                    //if (treecol === i) {\n                    //  continue;\n                    //}\n                    mw[0].appendChild(this._domManipulation.columns[i]);\n                }\n                this._domManipulation = null;\n            }\n            return true;\n        }\n\n        /*\n         * Override open_node to detach the columns before redrawing child-nodes, and do reattach them afterwarts\n         */\n        this.open_node = function(obj, callback, animation) {\n            var isArray = $.isArray(obj);\n            var node = null;\n            if (!isArray) {\n                node = this.get_node(obj);\n                if (node.id === \"#\") {\n                    return;\n                } // wtf??? we ar in the root and do not need a open!\n            }\n            var id = isArray ? _guid() : node.id;\n            this._detachColumns(id);\n            var ret = parent.open_node.call(this, obj, callback, animation);\n            this._reattachColumns(id);\n            return ret;\n        }\n\n        /*\n         * Override redraw_node to correctly insert the grid\n         */\n        this.redraw_node = function(obj, deep, is_callback, force_render) {\n            var id = $.isArray(obj) ? _guid() : this.get_node(obj).id;\n            // we detach the columns once\n            this._detachColumns(id);\n            // first allow the parent to redraw the node\n            obj = parent.redraw_node.call(this, obj, deep, is_callback, force_render);\n            // next prepare the grid for a redrawn node - but only if ths node is not hidden (search does that)\n            if (obj) {\n                this._prepare_grid(obj);\n            }\n            // don't forget to reattach\n            this._reattachColumns(id);\n            return obj;\n        };\n        this.refresh = function() {\n            this._clean_grid();\n            return parent.refresh.apply(this, arguments);\n        };\n        /*\n         * Override set_id to update cell attributes\n         */\n        this.set_id = function(obj, id) {\n            var old, uniq = this.uniq;\n            if (obj) {\n                old = obj.id;\n            }\n            var result = parent.set_id.apply(this, arguments);\n            if (result) {\n                if (old !== undefined) {\n                    var grid = this.gridWrapper,\n                        oldNodes = [old],\n                        i;\n                    // get children\n                    if (obj && obj.children_d) {\n                        oldNodes = oldNodes.concat(obj.children_d);\n                    }\n                    // update id in children\n                    findDataCell(uniq, oldNodes, this._gridSettings.gridcols)\n                        .attr(NODE_DATA_ATTR, obj.id)\n                        .removeClass(generateCellId(uniq, old))\n                        .addClass(generateCellId(uniq, obj.id))\n                        .each(function(i, node) {\n                            $(node).attr('id', generateCellId(uniq, obj.id) + (i + 1));\n                        });\n                }\n            }\n            return result;\n        };\n\n        this._hideOrShowTree = function(node, hide) {\n            //Hides or shows a tree\n            this._detachColumns(node.id);\n            // show cells in each detachted column\n            this._hideOrShowNode(node, hide, this._gridSettings.columns || [], this._gridSettings.treecol);\n            this._reattachColumns(node.id);\n        }\n        this._hideOrShowNode = function(node, hide, cols, treecol) {\n            //Hides or shows a node with recursive calls to all open child-nodes\n            for (var i = 0, len = cols.length; i < len; i++) {\n                if (i === treecol) {\n                    continue;\n                }\n                var cells = findDataCell(this.uniq, node.id, i, $(this._domManipulation.columns[i]));\n                if (hide) {\n                    cells.addClass(\"jstree-grid-hidden\");\n                } else {\n                    cells.removeClass(\"jstree-grid-hidden\");\n                }\n            }\n            if (node.state.opened && node.children) {\n                for (var i = 0, len = node.children.length; i < len; i++) {\n                    this._hideOrShowNode(this.get_node(node.children[i]), hide, cols, treecol);\n                }\n            }\n        }\n        this._hide_grid = function(node) {\n            if (!node) {\n                return true;\n            }\n            this._detachColumns(node.id);\n            var children = node.children ? node.children : [],\n                cols = this._gridSettings.columns || [],\n                treecol = this._gridSettings.treecol;\n            // try to remove all children\n            for (var i = 0, len = children.length; i < len; i++) {\n                var child = this.get_node(children[i]);\n                // go through each column, remove all children with the correct ID name\n                for (var j = 0, lenj = cols.length; j < lenj; j++) {\n                    if (j === treecol) {\n                        continue;\n                    }\n                    findDataCell(this.uniq, child.id, j, $(this._domManipulation.columns[j])).remove();\n                }\n                if (child.state.opened) {\n                    this._hide_grid(child);\n                }\n            }\n\n\n            this._reattachColumns(node.id);\n        };\n        this.holdingCells = {};\n        this.getHoldingCells = function(obj, col, hc) {\n            if (obj.state.hidden || !obj.state.opened) {\n                return $();\n            }\n            var ret = $(),\n                children = obj.children || [],\n                child, i, uniq = this.uniq;\n            // run through each child, render it, and then render its children recursively\n            for (i = 0; i < children.length; i++) {\n                child = generateCellId(uniq, children[i]) + col;\n                if (hc[child]) {\n                    ret = ret.add(hc[child]).add(this.getHoldingCells(this.get_node(children[i]), col, hc));\n                    //delete hc[child];\n                }\n            }\n            return (ret);\n        };\n\n        /**\n         * put a grid cell in edit mode (input field to edit the data)\n         * @name edit(obj, col)\n         * @param  {mixed} obj\n         * @param  {obj} col definition\n         * @param  {element} cell element, either span or wrapping div\n         */\n        this._edit = function(obj, col, element) {\n            if (!obj) {\n                return false;\n            }\n            if (!obj.data) {\n                obj.data = {};\n            }\n            if (element) {\n                element = $(element);\n                if (element.prop(\"tagName\").toLowerCase() === \"div\") {\n                    element = element.children(\"span:first\");\n                }\n            } else {\n                // need to find the element - later\n                return false;\n            }\n            var rtl = this._data.core.rtl,\n                w = this.element.width(),\n                t = obj.data[col.value],\n                h1 = $(\"<\" + \"div />\", {\n                    css: {\n                        \"position\": \"absolute\",\n                        \"top\": \"-200px\",\n                        \"left\": (rtl ? \"0px\" : \"-1000px\"),\n                        \"visibility\": \"hidden\"\n                    }\n                }).appendTo(\"body\"),\n                h2 = $(\"<\" + \"input />\", {\n                    \"value\": t,\n                    \"class\": \"jstree-rename-input\",\n                    \"css\": {\n                        \"padding\": \"0\",\n                        \"border\": \"1px solid silver\",\n                        \"box-sizing\": \"border-box\",\n                        \"display\": \"inline-block\",\n                        \"height\": (this._data.core.li_height) + \"px\",\n                        \"lineHeight\": (this._data.core.li_height) + \"px\",\n                        \"width\": \"150px\" // will be set a bit further down\n                    },\n                    \"blur\": $.proxy(function() {\n                        var v = h2.val();\n                        // save the value if changed\n                        if (v === \"\" || v === t) {\n                            v = t;\n                        } else {\n                            obj.data[col.value] = v;\n                            this.element.trigger('update_cell.jstree-grid', {\n                                node: obj,\n                                col: col.value,\n                                value: v,\n                                old: t\n                            });\n                            var id = _guid();\n                            this._detachColumns(id);\n                            this._prepare_grid(this.get_node(obj, true));\n                            this._reattachColumns(id);\n                        }\n                        h2.remove();\n                        element.show();\n                    }, this),\n                    \"keydown\": function(event) {\n                        var key = event.which;\n                        if (key === 27) {\n                            this.value = t;\n                        }\n                        if (key === 27 || key === 13 || key === 37 || key === 38 || key === 39 || key === 40 || key === 32) {\n                            event.stopImmediatePropagation();\n                        }\n                        if (key === 27 || key === 13) {\n                            event.preventDefault();\n                            this.blur();\n                        }\n                    },\n                    \"click\": function(e) {\n                        e.stopImmediatePropagation();\n                    },\n                    \"mousedown\": function(e) {\n                        e.stopImmediatePropagation();\n                    },\n                    \"keyup\": function(event) {\n                        h2.width(Math.min(h1.text(\"pW\" + this.value).width(), w));\n                    },\n                    \"keypress\": function(event) {\n                        if (event.which === 13) {\n                            return false;\n                        }\n                    }\n                }),\n                fn = {\n                    fontFamily: element.css('fontFamily') || '',\n                    fontSize: element.css('fontSize') || '',\n                    fontWeight: element.css('fontWeight') || '',\n                    fontStyle: element.css('fontStyle') || '',\n                    fontStretch: element.css('fontStretch') || '',\n                    fontVariant: element.css('fontVariant') || '',\n                    letterSpacing: element.css('letterSpacing') || '',\n                    wordSpacing: element.css('wordSpacing') || ''\n                };\n            element.hide();\n            element.parent().append(h2);\n            h2.css(fn).width(Math.min(h1.text(\"pW\" + h2[0].value).width(), w))[0].select();\n        };\n\n        this.grid_hide_column = function(col) {\n            this.midWrapper.find(\".jstree-grid-column-\" + col).hide();\n        };\n        this.grid_show_column = function(col) {\n            this.midWrapper.find(\".jstree-grid-column-\" + col).show();\n        };\n\n        this._prepare_grid = function(obj) {\n            var gs = this._gridSettings,\n                c = gs.treeClass,\n                _this = this,\n                t,\n                cols = gs.columns || [],\n                width, tr = gs.isThemeroller,\n                uniq = this.uniq,\n                treecol = gs.treecol,\n                tree = this.element,\n                rootid = this.rootid,\n                classAdd = (tr ? \"themeroller\" : \"regular\"),\n                img, objData = this.get_node(obj),\n                defaultWidth = gs.columnWidth,\n                conf = gs.defaultConf,\n                cellClickHandler = function(tree, node, val, col, t) {\n                    return function(e) {\n                        //node = tree.find(\"#\"+node.attr(\"id\"));\n                        var event = eventer.create(\"select_cell.jstree-grid\");\n                        tree.trigger(event, [{\n                            value: val,\n                            column: col.header,\n                            node: node,\n                            grid: $(this),\n                            sourceName: col.value\n                        }]);\n                        if (!event.isDefaultPrevented()) {\n                            node.children(\".jstree-anchor\").trigger(\"click.jstree\", e);\n                        }\n                    };\n                },\n                cellRightClickHandler = function(tree, node, val, col, t) {\n                    return function(e) {\n                        if (gs.gridcontextmenu) {\n                            e.preventDefault();\n                            menu.popup(this, {\n                                'x': e.pageX,\n                                'y': e.pageY\n                            }, gs.gridcontextmenu(_this, tree, node, val, col, t, e.target));\n                        }\n                    };\n                },\n                hoverInHandler = function(node, jsTreeInstance) {\n                    return function() {\n                        jsTreeInstance.hover_node(node);\n                    };\n                },\n                hoverOutHandler = function(node, jsTreeInstance) {\n                    return function() {\n                        jsTreeInstance.dehover_node(node);\n                    };\n                },\n                i, val, cl, wcl, ccl, a, last, valClass, wideValClass, span, paddingleft, title, gridCellName, gridCellParentId, gridCellParent,\n                gridCellPrev, gridCellPrevId, gridCellNext, gridCellNextId, gridCellChild, gridCellChildId,\n                col, content, tmpWidth, mw = this.midWrapper,\n                column, lid = objData.id,\n                highlightSearch, isClicked,\n                peers = this.get_node(objData.parent).children,\n                // find my position in the list of peers. \"peers\" is the list of everyone at my level under my parent, in order\n                pos = $.inArray(lid, peers),\n                hc = this.holdingCells,\n                rendered = false,\n                closed;\n            // get our column definition\n            t = $(obj);\n\n            // find the a children\n            a = t.children(\"[class~='jstree-anchor']\");\n            highlightSearch = a.hasClass(SEARCHCLASS);\n            isClicked = a.hasClass(\"jstree-clicked\");\n\n            if (a.length === 1) {\n                closed = !objData.state.opened;\n                gridCellName = generateCellId(uniq, lid);\n                gridCellParentId = objData.parent === \"#\" ? null : objData.parent;\n                a.addClass(c);\n                //renderAWidth(a,_this);\n                renderATitle(a, t, _this);\n                last = a;\n\n                // calculate position ids once\n                gridCellPrevId = pos <= 0 ? objData.parent : findLastClosedNode(this, peers[pos - 1]);\n                gridCellNextId = pos >= peers.length - 1 ? \"NULL\" : peers[pos + 1];\n                gridCellChildId = objData.children && objData.children.length > 0 ? objData.children[0] : \"NULL\";\n\n                // find which column our tree shuld go in\n                var s = this.settings.grid;\n                for (var i = 0, len = cols.length; i < len; i++) {\n                    if (treecol === i) {\n                        continue;\n                    }\n                    col = cols[i];\n                    column = this._domManipulation == null ? mw.children(\"div:eq(\" + i + \")\") : $(this._domManipulation.columns[i]); //Geht the detached column not mw.children(\"div:eq(\"+i+\")\");\n                    // get the cellClass, the wideCellClass, and the columnClass\n                    cl = col.cellClass || \"\";\n                    wcl = col.wideCellClass || \"\";\n                    ccl = col.columnClass || \"\";\n\n                    // add a column class to the Column\n                    column.addClass(ccl);\n\n\n                    // get the contents of the cell - value could be a string or a function\n                    val = getCellData(col.value, objData);\n\n                    if (typeof(col.format) === \"function\") {\n                        val = col.format(val);\n                    }\n\n                    // put images instead of text if needed\n                    if (col.images) {\n                        img = col.images[val] || col.images[\"default\"];\n                        if (img) {\n                            content = img[0] === \"*\" ? '<span class=\"' + img.substr(1) + '\"></span>' : '<img src=\"' + img + '\">';\n                        }\n                    } else {\n                        content = val;\n                    }\n\n                    // content cannot be blank, or it messes up heights\n                    if (content === undefined || content === null || BLANKRE.test(content)) {\n                        content = \"&nbsp;\";\n                    }\n\n                    // get the valueClass\n                    valClass = col.valueClass && objData.data !== null && objData.data !== undefined ? objData.data[col.valueClass] || \"\" : \"\";\n                    if (valClass && col.valueClassPrefix && col.valueClassPrefix !== \"\") {\n                        valClass = col.valueClassPrefix + valClass;\n                    }\n                    // get the wideValueClass\n                    wideValClass = col.wideValueClass && objData.data !== null && objData.data !== undefined ? objData.data[col.wideValueClass] || \"\" : \"\";\n                    if (wideValClass && col.wideValueClassPrefix && col.wideValueClassPrefix !== \"\") {\n                        wideValClass = col.wideValueClassPrefix + wideValClass;\n                    }\n                    // get the title\n                    title = col.title && objData.data !== null && objData.data !== undefined ? objData.data[col.title] || \"\" : \"\";\n                    // strip out HTML\n                    title = title.replace(htmlstripre, '');\n\n                    // get the width\n                    paddingleft = 7;\n                    width = col.width || defaultWidth;\n                    if (width !== 'auto') {\n                        width = tmpWidth || (width - paddingleft);\n                    }\n\n                    last = findDataCell(uniq, lid, i, column);\n                    if (!last || last.length < 1) {\n                        last = $(\"<div></div>\");\n                        $(\"<span></span>\").appendTo(last);\n                        last.attr(\"id\", gridCellName + i);\n                        last.addClass(gridCellName);\n                        last.attr(NODE_DATA_ATTR, lid);\n                        if (highlightSearch) {\n                            last.addClass(SEARCHCLASS);\n                        } else {\n                            last.removeClass(SEARCHCLASS);\n                        }\n                        if (isClicked) {\n                            last.addClass(\"jstree-clicked\");\n                        } else {\n                            last.removeClass(\"jstree-clicked\");\n                        }\n                        if (this.settings.core.themes.ellipsis === true && i !== treecol) {\n                            last.addClass('jstree-grid-ellipsis');\n                        }\n\n                    }\n\n                    // we need to check the hidden-state and see if we need to hide the node\n                    if (objData.state.hidden) {\n                        last.addClass(\"jstree-grid-hidden\");\n                    } else {\n                        last.removeClass(\"jstree-grid-hidden\");\n                    }\n\n                    // we need to put it in the dataCell - after the parent, but the position matters\n                    // if we have no parent, then we are one of the root nodes, but still need to look at peers\n\n\n                    // if we are first, i.e. pos === 0, we go right after the parent;\n                    // if we are not first, and our previous peer (one before us) is closed, we go right after the previous peer cell\n                    // if we are not first, and our previous peer is opened, then we have to find its youngest & lowest closed child (incl. leaf)\n                    //\n                    // probably be much easier to go *before* our next one\n                    // but that one might not be drawn yet\n                    // here is the logic for jstree drawing:\n                    //   it draws peers from first to last or from last to first\n                    //   it draws children before a parent\n                    //\n                    // so I can rely on my *parent* not being drawn, but I cannot rely on my previous peer or my next peer being drawn\n\n                    // so we do the following:\n                    //   1- We are the first child: install after the parent\n                    //   2- Our previous peer is already drawn: install after the previous peer\n                    //   3- Our previous peer is not drawn, we have a child that is drawn: install right before our first child\n                    //   4- Our previous peer is not drawn, we have no child that is drawn, our next peer is drawn: install right before our next peer\n                    //   5- Our previous peer is not drawn, we have no child that is drawn, our next peer is not drawn: install right after parent\n                    gridCellPrev = findDataCell(uniq, gridCellPrevId, i, column);\n                    gridCellNext = findDataCell(uniq, gridCellNextId, i, column);\n                    gridCellChild = findDataCell(uniq, gridCellChildId, i, column);\n                    gridCellParent = findDataCell(uniq, gridCellParentId, i, column);\n\n\n                    // if our parent is already drawn, then we put this in the right order under our parent\n                    if (gridCellParentId) {\n                        if (gridCellParent && gridCellParent.length > 0) {\n                            if (gridCellPrev && gridCellPrev.length > 0) {\n                                last.insertAfter(gridCellPrev);\n                            } else if (gridCellChild && gridCellChild.length > 0) {\n                                last.insertBefore(gridCellChild);\n                            } else if (gridCellNext && gridCellNext.length > 0) {\n                                last.insertBefore(gridCellNext);\n                            } else {\n                                last.insertAfter(gridCellParent);\n                            }\n                            rendered = true;\n                        } else {\n                            rendered = false;\n                        }\n                        // always put it in the holding cells, and then sort when the parent comes in, in case parent is (re)drawn later\n                        hc[gridCellName + i] = last;\n                    } else {\n                        if (gridCellPrev && gridCellPrev.length > 0) {\n                            last.insertAfter(gridCellPrev);\n                        } else if (gridCellChild && gridCellChild.length > 0) {\n                            last.insertBefore(gridCellChild);\n                        } else if (gridCellNext && gridCellNext.length > 0) {\n                            last.insertBefore(gridCellNext);\n                        } else {\n                            last.appendTo(column);\n                        }\n                        rendered = true;\n                    }\n                    // do we have any children waiting for this cell? walk down through the children/grandchildren/etc tree\n                    if (rendered) {\n                        var toRen = this.getHoldingCells(objData, i, hc);\n                        last.after(toRen);\n                    }\n                    // need to make the height of this match the line height of the tree. How?\n                    span = last.children(\"span\");\n\n                    // create a span inside the div, so we can control what happens in the whole div versus inside just the text/background\n                    span.addClass(cl + \" \" + valClass).html(content);\n                    last = last.css(conf).addClass(\"jstree-grid-cell jstree-grid-cell-regular jstree-grid-cell-root-\" + rootid + \" jstree-grid-cell-\" + classAdd + \" \" + wcl + \" \" + wideValClass + (tr ? \" ui-state-default\" : \"\")).addClass(\"jstree-grid-col-\" + i).addClass(\"jstree-animated\");\n                    // add click handler for clicking inside a grid cell\n                    last.click(cellClickHandler(tree, t, val, col, this));\n                    last.on(\"contextmenu\", cellRightClickHandler(tree, t, val, col, this));\n                    last.hover(hoverInHandler(t, this), hoverOutHandler(t, this));\n\n                    if (title) {\n                        span.attr(\"title\", title);\n                    }\n\n                    tree.trigger(\"render_cell.jstree-grid\", [{\n                        value: val,\n                        column: col.header,\n                        node: t,\n                        sourceName: col.value\n                    }]);\n                }\n                last.addClass(\"jstree-grid-cell-last\" + (tr ? \" ui-state-default\" : \"\"));\n                // if there is no width given for the last column, do it via automatic\n                if (cols[cols.length - 1].width === undefined) {\n                    last.addClass(\"jstree-grid-width-auto\").next(\".jstree-grid-separator\").remove();\n                }\n            }\n            this.element.css({\n                'overflow-y': 'auto !important'\n            });\n        };\n        // clean up holding cells\n        this.holdingCells = {};\n\n        // need to do alternating background colors or borders\n    };\n\n    return $;\n});"]}