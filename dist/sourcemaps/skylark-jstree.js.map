{"version":3,"sources":["skylark-jstree.js"],"names":["factory","globals","absolute","relative","base","stack","split","parts","pop","i","length","push","join","define","require","isAmd","amd","isCmd","exports","map","id","deps","dep","hasOwnProperty","Error","module","args","forEach","apply","skylarkjs","skylark","langx","browser","eventer","noder","geom","$","jstree","ajax","options","Xhr","request","url","camelCase","each","extend","target","deep","Array","prototype","slice","call","arguments","shift","this","arg","mixin","grep","elements","callback","filter","isArray","isEmptyObject","isFunction","isWindow","isPlainObject","inArray","makeArray","noop","parseJSON","window","JSON","parse","proxy","trim","type","fn","stop","instance_counter","ccp_node","ccp_mode","ccp_inst","themes_loaded","src","attr","document","version","defaults","plugins","path","indexOf","replace","idregex","root","create","el","Tree","destroy","off","reference","needle","tmp","obj","tagName","nodeType","ignore","closest","data","inst","_model","is_method","result","instance","method","undefined","core","strings","check_callback","error","animation","multiple","themes","name","dir","dots","icons","ellipsis","stripes","variant","responsive","expand_selected_onload","worker","force_text","dblclick_toggle","loaded_state","restore_focus","keyboard","ctrl-space","e","currentTarget","trigger","enter","left","preventDefault","is_open","close_node","o","get_parent","get_node","children","focus","up","get_prev_dom","right","is_closed","open_node","_firstChild","down","get_next_dom","*","open_all","home","get_container_ul","end","element","find","last","f2","edit","Evented","inherit","klassName","plugin","deco","opts","Child","_data","init","_id","_cnt","_wrk","selected","last_error","working","worker_queue","focused","opt","k","changed","force_full_redraw","redraw_timeout","default_state","loaded","opened","disabled","parent","parents","children_d","state","addClass","settings","ready","rtl","css","bind","original_container_html","clone","addBack","contents","nodeValue","test","remove","html","get_string","li_height","first","outerHeight","node","_create_prototype_node","load_node","keep_html","URL","revokeObjectURL","empty","teardown","_temp1","_temp2","_node","createElement","setAttribute","className","appendChild","_kbevent_to_func","keys","8","9","13","19","27","32","33","34","35","36","37","38","39","40","44","45","46","96","97","98","99","100","101","102","103","104","105","-13","112","113","114","115","116","117","118","119","120","121","122","123","144","145","16","17","18","48","49","50","51","52","53","54","55","56","57","59","61","65","66","67","68","69","70","71","72","73","74","75","76","77","78","79","80","81","82","83","84","85","86","87","88","89","90","107","109","110","186","187","188","189","190","191","192","219","220","221","222","111","106","173","ctrlKey","altKey","shiftKey","which","sort","toLowerCase","kb","unbind","removeClass","removeData","word","tout","was_click","on","selection","getSelection","sel","removeAllRanges","collapse","Date","toggle_node","activeElement","activate_node","f","r","status","setTimeout","j","concat","vakata","array_unique","action","clearTimeout","chr","String","fromCharCode","col","ind","index","v","text","RegExp","charAt","s","set_theme","set_theme_variant","mouseleave","not","mouseenter","act","hover_node","dehover_node","ev","get_container","key","a","dom","firstChild","nextSibling","_nextSibling","_previousSibling","previousSibling","as_dom","hasClass","ex","get_path","glue","ids","p","get_text","reverse","strict","offsetHeight","parentsUntil","nextAll","lastChild","parentNode","get_children_dom","is_parent","is_loaded","is_loading","loading","is_leaf","l","c","_load_nodes","array_filter","failed","_load_node","m","has_children","hidden","nodes","is_callback","force_reload","done","load_all","to_load","t","notTextOrCommentNode","d","parseHTML","x","getResponseHeader","_append_json_data","_append_html_data","reason","stringify","xhr","fail","_node_changed","cb","dat","is","par","chd","dpc","_parse_model_from_html","redraw","force_processing","w","df","t_id","t_cnt","func","rslt","add","parse_flat","ps","unshift","tid","toString","icon","li_attr","a_attr","href","original","parse_nest","cnt","mod","postMessage","Blob","Worker","createObjectURL","onmessage","terminate","attributes","_parse_model_from_flat_json","_parse_model_from_json","_redraw","fe","redraw_node","append","full","draw_children","force_render","old","last_sibling","querySelector","substr","getElementById","cloneNode","childNodes","style","backgroundImage","backgroundPosition","backgroundSize","createTextNode","innerHTML","insertBefore","scrollTop","scrollLeft","t1","t2","slideDown","display","ok","_open_to","slideUp","original_obj","_this","close_all","get","is_disabled","enable_node","disable_node","is_hidden","hide_node","skip_redraw","show_node","hide_all","show_all","last_clicked","metaKey","deselect_node","select_node","event","is_selected","deselect_all","supress_event","prevent_open","array_remove_item","select_all","old_selection","get_selected","get_top_selected","get_bottom_selected","get_state","open","scroll","top","set_state","initial_selection","refresh","skip_loading","forget_state","refresh_node","set_id","new","set_text","val","get_json","flat","get_icon","no_data","no_state","no_li_attr","no_a_attr","no_id","no_children","create_node","pos","match","check","position","rename_node","delete_node","lft","array_remove","chk","more","chc","is_multi","functions","move_node","origin","old_par","old_pos","new_par","old_ins","copy_node","is_foreign","old_parent","old_position","old_instance","new_instance","cut","copy","get_buffer","mode","can_paste","paste","clear_buffer","default_text","h1","h2","cancel","width","visibility","appendTo","body","value","class","padding","border","box-sizing","height","lineHeight","blur","stopImmediatePropagation","nv","replaceWith","keydown","click","mousedown","keyup","Math","min","keypress","fontFamily","fontSize","fontWeight","fontStyle","fontStretch","fontVariant","letterSpacing","wordSpacing","select","one","theme_name","theme_url","theme","get_theme","variant_name","get_theme_variant","show_stripes","hide_stripes","toggle_stripes","show_dots","hide_dots","toggle_dots","show_icons","hide_icons","toggle_icons","show_ellipsis","hide_ellipsis","toggle_ellipsis","set_icon","removeAttr","hide_icon","show_icon","search","pattern","txt","fuzzy","caseSensitive","MATCH_LOCATION","location","MATCH_DISTANCE","distance","MATCH_THRESHOLD","threshold","patternLen","matchmask","pattern_alphabet","mask","match_bitapScore","accuracy","proximity","abs","isMatch","score","binMin","binMid","lastRd","start","finish","rd","charMatch","textLen","scoreThreshold","bestLoc","binMax","locations","lastIndexOf","floor","max","with_values","array","from","splice","item","b","deselected","checkbox","_i","visible","three_state","whole_node","keep_selected_style","cascade","tie_selection","cascade_to_disabled","cascade_to_hidden","uto","_undetermined","checked","cur","selectedIds","_cascade_new_checked_state","temp","undetermined","allIds","get_undetermined","tt","tmp2","checkbox_disabled","show_checkboxes","checkboxes","hide_checkboxes","toggle_checkboxes","is_undetermined","disable_checkbox","enable_checkbox","is_checked","uncheck_node","check_node","checkedState","selectedChildIds","self","selectedNodeIds","selectedChildrenIds","get_checked_descendants","childId","check_all","uncheck_all","get_checked","get_top_checked","get_bottom_checked","res","conditionalselect","right_to_left","popup","Menu","elm","$el","_options","hide_onmouseleave","to","contains","relatedTarget","siblings","hide","_show_submenu","_execute","prevAll","show","render","items","_parse","_trigger","event_name","position_x","y","position_y","_disabled","str","sep","separator_before","_class","shortcut","title","label","shortcut_label","submenu","separator_after","xl","offset","outerWidth","h","dw","dh","cond","is_visible","detach","menu","contextmenu","show_at_node","new_node","rename","ccp","ey","last_ts","cto","show_contextmenu","pageX","pageY","originalEvent","changedTouches","clientX","clientY","_show_contextmenu","cls","dnd","open_timeout","is_draggable","check_while_dragging","always_copy","inside_pos","drag_selection","touch","large_drop_target","large_drag_target","use_html5","drg","mlt","escape","helper","lastmv","laster","lastev","opento","marker","isDifferentNode","op","pr","ip","tm","is_copy","pn","ins","ref","rel","z","dataTransfer","dropEffect","_get","_clean","div","strip","vakata_dnd","is_down","is_drag","helper_w","init_x","init_y","scroll_l","scroll_t","scroll_e","scroll_i","is_touch","scroll_speed","scroll_proximity","helper_left","helper_top","threshold_touch","clearInterval","drag","_scroll","init_only","setInterval","elementFromPoint","pageXOffset","pageYOffset","unselectable","onselectstart","touchAction","msTouchAction","MozUserSelect","margin","zIndex","wh","ww","dt","dl","ht","hl","scrollHeight","scrollWidth","offsetWidth","parseInt","massload","toLoad","case_sensitive","show_only_matches","show_only_matches_children","close_opened_onclear","search_leaves_only","search_callback","opn","som","smc","hdn","skip_async","inside","clear_search","lastRequest","abort","ii","querySelectorAll","events","ttl","preserve_loaded","save_state","restore_state","st","sec","storage","set","clear_state","del","localStorage","setItem","getItem","removeItem","BLANKRE","IDREGEX","escapeId","NODE_DATA_ATTR","COL_DATA_ATTR","SEARCHCLASS","SPECIAL_TITLE","styled","MINCOLWIDTH","generateCellId","tree","getIds","findDataCell","uniq","scope","cellId","ret","columns","isClickedSep","toResize","oldMouseX","newMouseX","htmlstripre","copyData","fromtree","totree","recurse","findLastClosedNode","renderATitle","grid","getCellData","_guid","s4","random","substring","_initialize","_initialized","styles","container","gs","_gridSettings","treeClass","context","columnWidth","defaultConf","*display","*+display","isThemeroller","themeroller","treeWidthDiff","resizable","draggable","stateful","indent","sortOrder","sortAsc","caseInsensitive","fixedHeader","gridcontextmenu","treecol","gridcols","cols","columnSearch","_edit","len","ceil","rootid","msie","navigator","userAgent","parseFloat","appVersion","zoom","gridWrapper","insertAfter","midWrapper","defaultSort","bigger","colrefs","caseInsensitiveSort","localeCompare","nodeA","nodeB","valueA","valueB","ui","sortable","axis","handle","console","warn","searchColumn","searchObj","validatedSearchObj","columnIndex","Object","column","columnValue","searchSettings","omniSearchCallback","matched","searchValue","_detachColumns","_prepare_grid","_reattachColumns","removeNodes","_hideOrShowTree","_hide_grid","_prepare_headers","q","anchorHeight","_hover_node","nodesToShow","endTime","that","startTime","getTime","holdingCells","cells","_domManipulation","time","newtree","oldtree","gw","gridparent","_clean_grid","header","cl","ccl","puller","coluuid","defaultWidth","tr","classAdd","hasHeaders","conf","borPadWidth","totalWidth","headerClass","columnClass","minWidth","maxWidth","prependTo","next","bound","mouseup","headers","currentTree","colNum","isNaN","mousemove","oldPrevHeaderInner","oldPrevColWidth","newPrevColWidth","diff","innerWidth","clickedSep","newWidth","stopPropagation","symbol","rootNode","mw","removeChild","oldNodes","_hideOrShowNode","child","lenj","getHoldingCells","hc","prop","grid_hide_column","grid_show_column","img","wcl","valClass","wideValClass","span","paddingleft","gridCellName","gridCellParentId","gridCellParent","gridCellPrev","gridCellPrevId","gridCellNext","gridCellNextId","gridCellChild","gridCellChildId","content","tmpWidth","highlightSearch","isClicked","closed","objData","cellClickHandler","sourceName","isDefaultPrevented","cellRightClickHandler","hoverInHandler","jsTreeInstance","hoverOutHandler","lid","peers","rendered","cellClass","wideCellClass","format","images","valueClass","valueClassPrefix","wideValueClass","wideValueClassPrefix","toRen","after","hover","overflow-y","types","default","_delete_ids","get_rules","max_children","valid_children","max_depth","get_type","rules","set_type","old_type","old_icon","unique","trim_whitespace","duplicate","counter","n","wholerow","Event","main"],"mappings":"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","file":"../skylark-jstree.js","sourcesContent":["define('skylark-jstree/tree',[\r\n  \"skylark-langx/skylark\",\r\n  \"skylark-langx/langx\",\r\n  \"skylark-utils-dom/browser\",\r\n  \"skylark-utils-dom/eventer\",\r\n  \"skylark-utils-dom/noder\",\r\n  \"skylark-utils-dom/geom\",\r\n  \"skylark-utils-dom/query\"\r\n],function(skylark,langx,browser,eventer,noder,geom,$){\r\n\t\"use strict\";\r\n\r\n\tvar jstree = skylark.jstree =  skylark.jstree || {};\r\n\r\n\t$.ajax = $.ajax || function(options) {\r\n        return langx.Xhr.request(options.url,options);\r\n    };\r\n\r\n    $.camelCase = langx.camelCase;\r\n\r\n    $.each = langx.each;\r\n\r\n    $.extend = function(target) {\r\n        var deep, args = Array.prototype.slice.call(arguments, 1);\r\n        if (typeof target == 'boolean') {\r\n            deep = target\r\n            target = args.shift()\r\n        }\r\n        if (args.length == 0) {\r\n            args = [target];\r\n            target = this;\r\n        }\r\n        args.forEach(function(arg) {\r\n        \tlangx.mixin(target, arg, deep);\r\n        });\r\n        return target;\r\n    };\r\n\r\n    $.grep = function(elements, callback) {\r\n        return filter.call(elements, callback)\r\n    };\r\n\r\n    $.isArray = langx.isArray;\r\n    $.isEmptyObject = langx.isEmptyObject;\r\n    $.isFunction = langx.isFunction;\r\n    $.isWindow = langx.isWindow;\r\n    $.isPlainObject = langx.isPlainObject;\r\n\r\n    $.inArray = langx.inArray;\r\n\r\n    $.makeArray = langx.makeArray;\r\n    $.map = langx.map;\r\n\r\n    $.noop = function() {\r\n    };\r\n\r\n    $.parseJSON = window.JSON.parse;\r\n\r\n    $.proxy = langx.proxy;\r\n\r\n    $.trim = langx.trim;\r\n    $.type = langx.type;\r\n\r\n    $.fn.stop = function() {\r\n    \treturn this;\r\n    }\r\n\r\n\r\n\t/*!\r\n\t * jsTree {{VERSION}}\r\n\t * http://jstree.com/\r\n\t *\r\n\t * Copyright (c) 2014 Ivan Bozhanov (http://vakata.com)\r\n\t *\r\n\t * Licensed same as jquery - under the terms of the MIT License\r\n\t *   http://www.opensource.org/licenses/mit-license.php\r\n\t */\r\n\r\n\t// prevent another load? maybe there is a better way?\r\n\tif($.jstree) {\r\n\t\treturn;\r\n\t}\r\n\r\n\t/**\r\n\t * ### jsTree core functionality\r\n\t */\r\n\r\n\t// internal variables\r\n\tvar instance_counter = 0,\r\n\t\tccp_node = false,\r\n\t\tccp_mode = false,\r\n\t\tccp_inst = false,\r\n\t\tthemes_loaded = [],\r\n\t\tsrc = $('script:last').attr('src'),\r\n\t\tdocument = window.document; // local variable is always faster to access then a global\r\n\r\n\t/**\r\n\t * holds all jstree related functions and variables, including the actual class and methods to create, access and manipulate instances.\r\n\t * @name $.jstree\r\n\t */\r\n\t$.jstree = {\r\n\t\t/**\r\n\t\t * specifies the jstree version in use\r\n\t\t * @name $.jstree.version\r\n\t\t */\r\n\t\tversion : '{{VERSION}}',\r\n\t\t/**\r\n\t\t * holds all the default options used when creating new instances\r\n\t\t * @name $.jstree.defaults\r\n\t\t */\r\n\t\tdefaults : {\r\n\t\t\t/**\r\n\t\t\t * configure which plugins will be active on an instance. Should be an array of strings, where each element is a plugin name. The default is `[]`\r\n\t\t\t * @name $.jstree.defaults.plugins\r\n\t\t\t */\r\n\t\t\tplugins : []\r\n\t\t},\r\n\t\t/**\r\n\t\t * stores all loaded jstree plugins (used internally)\r\n\t\t * @name $.jstree.plugins\r\n\t\t */\r\n\t\tplugins : {},\r\n\t\tpath : src && src.indexOf('/') !== -1 ? src.replace(/\\/[^\\/]+$/,'') : '',\r\n\t\tidregex : /[\\\\:&!^|()\\[\\]<>@*'+~#\";.,=\\- \\/${}%?`]/g,\r\n\t\troot : '#'\r\n\t};\r\n\t\r\n\t/**\r\n\t * creates a jstree instance\r\n\t * @name $.jstree.create(el [, options])\r\n\t * @param {DOMElement|jQuery|String} el the element to create the instance on, can be jQuery extended or a selector\r\n\t * @param {Object} options options for this instance (extends `$.jstree.defaults`)\r\n\t * @return {jsTree} the new instance\r\n\t */\r\n\t$.jstree.create = function (el, options) {\r\n\t\treturn new Tree(el,options);\r\n\t};\r\n\r\n\t/**\r\n\t * remove all traces of jstree from the DOM and destroy all instances\r\n\t * @name $.jstree.destroy()\r\n\t */\r\n\t$.jstree.destroy = function () {\r\n\t\t$('.jstree:jstree').jstree('destroy');\r\n\t\t$(document).off('.jstree');\r\n\t};\r\n\r\n\r\n\t/**\r\n\t * get a reference to an existing instance\r\n\t *\r\n\t * __Examples__\r\n\t *\r\n\t *\t// provided a container with an ID of \"tree\", and a nested node with an ID of \"branch\"\r\n\t *\t// all of there will return the same instance\r\n\t *\t$.jstree.reference('tree');\r\n\t *\t$.jstree.reference('#tree');\r\n\t *\t$.jstree.reference($('#tree'));\r\n\t *\t$.jstree.reference(document.getElementByID('tree'));\r\n\t *\t$.jstree.reference('branch');\r\n\t *\t$.jstree.reference('#branch');\r\n\t *\t$.jstree.reference($('#branch'));\r\n\t *\t$.jstree.reference(document.getElementByID('branch'));\r\n\t *\r\n\t * @name $.jstree.reference(needle)\r\n\t * @param {DOMElement|jQuery|String} needle\r\n\t * @return {jsTree|null} the instance or `null` if not found\r\n\t */\r\n\t$.jstree.reference = function (needle) {\r\n\t\tvar tmp = null,\r\n\t\t\tobj = null;\r\n\t\tif(needle && needle.id && (!needle.tagName || !needle.nodeType)) { needle = needle.id; }\r\n\r\n\t\tif(!obj || !obj.length) {\r\n\t\t\ttry { obj = $(needle); } catch (ignore) { }\r\n\t\t}\r\n\t\tif(!obj || !obj.length) {\r\n\t\t\ttry { obj = $('#' + needle.replace($.jstree.idregex,'\\\\$&')); } catch (ignore) { }\r\n\t\t}\r\n\t\tif(obj && obj.length && (obj = obj.closest('.jstree')).length && (obj = obj.data('jstree'))) {\r\n\t\t\ttmp = obj;\r\n\t\t}\r\n\t\telse {\r\n\t\t\t$('.jstree').each(function () {\r\n\t\t\t\tvar inst = $(this).data('jstree');\r\n\t\t\t\tif(inst && inst._model.data[needle]) {\r\n\t\t\t\t\ttmp = inst;\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t\treturn tmp;\r\n\t};\r\n\r\n\t/**\r\n\t * Create an instance, get an instance or invoke a command on a instance.\r\n\t *\r\n\t * If there is no instance associated with the current node a new one is created and `arg` is used to extend `$.jstree.defaults` for this new instance. There would be no return value (chaining is not broken).\r\n\t *\r\n\t * If there is an existing instance and `arg` is a string the command specified by `arg` is executed on the instance, with any additional arguments passed to the function. If the function returns a value it will be returned (chaining could break depending on function).\r\n\t *\r\n\t * If there is an existing instance and `arg` is not a string the instance itself is returned (similar to `$.jstree.reference`).\r\n\t *\r\n\t * In any other case - nothing is returned and chaining is not broken.\r\n\t *\r\n\t * __Examples__\r\n\t *\r\n\t *\t$('#tree1').jstree(); // creates an instance\r\n\t *\t$('#tree2').jstree({ plugins : [] }); // create an instance with some options\r\n\t *\t$('#tree1').jstree('open_node', '#branch_1'); // call a method on an existing instance, passing additional arguments\r\n\t *\t$('#tree2').jstree(); // get an existing instance (or create an instance)\r\n\t *\t$('#tree2').jstree(true); // get an existing instance (will not create new instance)\r\n\t *\t$('#branch_1').jstree().select_node('#branch_1'); // get an instance (using a nested element and call a method)\r\n\t *\r\n\t * @name $().jstree([arg])\r\n\t * @param {String|Object} arg\r\n\t * @return {Mixed}\r\n\t */\r\n\t$.fn.jstree = function (arg) {\r\n\t\t// check for string argument\r\n\t\tvar is_method\t= (typeof arg === 'string'),\r\n\t\t\targs\t\t= Array.prototype.slice.call(arguments, 1),\r\n\t\t\tresult\t\t= null;\r\n\t\tif(arg === true && !this.length) { return false; }\r\n\t\tthis.each(function () {\r\n\t\t\t// get the instance (if there is one) and method (if it exists)\r\n\t\t\tvar instance = $.jstree.reference(this),\r\n\t\t\t\tmethod = is_method && instance ? instance[arg] : null;\r\n\t\t\t// if calling a method, and method is available - execute on the instance\r\n\t\t\tresult = is_method && method ?\r\n\t\t\t\tmethod.apply(instance, args) :\r\n\t\t\t\tnull;\r\n\t\t\t// if there is no instance and no method is being called - create one\r\n\t\t\tif(!instance && !is_method && (arg === undefined || $.isPlainObject(arg))) {\r\n\t\t\t\t$.jstree.create(this, arg);\r\n\t\t\t}\r\n\t\t\t// if there is an instance and no method is called - return the instance\r\n\t\t\tif( (instance && !is_method) || arg === true ) {\r\n\t\t\t\tresult = instance || false;\r\n\t\t\t}\r\n\t\t\t// if there was a method call which returned a result - break and return the value\r\n\t\t\tif(result !== null && result !== undefined) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t});\r\n\t\t// if there was a method call with a valid return value - return that, otherwise continue the chain\r\n\t\treturn result !== null && result !== undefined ?\r\n\t\t\tresult : this;\r\n\t};\r\n\r\n\t/**\r\n\t * stores all defaults for the core\r\n\t * @name $.jstree.defaults.core\r\n\t */\r\n\t$.jstree.defaults.core = {\r\n\t\t/**\r\n\t\t * data configuration\r\n\t\t *\r\n\t\t * If left as `false` the HTML inside the jstree container element is used to populate the tree (that should be an unordered list with list items).\r\n\t\t *\r\n\t\t * You can also pass in a HTML string or a JSON array here.\r\n\t\t *\r\n\t\t * It is possible to pass in a standard jQuery-like AJAX config and jstree will automatically determine if the response is JSON or HTML and use that to populate the tree.\r\n\t\t * In addition to the standard jQuery ajax options here you can suppy functions for `data` and `url`, the functions will be run in the current instance's scope and a param will be passed indicating which node is being loaded, the return value of those functions will be used.\r\n\t\t *\r\n\t\t * The last option is to specify a function, that function will receive the node being loaded as argument and a second param which is a function which should be called with the result.\r\n\t\t *\r\n\t\t * __Examples__\r\n\t\t *\r\n\t\t *\t// AJAX\r\n\t\t *\t$('#tree').jstree({\r\n\t\t *\t\t'core' : {\r\n\t\t *\t\t\t'data' : {\r\n\t\t *\t\t\t\t'url' : '/get/children/',\r\n\t\t *\t\t\t\t'data' : function (node) {\r\n\t\t *\t\t\t\t\treturn { 'id' : node.id };\r\n\t\t *\t\t\t\t}\r\n\t\t *\t\t\t}\r\n\t\t *\t\t});\r\n\t\t *\r\n\t\t *\t// direct data\r\n\t\t *\t$('#tree').jstree({\r\n\t\t *\t\t'core' : {\r\n\t\t *\t\t\t'data' : [\r\n\t\t *\t\t\t\t'Simple root node',\r\n\t\t *\t\t\t\t{\r\n\t\t *\t\t\t\t\t'id' : 'node_2',\r\n\t\t *\t\t\t\t\t'text' : 'Root node with options',\r\n\t\t *\t\t\t\t\t'state' : { 'opened' : true, 'selected' : true },\r\n\t\t *\t\t\t\t\t'children' : [ { 'text' : 'Child 1' }, 'Child 2']\r\n\t\t *\t\t\t\t}\r\n\t\t *\t\t\t]\r\n\t\t *\t\t}\r\n\t\t *\t});\r\n\t\t *\r\n\t\t *\t// function\r\n\t\t *\t$('#tree').jstree({\r\n\t\t *\t\t'core' : {\r\n\t\t *\t\t\t'data' : function (obj, callback) {\r\n\t\t *\t\t\t\tcallback.call(this, ['Root 1', 'Root 2']);\r\n\t\t *\t\t\t}\r\n\t\t *\t\t});\r\n\t\t *\r\n\t\t * @name $.jstree.defaults.core.data\r\n\t\t */\r\n\t\tdata\t\t\t: false,\r\n\t\t/**\r\n\t\t * configure the various strings used throughout the tree\r\n\t\t *\r\n\t\t * You can use an object where the key is the string you need to replace and the value is your replacement.\r\n\t\t * Another option is to specify a function which will be called with an argument of the needed string and should return the replacement.\r\n\t\t * If left as `false` no replacement is made.\r\n\t\t *\r\n\t\t * __Examples__\r\n\t\t *\r\n\t\t *\t$('#tree').jstree({\r\n\t\t *\t\t'core' : {\r\n\t\t *\t\t\t'strings' : {\r\n\t\t *\t\t\t\t'Loading ...' : 'Please wait ...'\r\n\t\t *\t\t\t}\r\n\t\t *\t\t}\r\n\t\t *\t});\r\n\t\t *\r\n\t\t * @name $.jstree.defaults.core.strings\r\n\t\t */\r\n\t\tstrings\t\t\t: false,\r\n\t\t/**\r\n\t\t * determines what happens when a user tries to modify the structure of the tree\r\n\t\t * If left as `false` all operations like create, rename, delete, move or copy are prevented.\r\n\t\t * You can set this to `true` to allow all interactions or use a function to have better control.\r\n\t\t *\r\n\t\t * __Examples__\r\n\t\t *\r\n\t\t *\t$('#tree').jstree({\r\n\t\t *\t\t'core' : {\r\n\t\t *\t\t\t'check_callback' : function (operation, node, node_parent, node_position, more) {\r\n\t\t *\t\t\t\t// operation can be 'create_node', 'rename_node', 'delete_node', 'move_node', 'copy_node' or 'edit'\r\n\t\t *\t\t\t\t// in case of 'rename_node' node_position is filled with the new node name\r\n\t\t *\t\t\t\treturn operation === 'rename_node' ? true : false;\r\n\t\t *\t\t\t}\r\n\t\t *\t\t}\r\n\t\t *\t});\r\n\t\t *\r\n\t\t * @name $.jstree.defaults.core.check_callback\r\n\t\t */\r\n\t\tcheck_callback\t: false,\r\n\t\t/**\r\n\t\t * a callback called with a single object parameter in the instance's scope when something goes wrong (operation prevented, ajax failed, etc)\r\n\t\t * @name $.jstree.defaults.core.error\r\n\t\t */\r\n\t\terror\t\t\t: $.noop,\r\n\t\t/**\r\n\t\t * the open / close animation duration in milliseconds - set this to `false` to disable the animation (default is `200`)\r\n\t\t * @name $.jstree.defaults.core.animation\r\n\t\t */\r\n\t\tanimation\t\t: 200,\r\n\t\t/**\r\n\t\t * a boolean indicating if multiple nodes can be selected\r\n\t\t * @name $.jstree.defaults.core.multiple\r\n\t\t */\r\n\t\tmultiple\t\t: true,\r\n\t\t/**\r\n\t\t * theme configuration object\r\n\t\t * @name $.jstree.defaults.core.themes\r\n\t\t */\r\n\t\tthemes\t\t\t: {\r\n\t\t\t/**\r\n\t\t\t * the name of the theme to use (if left as `false` the default theme is used)\r\n\t\t\t * @name $.jstree.defaults.core.themes.name\r\n\t\t\t */\r\n\t\t\tname\t\t\t: false,\r\n\t\t\t/**\r\n\t\t\t * the URL of the theme's CSS file, leave this as `false` if you have manually included the theme CSS (recommended). You can set this to `true` too which will try to autoload the theme.\r\n\t\t\t * @name $.jstree.defaults.core.themes.url\r\n\t\t\t */\r\n\t\t\turl\t\t\t\t: false,\r\n\t\t\t/**\r\n\t\t\t * the location of all jstree themes - only used if `url` is set to `true`\r\n\t\t\t * @name $.jstree.defaults.core.themes.dir\r\n\t\t\t */\r\n\t\t\tdir\t\t\t\t: false,\r\n\t\t\t/**\r\n\t\t\t * a boolean indicating if connecting dots are shown\r\n\t\t\t * @name $.jstree.defaults.core.themes.dots\r\n\t\t\t */\r\n\t\t\tdots\t\t\t: true,\r\n\t\t\t/**\r\n\t\t\t * a boolean indicating if node icons are shown\r\n\t\t\t * @name $.jstree.defaults.core.themes.icons\r\n\t\t\t */\r\n\t\t\ticons\t\t\t: true,\r\n\t\t\t/**\r\n\t\t\t * a boolean indicating if node ellipsis should be shown - this only works with a fixed with on the container\r\n\t\t\t * @name $.jstree.defaults.core.themes.ellipsis\r\n\t\t\t */\r\n\t\t\tellipsis\t\t: false,\r\n\t\t\t/**\r\n\t\t\t * a boolean indicating if the tree background is striped\r\n\t\t\t * @name $.jstree.defaults.core.themes.stripes\r\n\t\t\t */\r\n\t\t\tstripes\t\t\t: false,\r\n\t\t\t/**\r\n\t\t\t * a string (or boolean `false`) specifying the theme variant to use (if the theme supports variants)\r\n\t\t\t * @name $.jstree.defaults.core.themes.variant\r\n\t\t\t */\r\n\t\t\tvariant\t\t\t: false,\r\n\t\t\t/**\r\n\t\t\t * a boolean specifying if a reponsive version of the theme should kick in on smaller screens (if the theme supports it). Defaults to `false`.\r\n\t\t\t * @name $.jstree.defaults.core.themes.responsive\r\n\t\t\t */\r\n\t\t\tresponsive\t\t: false\r\n\t\t},\r\n\t\t/**\r\n\t\t * if left as `true` all parents of all selected nodes will be opened once the tree loads (so that all selected nodes are visible to the user)\r\n\t\t * @name $.jstree.defaults.core.expand_selected_onload\r\n\t\t */\r\n\t\texpand_selected_onload : true,\r\n\t\t/**\r\n\t\t * if left as `true` web workers will be used to parse incoming JSON data where possible, so that the UI will not be blocked by large requests. Workers are however about 30% slower. Defaults to `true`\r\n\t\t * @name $.jstree.defaults.core.worker\r\n\t\t */\r\n\t\tworker : true,\r\n\t\t/**\r\n\t\t * Force node text to plain text (and escape HTML). Defaults to `false`\r\n\t\t * @name $.jstree.defaults.core.force_text\r\n\t\t */\r\n\t\tforce_text : false,\r\n\t\t/**\r\n\t\t * Should the node should be toggled if the text is double clicked . Defaults to `true`\r\n\t\t * @name $.jstree.defaults.core.dblclick_toggle\r\n\t\t */\r\n\t\tdblclick_toggle : true,\r\n\t\t/**\r\n\t\t * Should the loaded nodes be part of the state. Defaults to `false`\r\n\t\t * @name $.jstree.defaults.core.loaded_state\r\n\t\t */\r\n\t\tloaded_state : false,\r\n\t\t/**\r\n\t\t * Should the last active node be focused when the tree container is blurred and the focused again. This helps working with screen readers. Defaults to `true`\r\n\t\t * @name $.jstree.defaults.core.restore_focus\r\n\t\t */\r\n\t\trestore_focus : true,\r\n\t\t/**\r\n\t\t * Default keyboard shortcuts (an object where each key is the button name or combo - like 'enter', 'ctrl-space', 'p', etc and the value is the function to execute in the instance's scope)\r\n\t\t * @name $.jstree.defaults.core.keyboard\r\n\t\t */\r\n\t\tkeyboard : {\r\n\t\t\t'ctrl-space': function (e) {\r\n\t\t\t\t// aria defines space only with Ctrl\r\n\t\t\t\te.type = \"click\";\r\n\t\t\t\t$(e.currentTarget).trigger(e);\r\n\t\t\t},\r\n\t\t\t'enter': function (e) {\r\n\t\t\t\t// enter\r\n\t\t\t\te.type = \"click\";\r\n\t\t\t\t$(e.currentTarget).trigger(e);\r\n\t\t\t},\r\n\t\t\t'left': function (e) {\r\n\t\t\t\t// left\r\n\t\t\t\te.preventDefault();\r\n\t\t\t\tif(this.is_open(e.currentTarget)) {\r\n\t\t\t\t\tthis.close_node(e.currentTarget);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tvar o = this.get_parent(e.currentTarget);\r\n\t\t\t\t\tif(o && o.id !== $.jstree.root) { this.get_node(o, true).children('.jstree-anchor').focus(); }\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t'up': function (e) {\r\n\t\t\t\t// up\r\n\t\t\t\te.preventDefault();\r\n\t\t\t\tvar o = this.get_prev_dom(e.currentTarget);\r\n\t\t\t\tif(o && o.length) { o.children('.jstree-anchor').focus(); }\r\n\t\t\t},\r\n\t\t\t'right': function (e) {\r\n\t\t\t\t// right\r\n\t\t\t\te.preventDefault();\r\n\t\t\t\tif(this.is_closed(e.currentTarget)) {\r\n\t\t\t\t\tthis.open_node(e.currentTarget, function (o) { this.get_node(o, true).children('.jstree-anchor').focus(); });\r\n\t\t\t\t}\r\n\t\t\t\telse if (this.is_open(e.currentTarget)) {\r\n\t\t\t\t\tvar o = this.get_node(e.currentTarget, true).children('.jstree-children')[0];\r\n\t\t\t\t\tif(o) { $(this._firstChild(o)).children('.jstree-anchor').focus(); }\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t'down': function (e) {\r\n\t\t\t\t// down\r\n\t\t\t\te.preventDefault();\r\n\t\t\t\tvar o = this.get_next_dom(e.currentTarget);\r\n\t\t\t\tif(o && o.length) { o.children('.jstree-anchor').focus(); }\r\n\t\t\t},\r\n\t\t\t'*': function (e) {\r\n\t\t\t\t// aria defines * on numpad as open_all - not very common\r\n\t\t\t\tthis.open_all();\r\n\t\t\t},\r\n\t\t\t'home': function (e) {\r\n\t\t\t\t// home\r\n\t\t\t\te.preventDefault();\r\n\t\t\t\tvar o = this._firstChild(this.get_container_ul()[0]);\r\n\t\t\t\tif(o) { $(o).children('.jstree-anchor').filter(':visible').focus(); }\r\n\t\t\t},\r\n\t\t\t'end': function (e) {\r\n\t\t\t\t// end\r\n\t\t\t\te.preventDefault();\r\n\t\t\t\tthis.element.find('.jstree-anchor').filter(':visible').last().focus();\r\n\t\t\t},\r\n\t\t\t'f2': function (e) {\r\n\t\t\t\t// f2 - safe to include - if check_callback is false it will fail\r\n\t\t\t\te.preventDefault();\r\n\t\t\t\tthis.edit(e.currentTarget);\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n    var Tree = jstree.Tree = langx.Evented.inherit({\r\n        klassName: \"Tree\",\r\n\r\n\t\t/**\r\n\t\t * used to decorate an instance with a plugin. Used internally.\r\n\t\t * @private\r\n\t\t * @name plugin(deco [, opts])\r\n\t\t * @param  {String} deco the plugin to decorate with\r\n\t\t * @param  {Object} opts options for the plugin\r\n\t\t * @return {jsTree}\r\n\t\t */\r\n\t\tplugin : function (deco, opts) {\r\n\t\t\tvar Child = $.jstree.plugins[deco];\r\n\t\t\tif(Child) {\r\n\t\t\t\tthis._data[deco] = {};\r\n\t\t\t\tChild.prototype = this;\r\n\t\t\t\treturn new Child(opts, this);\r\n\t\t\t}\r\n\t\t\treturn this;\r\n\t\t},\r\n\t\t/**\r\n\t\t * initialize the instance. Used internally.\r\n\t\t * @private\r\n\t\t * @name init(el, optons)\r\n\t\t * @param {DOMElement|jQuery|String} el the element we are transforming\r\n\t\t * @param {Object} options options for this instance\r\n\t\t * @trigger init.jstree, loading.jstree, loaded.jstree, ready.jstree, changed.jstree\r\n\t\t */\r\n\t\tinit : function (el, options) {\r\n\t\t\tthis._id = ++instance_counter;\r\n\t\t\tthis._cnt = 0;\r\n\t\t\tthis._wrk = null;\r\n\t\t\tthis._data = {\r\n\t\t\t\tcore : {\r\n\t\t\t\t\tthemes : {\r\n\t\t\t\t\t\tname : false,\r\n\t\t\t\t\t\tdots : false,\r\n\t\t\t\t\t\ticons : false,\r\n\t\t\t\t\t\tellipsis : false\r\n\t\t\t\t\t},\r\n\t\t\t\t\tselected : [],\r\n\t\t\t\t\tlast_error : {},\r\n\t\t\t\t\tworking : false,\r\n\t\t\t\t\tworker_queue : [],\r\n\t\t\t\t\tfocused : null\r\n\t\t\t\t}\r\n\t\t\t};\r\n\r\n\t\t\tvar  opt = options,\r\n\t\t\t\ttmp = this;\r\n\t\t\toptions = $.extend(true, {}, $.jstree.defaults, options);\r\n\t\t\tif(opt && opt.plugins) {\r\n\t\t\t\toptions.plugins = opt.plugins;\r\n\t\t\t}\r\n\t\t\t$.each(options.plugins, function (i, k) {\r\n\t\t\t\tif(i !== 'core') {\r\n\t\t\t\t\ttmp = tmp.plugin(k, options[k]);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\t$(el).data('jstree', tmp);\r\n\r\n\t\t\ttmp._model = {\r\n\t\t\t\tdata : {},\r\n\t\t\t\tchanged : [],\r\n\t\t\t\tforce_full_redraw : false,\r\n\t\t\t\tredraw_timeout : false,\r\n\t\t\t\tdefault_state : {\r\n\t\t\t\t\tloaded : true,\r\n\t\t\t\t\topened : false,\r\n\t\t\t\t\tselected : false,\r\n\t\t\t\t\tdisabled : false\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t\ttmp._model.data[$.jstree.root] = {\r\n\t\t\t\tid : $.jstree.root,\r\n\t\t\t\tparent : null,\r\n\t\t\t\tparents : [],\r\n\t\t\t\tchildren : [],\r\n\t\t\t\tchildren_d : [],\r\n\t\t\t\tstate : { loaded : false }\r\n\t\t\t};\r\n\r\n\t\t\ttmp.element = $(el).addClass('jstree jstree-' + tmp._id);\r\n\t\t\ttmp.settings = options;\r\n\r\n\t\t\ttmp._data.core.ready = false;\r\n\t\t\ttmp._data.core.loaded = false;\r\n\t\t\ttmp._data.core.rtl = (tmp.element.css(\"direction\") === \"rtl\");\r\n\t\t\ttmp.element[tmp._data.core.rtl ? 'addClass' : 'removeClass'](\"jstree-rtl\");\r\n\t\t\ttmp.element.attr('role','tree');\r\n\t\t\tif(tmp.settings.core.multiple) {\r\n\t\t\t\ttmp.element.attr('aria-multiselectable', true);\r\n\t\t\t}\r\n\t\t\tif(!tmp.element.attr('tabindex')) {\r\n\t\t\t\ttmp.element.attr('tabindex','0');\r\n\t\t\t}\r\n\r\n\t\t\ttmp.bind();\r\n\t\t\t/**\r\n\t\t\t * triggered after all events are bound\r\n\t\t\t * @event\r\n\t\t\t * @name init.jstree\r\n\t\t\t */\r\n\t\t\ttmp.trigger(\"init\");\r\n\r\n\t\t\ttmp._data.core.original_container_html = tmp.element.find(\" > ul > li\").clone(true);\r\n\t\t\ttmp._data.core.original_container_html\r\n\t\t\t\t.find(\"li\").addBack()\r\n\t\t\t\t.contents().filter(function() {\r\n\t\t\t\t\treturn this.nodeType === 3 && (!this.nodeValue || /^\\s+$/.test(this.nodeValue));\r\n\t\t\t\t})\r\n\t\t\t\t.remove();\r\n\t\t\ttmp.element.html(\"<\"+\"ul class='jstree-container-ul jstree-children' role='group'><\"+\"li id='j\"+tmp._id+\"_loading' class='jstree-initial-node jstree-loading jstree-leaf jstree-last' role='tree-item'><i class='jstree-icon jstree-ocl'></i><\"+\"a class='jstree-anchor' href='#'><i class='jstree-icon jstree-themeicon-hidden'></i>\" + tmp.get_string(\"Loading ...\") + \"</a></li></ul>\");\r\n\t\t\ttmp.element.attr('aria-activedescendant','j' + tmp._id + '_loading');\r\n\t\t\ttmp._data.core.li_height = tmp.get_container_ul().children(\"li\").first().outerHeight() || 24;\r\n\t\t\ttmp._data.core.node = tmp._create_prototype_node();\r\n\t\t\t/**\r\n\t\t\t * triggered after the loading text is shown and before loading starts\r\n\t\t\t * @event\r\n\t\t\t * @name loading.jstree\r\n\t\t\t */\r\n\t\t\ttmp.trigger(\"loading\");\r\n\t\t\ttmp.load_node($.jstree.root);\r\n\t\t\treturn tmp;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * destroy an instance\r\n\t\t * @name destroy()\r\n\t\t * @param  {Boolean} keep_html if not set to `true` the container will be emptied, otherwise the current DOM elements will be kept intact\r\n\t\t */\r\n\t\tdestroy : function (keep_html) {\r\n\t\t\t/**\r\n\t\t\t * triggered before the tree is destroyed\r\n\t\t\t * @event\r\n\t\t\t * @name destroy.jstree\r\n\t\t\t */\r\n\t\t\ttmp.trigger(\"destroy\");\r\n\t\t\tif(this._wrk) {\r\n\t\t\t\ttry {\r\n\t\t\t\t\twindow.URL.revokeObjectURL(this._wrk);\r\n\t\t\t\t\tthis._wrk = null;\r\n\t\t\t\t}\r\n\t\t\t\tcatch (ignore) { }\r\n\t\t\t}\r\n\t\t\tif(!keep_html) { this.element.empty(); }\r\n\t\t\tthis.teardown();\r\n\t\t},\r\n\t\t/**\r\n\t\t * Create a prototype node\r\n\t\t * @name _create_prototype_node()\r\n\t\t * @return {DOMElement}\r\n\t\t */\r\n\t\t_create_prototype_node : function () {\r\n\t\t\tvar _node = document.createElement('LI'), _temp1, _temp2;\r\n\t\t\t_node.setAttribute('role', 'treeitem');\r\n\t\t\t_temp1 = document.createElement('I');\r\n\t\t\t_temp1.className = 'jstree-icon jstree-ocl';\r\n\t\t\t_temp1.setAttribute('role', 'presentation');\r\n\t\t\t_node.appendChild(_temp1);\r\n\t\t\t_temp1 = document.createElement('A');\r\n\t\t\t_temp1.className = 'jstree-anchor';\r\n\t\t\t_temp1.setAttribute('href','#');\r\n\t\t\t_temp1.setAttribute('tabindex','-1');\r\n\t\t\t_temp2 = document.createElement('I');\r\n\t\t\t_temp2.className = 'jstree-icon jstree-themeicon';\r\n\t\t\t_temp2.setAttribute('role', 'presentation');\r\n\t\t\t_temp1.appendChild(_temp2);\r\n\t\t\t_node.appendChild(_temp1);\r\n\t\t\t_temp1 = _temp2 = null;\r\n\r\n\t\t\treturn _node;\r\n\t\t},\r\n\t\t_kbevent_to_func : function (e) {\r\n\t\t\tvar keys = {\r\n\t\t\t\t8: \"Backspace\", 9: \"Tab\", 13: \"Return\", 19: \"Pause\", 27: \"Esc\",\r\n\t\t\t\t32: \"Space\", 33: \"PageUp\", 34: \"PageDown\", 35: \"End\", 36: \"Home\",\r\n\t\t\t\t37: \"Left\", 38: \"Up\", 39: \"Right\", 40: \"Down\", 44: \"Print\", 45: \"Insert\",\r\n\t\t\t\t46: \"Delete\", 96: \"Numpad0\", 97: \"Numpad1\", 98: \"Numpad2\", 99 : \"Numpad3\",\r\n\t\t\t\t100: \"Numpad4\", 101: \"Numpad5\", 102: \"Numpad6\", 103: \"Numpad7\",\r\n\t\t\t\t104: \"Numpad8\", 105: \"Numpad9\", '-13': \"NumpadEnter\", 112: \"F1\",\r\n\t\t\t\t113: \"F2\", 114: \"F3\", 115: \"F4\", 116: \"F5\", 117: \"F6\", 118: \"F7\",\r\n\t\t\t\t119: \"F8\", 120: \"F9\", 121: \"F10\", 122: \"F11\", 123: \"F12\", 144: \"Numlock\",\r\n\t\t\t\t145: \"Scrolllock\", 16: 'Shift', 17: 'Ctrl', 18: 'Alt',\r\n\t\t\t\t48: '0',  49: '1',  50: '2',  51: '3',  52: '4', 53:  '5',\r\n\t\t\t\t54: '6',  55: '7',  56: '8',  57: '9',  59: ';',  61: '=', 65:  'a',\r\n\t\t\t\t66: 'b',  67: 'c',  68: 'd',  69: 'e',  70: 'f',  71: 'g', 72:  'h',\r\n\t\t\t\t73: 'i',  74: 'j',  75: 'k',  76: 'l',  77: 'm',  78: 'n', 79:  'o',\r\n\t\t\t\t80: 'p',  81: 'q',  82: 'r',  83: 's',  84: 't',  85: 'u', 86:  'v',\r\n\t\t\t\t87: 'w',  88: 'x',  89: 'y',  90: 'z', 107: '+', 109: '-', 110: '.',\r\n\t\t\t\t186: ';', 187: '=', 188: ',', 189: '-', 190: '.', 191: '/', 192: '`',\r\n\t\t\t\t219: '[', 220: '\\\\',221: ']', 222: \"'\", 111: '/', 106: '*', 173: '-'\r\n\t\t\t};\r\n\t\t\tvar parts = [];\r\n\t\t\tif (e.ctrlKey) { parts.push('ctrl'); }\r\n\t\t\tif (e.altKey) { parts.push('alt'); }\r\n\t\t\tif (e.shiftKey) { parts.push('shift'); }\r\n\t\t\tparts.push(keys[e.which] || e.which);\r\n\t\t\tparts = parts.sort().join('-').toLowerCase();\r\n\r\n\t\t\tvar kb = this.settings.core.keyboard, i, tmp;\r\n\t\t\tfor (i in kb) {\r\n\t\t\t\tif (kb.hasOwnProperty(i)) {\r\n\t\t\t\t\ttmp = i;\r\n\t\t\t\t\tif (tmp !== '-' && tmp !== '+') {\r\n\t\t\t\t\t\ttmp = tmp.replace('--', '-MINUS').replace('+-', '-MINUS').replace('++', '-PLUS').replace('-+', '-PLUS');\r\n\t\t\t\t\t\ttmp = tmp.split(/-|\\+/).sort().join('-').replace('MINUS', '-').replace('PLUS', '+').toLowerCase();\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (tmp === parts) {\r\n\t\t\t\t\t\treturn kb[i];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn null;\r\n\t\t},\r\n\t\t/**\r\n\t\t * part of the destroying of an instance. Used internally.\r\n\t\t * @private\r\n\t\t * @name teardown()\r\n\t\t */\r\n\t\tteardown : function () {\r\n\t\t\tthis.unbind();\r\n\t\t\tthis.element\r\n\t\t\t\t.removeClass('jstree')\r\n\t\t\t\t.removeData('jstree')\r\n\t\t\t\t.find(\"[class^='jstree']\")\r\n\t\t\t\t\t.addBack()\r\n\t\t\t\t\t.attr(\"class\", function () { return this.className.replace(/jstree[^ ]*|$/ig,''); });\r\n\t\t\tthis.element = null;\r\n\t\t},\r\n\t\t/**\r\n\t\t * bind all events. Used internally.\r\n\t\t * @private\r\n\t\t * @name bind()\r\n\t\t */\r\n\t\tbind : function () {\r\n\t\t\tvar word = '',\r\n\t\t\t\ttout = null,\r\n\t\t\t\twas_click = 0;\r\n\t\t\tthis.element\r\n\t\t\t\t.on(\"dblclick.jstree\", function (e) {\r\n\t\t\t\t\t\tif(e.target.tagName && e.target.tagName.toLowerCase() === \"input\") { return true; }\r\n\t\t\t\t\t\tif(document.selection && document.selection.empty) {\r\n\t\t\t\t\t\t\tdocument.selection.empty();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tif(window.getSelection) {\r\n\t\t\t\t\t\t\t\tvar sel = window.getSelection();\r\n\t\t\t\t\t\t\t\ttry {\r\n\t\t\t\t\t\t\t\t\tsel.removeAllRanges();\r\n\t\t\t\t\t\t\t\t\tsel.collapse();\r\n\t\t\t\t\t\t\t\t} catch (ignore) { }\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t})\r\n\t\t\t\t.on(\"mousedown.jstree\", $.proxy(function (e) {\r\n\t\t\t\t\t\tif(e.target === this.element[0]) {\r\n\t\t\t\t\t\t\te.preventDefault(); // prevent losing focus when clicking scroll arrows (FF, Chrome)\r\n\t\t\t\t\t\t\twas_click = +(new Date()); // ie does not allow to prevent losing focus\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}, this))\r\n\t\t\t\t.on(\"mousedown.jstree\", \".jstree-ocl\", function (e) {\r\n\t\t\t\t\t\te.preventDefault(); // prevent any node inside from losing focus when clicking the open/close icon\r\n\t\t\t\t\t})\r\n\t\t\t\t.on(\"click.jstree\", \".jstree-ocl\", $.proxy(function (e) {\r\n\t\t\t\t\t\tthis.toggle_node(e.target);\r\n\t\t\t\t\t}, this))\r\n\t\t\t\t.on(\"dblclick.jstree\", \".jstree-anchor\", $.proxy(function (e) {\r\n\t\t\t\t\t\tif(e.target.tagName && e.target.tagName.toLowerCase() === \"input\") { return true; }\r\n\t\t\t\t\t\tif(this.settings.core.dblclick_toggle) {\r\n\t\t\t\t\t\t\tthis.toggle_node(e.target);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}, this))\r\n\t\t\t\t.on(\"click.jstree\", \".jstree-anchor\", $.proxy(function (e) {\r\n\t\t\t\t\t\te.preventDefault();\r\n\t\t\t\t\t\tif(e.currentTarget !== document.activeElement) { $(e.currentTarget).focus(); }\r\n\t\t\t\t\t\tthis.activate_node(e.currentTarget, e);\r\n\t\t\t\t\t}, this))\r\n\t\t\t\t.on('keydown.jstree', '.jstree-anchor', $.proxy(function (e) {\r\n\t\t\t\t\t\tif(e.target.tagName && e.target.tagName.toLowerCase() === \"input\") { return true; }\r\n\t\t\t\t\t\tif(this._data.core.rtl) {\r\n\t\t\t\t\t\t\tif(e.which === 37) { e.which = 39; }\r\n\t\t\t\t\t\t\telse if(e.which === 39) { e.which = 37; }\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tvar f = this._kbevent_to_func(e);\r\n\t\t\t\t\t\tif (f) {\r\n\t\t\t\t\t\t\tvar r = f.call(this, e);\r\n\t\t\t\t\t\t\tif (r === false || r === true) {\r\n\t\t\t\t\t\t\t\treturn r;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}, this))\r\n\t\t\t\t.on(\"load_node.jstree\", $.proxy(function (e, data) {\r\n\t\t\t\t\t\tif(data.status) {\r\n\t\t\t\t\t\t\tif(data.node.id === $.jstree.root && !this._data.core.loaded) {\r\n\t\t\t\t\t\t\t\tthis._data.core.loaded = true;\r\n\t\t\t\t\t\t\t\tif(this._firstChild(this.get_container_ul()[0])) {\r\n\t\t\t\t\t\t\t\t\tthis.element.attr('aria-activedescendant',this._firstChild(this.get_container_ul()[0]).id);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t/**\r\n\t\t\t\t\t\t\t\t * triggered after the root node is loaded for the first time\r\n\t\t\t\t\t\t\t\t * @event\r\n\t\t\t\t\t\t\t\t * @name loaded.jstree\r\n\t\t\t\t\t\t\t\t */\r\n\t\t\t\t\t\t\t\tthis.trigger(\"loaded\");\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif(!this._data.core.ready) {\r\n\t\t\t\t\t\t\t\tsetTimeout($.proxy(function() {\r\n\t\t\t\t\t\t\t\t\tif(this.element && !this.get_container_ul().find('.jstree-loading').length) {\r\n\t\t\t\t\t\t\t\t\t\tthis._data.core.ready = true;\r\n\t\t\t\t\t\t\t\t\t\tif(this._data.core.selected.length) {\r\n\t\t\t\t\t\t\t\t\t\t\tif(this.settings.core.expand_selected_onload) {\r\n\t\t\t\t\t\t\t\t\t\t\t\tvar tmp = [], i, j;\r\n\t\t\t\t\t\t\t\t\t\t\t\tfor(i = 0, j = this._data.core.selected.length; i < j; i++) {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\ttmp = tmp.concat(this._model.data[this._data.core.selected[i]].parents);\r\n\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t\ttmp = $.vakata.array_unique(tmp);\r\n\t\t\t\t\t\t\t\t\t\t\t\tfor(i = 0, j = tmp.length; i < j; i++) {\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tthis.open_node(tmp[i], false, 0);\r\n\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\tthis.trigger('changed', { 'action' : 'ready', 'selected' : this._data.core.selected });\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t/**\r\n\t\t\t\t\t\t\t\t\t\t * triggered after all nodes are finished loading\r\n\t\t\t\t\t\t\t\t\t\t * @event\r\n\t\t\t\t\t\t\t\t\t\t * @name ready.jstree\r\n\t\t\t\t\t\t\t\t\t\t */\r\n\t\t\t\t\t\t\t\t\t\tthis.trigger(\"ready\");\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}, this), 0);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}, this))\r\n\t\t\t\t// quick searching when the tree is focused\r\n\t\t\t\t.on('keypress.jstree', $.proxy(function (e) {\r\n\t\t\t\t\t\tif(e.target.tagName && e.target.tagName.toLowerCase() === \"input\") { return true; }\r\n\t\t\t\t\t\tif(tout) { clearTimeout(tout); }\r\n\t\t\t\t\t\ttout = setTimeout(function () {\r\n\t\t\t\t\t\t\tword = '';\r\n\t\t\t\t\t\t}, 500);\r\n\r\n\t\t\t\t\t\tvar chr = String.fromCharCode(e.which).toLowerCase(),\r\n\t\t\t\t\t\t\tcol = this.element.find('.jstree-anchor').filter(':visible'),\r\n\t\t\t\t\t\t\tind = col.index(document.activeElement) || 0,\r\n\t\t\t\t\t\t\tend = false;\r\n\t\t\t\t\t\tword += chr;\r\n\r\n\t\t\t\t\t\t// match for whole word from current node down (including the current node)\r\n\t\t\t\t\t\tif(word.length > 1) {\r\n\t\t\t\t\t\t\tcol.slice(ind).each($.proxy(function (i, v) {\r\n\t\t\t\t\t\t\t\tif($(v).text().toLowerCase().indexOf(word) === 0) {\r\n\t\t\t\t\t\t\t\t\t$(v).focus();\r\n\t\t\t\t\t\t\t\t\tend = true;\r\n\t\t\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}, this));\r\n\t\t\t\t\t\t\tif(end) { return; }\r\n\r\n\t\t\t\t\t\t\t// match for whole word from the beginning of the tree\r\n\t\t\t\t\t\t\tcol.slice(0, ind).each($.proxy(function (i, v) {\r\n\t\t\t\t\t\t\t\tif($(v).text().toLowerCase().indexOf(word) === 0) {\r\n\t\t\t\t\t\t\t\t\t$(v).focus();\r\n\t\t\t\t\t\t\t\t\tend = true;\r\n\t\t\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}, this));\r\n\t\t\t\t\t\t\tif(end) { return; }\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t// list nodes that start with that letter (only if word consists of a single char)\r\n\t\t\t\t\t\tif(new RegExp('^' + chr.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&') + '+$').test(word)) {\r\n\t\t\t\t\t\t\t// search for the next node starting with that letter\r\n\t\t\t\t\t\t\tcol.slice(ind + 1).each($.proxy(function (i, v) {\r\n\t\t\t\t\t\t\t\tif($(v).text().toLowerCase().charAt(0) === chr) {\r\n\t\t\t\t\t\t\t\t\t$(v).focus();\r\n\t\t\t\t\t\t\t\t\tend = true;\r\n\t\t\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}, this));\r\n\t\t\t\t\t\t\tif(end) { return; }\r\n\r\n\t\t\t\t\t\t\t// search from the beginning\r\n\t\t\t\t\t\t\tcol.slice(0, ind + 1).each($.proxy(function (i, v) {\r\n\t\t\t\t\t\t\t\tif($(v).text().toLowerCase().charAt(0) === chr) {\r\n\t\t\t\t\t\t\t\t\t$(v).focus();\r\n\t\t\t\t\t\t\t\t\tend = true;\r\n\t\t\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}, this));\r\n\t\t\t\t\t\t\tif(end) { return; }\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}, this))\r\n\t\t\t\t// THEME RELATED\r\n\t\t\t\t.on(\"init.jstree\", $.proxy(function () {\r\n\t\t\t\t\t\tvar s = this.settings.core.themes;\r\n\t\t\t\t\t\tthis._data.core.themes.dots\t\t\t= s.dots;\r\n\t\t\t\t\t\tthis._data.core.themes.stripes\t\t= s.stripes;\r\n\t\t\t\t\t\tthis._data.core.themes.icons\t\t= s.icons;\r\n\t\t\t\t\t\tthis._data.core.themes.ellipsis\t\t= s.ellipsis;\r\n\t\t\t\t\t\tthis.set_theme(s.name || \"default\", s.url);\r\n\t\t\t\t\t\tthis.set_theme_variant(s.variant);\r\n\t\t\t\t\t}, this))\r\n\t\t\t\t.on(\"loading.jstree\", $.proxy(function () {\r\n\t\t\t\t\t\tthis[ this._data.core.themes.dots ? \"show_dots\" : \"hide_dots\" ]();\r\n\t\t\t\t\t\tthis[ this._data.core.themes.icons ? \"show_icons\" : \"hide_icons\" ]();\r\n\t\t\t\t\t\tthis[ this._data.core.themes.stripes ? \"show_stripes\" : \"hide_stripes\" ]();\r\n\t\t\t\t\t\tthis[ this._data.core.themes.ellipsis ? \"show_ellipsis\" : \"hide_ellipsis\" ]();\r\n\t\t\t\t\t}, this))\r\n\t\t\t\t.on('blur.jstree', '.jstree-anchor', $.proxy(function (e) {\r\n\t\t\t\t\t\tthis._data.core.focused = null;\r\n\t\t\t\t\t\t$(e.currentTarget).filter('.jstree-hovered').mouseleave();\r\n\t\t\t\t\t\tthis.element.attr('tabindex', '0');\r\n\t\t\t\t\t}, this))\r\n\t\t\t\t.on('focus.jstree', '.jstree-anchor', $.proxy(function (e) {\r\n\t\t\t\t\t\tvar tmp = this.get_node(e.currentTarget);\r\n\t\t\t\t\t\tif(tmp && tmp.id) {\r\n\t\t\t\t\t\t\tthis._data.core.focused = tmp.id;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tthis.element.find('.jstree-hovered').not(e.currentTarget).mouseleave();\r\n\t\t\t\t\t\t$(e.currentTarget).mouseenter();\r\n\t\t\t\t\t\tthis.element.attr('tabindex', '-1');\r\n\t\t\t\t\t}, this))\r\n\t\t\t\t.on('focus.jstree', $.proxy(function () {\r\n\t\t\t\t\t\tif(+(new Date()) - was_click > 500 && !this._data.core.focused && this.settings.core.restore_focus) {\r\n\t\t\t\t\t\t\twas_click = 0;\r\n\t\t\t\t\t\t\tvar act = this.get_node(this.element.attr('aria-activedescendant'), true);\r\n\t\t\t\t\t\t\tif(act) {\r\n\t\t\t\t\t\t\t\tact.find('> .jstree-anchor').focus();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}, this))\r\n\t\t\t\t.on('mouseenter.jstree', '.jstree-anchor', $.proxy(function (e) {\r\n\t\t\t\t\t\tthis.hover_node(e.currentTarget);\r\n\t\t\t\t\t}, this))\r\n\t\t\t\t.on('mouseleave.jstree', '.jstree-anchor', $.proxy(function (e) {\r\n\t\t\t\t\t\tthis.dehover_node(e.currentTarget);\r\n\t\t\t\t\t}, this));\r\n\t\t},\r\n\t\t/**\r\n\t\t * part of the destroying of an instance. Used internally.\r\n\t\t * @private\r\n\t\t * @name unbind()\r\n\t\t */\r\n\t\tunbind : function () {\r\n\t\t\tthis.element.off('.jstree');\r\n\t\t\t$(document).off('.jstree-' + this._id);\r\n\t\t},\r\n\t\t/**\r\n\t\t * trigger an event. Used internally.\r\n\t\t * @private\r\n\t\t * @name trigger(ev [, data])\r\n\t\t * @param  {String} ev the name of the event to trigger\r\n\t\t * @param  {Object} data additional data to pass with the event\r\n\t\t */\r\n\t\ttrigger : function (ev, data) {\r\n\t\t\tif(!data) {\r\n\t\t\t\tdata = {};\r\n\t\t\t}\r\n\t\t\tdata.instance = this;\r\n\t\t\tthis.element.trigger(ev.replace('.jstree','') + '.jstree', data);\r\n\t\t},\r\n\t\t/**\r\n\t\t * returns the jQuery extended instance container\r\n\t\t * @name get_container()\r\n\t\t * @return {jQuery}\r\n\t\t */\r\n\t\tget_container : function () {\r\n\t\t\treturn this.element;\r\n\t\t},\r\n\t\t/**\r\n\t\t * returns the jQuery extended main UL node inside the instance container. Used internally.\r\n\t\t * @private\r\n\t\t * @name get_container_ul()\r\n\t\t * @return {jQuery}\r\n\t\t */\r\n\t\tget_container_ul : function () {\r\n\t\t\treturn this.element.children(\".jstree-children\").first();\r\n\t\t},\r\n\t\t/**\r\n\t\t * gets string replacements (localization). Used internally.\r\n\t\t * @private\r\n\t\t * @name get_string(key)\r\n\t\t * @param  {String} key\r\n\t\t * @return {String}\r\n\t\t */\r\n\t\tget_string : function (key) {\r\n\t\t\tvar a = this.settings.core.strings;\r\n\t\t\tif($.isFunction(a)) { return a.call(this, key); }\r\n\t\t\tif(a && a[key]) { return a[key]; }\r\n\t\t\treturn key;\r\n\t\t},\r\n\t\t/**\r\n\t\t * gets the first child of a DOM node. Used internally.\r\n\t\t * @private\r\n\t\t * @name _firstChild(dom)\r\n\t\t * @param  {DOMElement} dom\r\n\t\t * @return {DOMElement}\r\n\t\t */\r\n\t\t_firstChild : function (dom) {\r\n\t\t\tdom = dom ? dom.firstChild : null;\r\n\t\t\twhile(dom !== null && dom.nodeType !== 1) {\r\n\t\t\t\tdom = dom.nextSibling;\r\n\t\t\t}\r\n\t\t\treturn dom;\r\n\t\t},\r\n\t\t/**\r\n\t\t * gets the next sibling of a DOM node. Used internally.\r\n\t\t * @private\r\n\t\t * @name _nextSibling(dom)\r\n\t\t * @param  {DOMElement} dom\r\n\t\t * @return {DOMElement}\r\n\t\t */\r\n\t\t_nextSibling : function (dom) {\r\n\t\t\tdom = dom ? dom.nextSibling : null;\r\n\t\t\twhile(dom !== null && dom.nodeType !== 1) {\r\n\t\t\t\tdom = dom.nextSibling;\r\n\t\t\t}\r\n\t\t\treturn dom;\r\n\t\t},\r\n\t\t/**\r\n\t\t * gets the previous sibling of a DOM node. Used internally.\r\n\t\t * @private\r\n\t\t * @name _previousSibling(dom)\r\n\t\t * @param  {DOMElement} dom\r\n\t\t * @return {DOMElement}\r\n\t\t */\r\n\t\t_previousSibling : function (dom) {\r\n\t\t\tdom = dom ? dom.previousSibling : null;\r\n\t\t\twhile(dom !== null && dom.nodeType !== 1) {\r\n\t\t\t\tdom = dom.previousSibling;\r\n\t\t\t}\r\n\t\t\treturn dom;\r\n\t\t},\r\n\t\t/**\r\n\t\t * get the JSON representation of a node (or the actual jQuery extended DOM node) by using any input (child DOM element, ID string, selector, etc)\r\n\t\t * @name get_node(obj [, as_dom])\r\n\t\t * @param  {mixed} obj\r\n\t\t * @param  {Boolean} as_dom\r\n\t\t * @return {Object|jQuery}\r\n\t\t */\r\n\t\tget_node : function (obj, as_dom) {\r\n\t\t\tif(obj && obj.id) {\r\n\t\t\t\tobj = obj.id;\r\n\t\t\t}\r\n\t\t\tvar dom;\r\n\t\t\ttry {\r\n\t\t\t\tif(this._model.data[obj]) {\r\n\t\t\t\t\tobj = this._model.data[obj];\r\n\t\t\t\t}\r\n\t\t\t\telse if(typeof obj === \"string\" && this._model.data[obj.replace(/^#/, '')]) {\r\n\t\t\t\t\tobj = this._model.data[obj.replace(/^#/, '')];\r\n\t\t\t\t}\r\n\t\t\t\telse if(typeof obj === \"string\" && (dom = $('#' + obj.replace($.jstree.idregex,'\\\\$&'), this.element)).length && this._model.data[dom.closest('.jstree-node').attr('id')]) {\r\n\t\t\t\t\tobj = this._model.data[dom.closest('.jstree-node').attr('id')];\r\n\t\t\t\t}\r\n\t\t\t\telse if((dom = $(obj, this.element)).length && this._model.data[dom.closest('.jstree-node').attr('id')]) {\r\n\t\t\t\t\tobj = this._model.data[dom.closest('.jstree-node').attr('id')];\r\n\t\t\t\t}\r\n\t\t\t\telse if((dom = $(obj, this.element)).length && dom.hasClass('jstree')) {\r\n\t\t\t\t\tobj = this._model.data[$.jstree.root];\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif(as_dom) {\r\n\t\t\t\t\tobj = obj.id === $.jstree.root ? this.element : $('#' + obj.id.replace($.jstree.idregex,'\\\\$&'), this.element);\r\n\t\t\t\t}\r\n\t\t\t\treturn obj;\r\n\t\t\t} catch (ex) { return false; }\r\n\t\t},\r\n\t\t/**\r\n\t\t * get the path to a node, either consisting of node texts, or of node IDs, optionally glued together (otherwise an array)\r\n\t\t * @name get_path(obj [, glue, ids])\r\n\t\t * @param  {mixed} obj the node\r\n\t\t * @param  {String} glue if you want the path as a string - pass the glue here (for example '/'), if a falsy value is supplied here, an array is returned\r\n\t\t * @param  {Boolean} ids if set to true build the path using ID, otherwise node text is used\r\n\t\t * @return {mixed}\r\n\t\t */\r\n\t\tget_path : function (obj, glue, ids) {\r\n\t\t\tobj = obj.parents ? obj : this.get_node(obj);\r\n\t\t\tif(!obj || obj.id === $.jstree.root || !obj.parents) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tvar i, j, p = [];\r\n\t\t\tp.push(ids ? obj.id : obj.text);\r\n\t\t\tfor(i = 0, j = obj.parents.length; i < j; i++) {\r\n\t\t\t\tp.push(ids ? obj.parents[i] : this.get_text(obj.parents[i]));\r\n\t\t\t}\r\n\t\t\tp = p.reverse().slice(1);\r\n\t\t\treturn glue ? p.join(glue) : p;\r\n\t\t},\r\n\t\t/**\r\n\t\t * get the next visible node that is below the `obj` node. If `strict` is set to `true` only sibling nodes are returned.\r\n\t\t * @name get_next_dom(obj [, strict])\r\n\t\t * @param  {mixed} obj\r\n\t\t * @param  {Boolean} strict\r\n\t\t * @return {jQuery}\r\n\t\t */\r\n\t\tget_next_dom : function (obj, strict) {\r\n\t\t\tvar tmp;\r\n\t\t\tobj = this.get_node(obj, true);\r\n\t\t\tif(obj[0] === this.element[0]) {\r\n\t\t\t\ttmp = this._firstChild(this.get_container_ul()[0]);\r\n\t\t\t\twhile (tmp && tmp.offsetHeight === 0) {\r\n\t\t\t\t\ttmp = this._nextSibling(tmp);\r\n\t\t\t\t}\r\n\t\t\t\treturn tmp ? $(tmp) : false;\r\n\t\t\t}\r\n\t\t\tif(!obj || !obj.length) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tif(strict) {\r\n\t\t\t\ttmp = obj[0];\r\n\t\t\t\tdo {\r\n\t\t\t\t\ttmp = this._nextSibling(tmp);\r\n\t\t\t\t} while (tmp && tmp.offsetHeight === 0);\r\n\t\t\t\treturn tmp ? $(tmp) : false;\r\n\t\t\t}\r\n\t\t\tif(obj.hasClass(\"jstree-open\")) {\r\n\t\t\t\ttmp = this._firstChild(obj.children('.jstree-children')[0]);\r\n\t\t\t\twhile (tmp && tmp.offsetHeight === 0) {\r\n\t\t\t\t\ttmp = this._nextSibling(tmp);\r\n\t\t\t\t}\r\n\t\t\t\tif(tmp !== null) {\r\n\t\t\t\t\treturn $(tmp);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\ttmp = obj[0];\r\n\t\t\tdo {\r\n\t\t\t\ttmp = this._nextSibling(tmp);\r\n\t\t\t} while (tmp && tmp.offsetHeight === 0);\r\n\t\t\tif(tmp !== null) {\r\n\t\t\t\treturn $(tmp);\r\n\t\t\t}\r\n\t\t\treturn obj.parentsUntil(\".jstree\",\".jstree-node\").nextAll(\".jstree-node:visible\").first();\r\n\t\t},\r\n\t\t/**\r\n\t\t * get the previous visible node that is above the `obj` node. If `strict` is set to `true` only sibling nodes are returned.\r\n\t\t * @name get_prev_dom(obj [, strict])\r\n\t\t * @param  {mixed} obj\r\n\t\t * @param  {Boolean} strict\r\n\t\t * @return {jQuery}\r\n\t\t */\r\n\t\tget_prev_dom : function (obj, strict) {\r\n\t\t\tvar tmp;\r\n\t\t\tobj = this.get_node(obj, true);\r\n\t\t\tif(obj[0] === this.element[0]) {\r\n\t\t\t\ttmp = this.get_container_ul()[0].lastChild;\r\n\t\t\t\twhile (tmp && tmp.offsetHeight === 0) {\r\n\t\t\t\t\ttmp = this._previousSibling(tmp);\r\n\t\t\t\t}\r\n\t\t\t\treturn tmp ? $(tmp) : false;\r\n\t\t\t}\r\n\t\t\tif(!obj || !obj.length) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tif(strict) {\r\n\t\t\t\ttmp = obj[0];\r\n\t\t\t\tdo {\r\n\t\t\t\t\ttmp = this._previousSibling(tmp);\r\n\t\t\t\t} while (tmp && tmp.offsetHeight === 0);\r\n\t\t\t\treturn tmp ? $(tmp) : false;\r\n\t\t\t}\r\n\t\t\ttmp = obj[0];\r\n\t\t\tdo {\r\n\t\t\t\ttmp = this._previousSibling(tmp);\r\n\t\t\t} while (tmp && tmp.offsetHeight === 0);\r\n\t\t\tif(tmp !== null) {\r\n\t\t\t\tobj = $(tmp);\r\n\t\t\t\twhile(obj.hasClass(\"jstree-open\")) {\r\n\t\t\t\t\tobj = obj.children(\".jstree-children\").first().children(\".jstree-node:visible:last\");\r\n\t\t\t\t}\r\n\t\t\t\treturn obj;\r\n\t\t\t}\r\n\t\t\ttmp = obj[0].parentNode.parentNode;\r\n\t\t\treturn tmp && tmp.className && tmp.className.indexOf('jstree-node') !== -1 ? $(tmp) : false;\r\n\t\t},\r\n\t\t/**\r\n\t\t * get the parent ID of a node\r\n\t\t * @name get_parent(obj)\r\n\t\t * @param  {mixed} obj\r\n\t\t * @return {String}\r\n\t\t */\r\n\t\tget_parent : function (obj) {\r\n\t\t\tobj = this.get_node(obj);\r\n\t\t\tif(!obj || obj.id === $.jstree.root) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\treturn obj.parent;\r\n\t\t},\r\n\t\t/**\r\n\t\t * get a jQuery collection of all the children of a node (node must be rendered), returns false on error\r\n\t\t * @name get_children_dom(obj)\r\n\t\t * @param  {mixed} obj\r\n\t\t * @return {jQuery}\r\n\t\t */\r\n\t\tget_children_dom : function (obj) {\r\n\t\t\tobj = this.get_node(obj, true);\r\n\t\t\tif(obj[0] === this.element[0]) {\r\n\t\t\t\treturn this.get_container_ul().children(\".jstree-node\");\r\n\t\t\t}\r\n\t\t\tif(!obj || !obj.length) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\treturn obj.children(\".jstree-children\").children(\".jstree-node\");\r\n\t\t},\r\n\t\t/**\r\n\t\t * checks if a node has children\r\n\t\t * @name is_parent(obj)\r\n\t\t * @param  {mixed} obj\r\n\t\t * @return {Boolean}\r\n\t\t */\r\n\t\tis_parent : function (obj) {\r\n\t\t\tobj = this.get_node(obj);\r\n\t\t\treturn obj && (obj.state.loaded === false || obj.children.length > 0);\r\n\t\t},\r\n\t\t/**\r\n\t\t * checks if a node is loaded (its children are available)\r\n\t\t * @name is_loaded(obj)\r\n\t\t * @param  {mixed} obj\r\n\t\t * @return {Boolean}\r\n\t\t */\r\n\t\tis_loaded : function (obj) {\r\n\t\t\tobj = this.get_node(obj);\r\n\t\t\treturn obj && obj.state.loaded;\r\n\t\t},\r\n\t\t/**\r\n\t\t * check if a node is currently loading (fetching children)\r\n\t\t * @name is_loading(obj)\r\n\t\t * @param  {mixed} obj\r\n\t\t * @return {Boolean}\r\n\t\t */\r\n\t\tis_loading : function (obj) {\r\n\t\t\tobj = this.get_node(obj);\r\n\t\t\treturn obj && obj.state && obj.state.loading;\r\n\t\t},\r\n\t\t/**\r\n\t\t * check if a node is opened\r\n\t\t * @name is_open(obj)\r\n\t\t * @param  {mixed} obj\r\n\t\t * @return {Boolean}\r\n\t\t */\r\n\t\tis_open : function (obj) {\r\n\t\t\tobj = this.get_node(obj);\r\n\t\t\treturn obj && obj.state.opened;\r\n\t\t},\r\n\t\t/**\r\n\t\t * check if a node is in a closed state\r\n\t\t * @name is_closed(obj)\r\n\t\t * @param  {mixed} obj\r\n\t\t * @return {Boolean}\r\n\t\t */\r\n\t\tis_closed : function (obj) {\r\n\t\t\tobj = this.get_node(obj);\r\n\t\t\treturn obj && this.is_parent(obj) && !obj.state.opened;\r\n\t\t},\r\n\t\t/**\r\n\t\t * check if a node has no children\r\n\t\t * @name is_leaf(obj)\r\n\t\t * @param  {mixed} obj\r\n\t\t * @return {Boolean}\r\n\t\t */\r\n\t\tis_leaf : function (obj) {\r\n\t\t\treturn !this.is_parent(obj);\r\n\t\t},\r\n\t\t/**\r\n\t\t * loads a node (fetches its children using the `core.data` setting). Multiple nodes can be passed to by using an array.\r\n\t\t * @name load_node(obj [, callback])\r\n\t\t * @param  {mixed} obj\r\n\t\t * @param  {function} callback a function to be executed once loading is complete, the function is executed in the instance's scope and receives two arguments - the node and a boolean status\r\n\t\t * @return {Boolean}\r\n\t\t * @trigger load_node.jstree\r\n\t\t */\r\n\t\tload_node : function (obj, callback) {\r\n\t\t\tvar k, l, i, j, c;\r\n\t\t\tif($.isArray(obj)) {\r\n\t\t\t\tthis._load_nodes(obj.slice(), callback);\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\tobj = this.get_node(obj);\r\n\t\t\tif(!obj) {\r\n\t\t\t\tif(callback) { callback.call(this, obj, false); }\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\t// if(obj.state.loading) { } // the node is already loading - just wait for it to load and invoke callback? but if called implicitly it should be loaded again?\r\n\t\t\tif(obj.state.loaded) {\r\n\t\t\t\tobj.state.loaded = false;\r\n\t\t\t\tfor(i = 0, j = obj.parents.length; i < j; i++) {\r\n\t\t\t\t\tthis._model.data[obj.parents[i]].children_d = $.vakata.array_filter(this._model.data[obj.parents[i]].children_d, function (v) {\r\n\t\t\t\t\t\treturn $.inArray(v, obj.children_d) === -1;\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\tfor(k = 0, l = obj.children_d.length; k < l; k++) {\r\n\t\t\t\t\tif(this._model.data[obj.children_d[k]].state.selected) {\r\n\t\t\t\t\t\tc = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tdelete this._model.data[obj.children_d[k]];\r\n\t\t\t\t}\r\n\t\t\t\tif (c) {\r\n\t\t\t\t\tthis._data.core.selected = $.vakata.array_filter(this._data.core.selected, function (v) {\r\n\t\t\t\t\t\treturn $.inArray(v, obj.children_d) === -1;\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\tobj.children = [];\r\n\t\t\t\tobj.children_d = [];\r\n\t\t\t\tif(c) {\r\n\t\t\t\t\tthis.trigger('changed', { 'action' : 'load_node', 'node' : obj, 'selected' : this._data.core.selected });\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tobj.state.failed = false;\r\n\t\t\tobj.state.loading = true;\r\n\t\t\tthis.get_node(obj, true).addClass(\"jstree-loading\").attr('aria-busy',true);\r\n\t\t\tthis._load_node(obj, $.proxy(function (status) {\r\n\t\t\t\tobj = this._model.data[obj.id];\r\n\t\t\t\tobj.state.loading = false;\r\n\t\t\t\tobj.state.loaded = status;\r\n\t\t\t\tobj.state.failed = !obj.state.loaded;\r\n\t\t\t\tvar dom = this.get_node(obj, true), i = 0, j = 0, m = this._model.data, has_children = false;\r\n\t\t\t\tfor(i = 0, j = obj.children.length; i < j; i++) {\r\n\t\t\t\t\tif(m[obj.children[i]] && !m[obj.children[i]].state.hidden) {\r\n\t\t\t\t\t\thas_children = true;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif(obj.state.loaded && dom && dom.length) {\r\n\t\t\t\t\tdom.removeClass('jstree-closed jstree-open jstree-leaf');\r\n\t\t\t\t\tif (!has_children) {\r\n\t\t\t\t\t\tdom.addClass('jstree-leaf');\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tif (obj.id !== '#') {\r\n\t\t\t\t\t\t\tdom.addClass(obj.state.opened ? 'jstree-open' : 'jstree-closed');\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tdom.removeClass(\"jstree-loading\").attr('aria-busy',false);\r\n\t\t\t\t/**\r\n\t\t\t\t * triggered after a node is loaded\r\n\t\t\t\t * @event\r\n\t\t\t\t * @name load_node.jstree\r\n\t\t\t\t * @param {Object} node the node that was loading\r\n\t\t\t\t * @param {Boolean} status was the node loaded successfully\r\n\t\t\t\t */\r\n\t\t\t\tthis.trigger('load_node', { \"node\" : obj, \"status\" : status });\r\n\t\t\t\tif(callback) {\r\n\t\t\t\t\tcallback.call(this, obj, status);\r\n\t\t\t\t}\r\n\t\t\t}, this));\r\n\t\t\treturn true;\r\n\t\t},\r\n\t\t/**\r\n\t\t * load an array of nodes (will also load unavailable nodes as soon as the appear in the structure). Used internally.\r\n\t\t * @private\r\n\t\t * @name _load_nodes(nodes [, callback])\r\n\t\t * @param  {array} nodes\r\n\t\t * @param  {function} callback a function to be executed once loading is complete, the function is executed in the instance's scope and receives one argument - the array passed to _load_nodes\r\n\t\t */\r\n\t\t_load_nodes : function (nodes, callback, is_callback, force_reload) {\r\n\t\t\tvar r = true,\r\n\t\t\t\tc = function () { this._load_nodes(nodes, callback, true); },\r\n\t\t\t\tm = this._model.data, i, j, tmp = [];\r\n\t\t\tfor(i = 0, j = nodes.length; i < j; i++) {\r\n\t\t\t\tif(m[nodes[i]] && ( (!m[nodes[i]].state.loaded && !m[nodes[i]].state.failed) || (!is_callback && force_reload) )) {\r\n\t\t\t\t\tif(!this.is_loading(nodes[i])) {\r\n\t\t\t\t\t\tthis.load_node(nodes[i], c);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tr = false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(r) {\r\n\t\t\t\tfor(i = 0, j = nodes.length; i < j; i++) {\r\n\t\t\t\t\tif(m[nodes[i]] && m[nodes[i]].state.loaded) {\r\n\t\t\t\t\t\ttmp.push(nodes[i]);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif(callback && !callback.done) {\r\n\t\t\t\t\tcallback.call(this, tmp);\r\n\t\t\t\t\tcallback.done = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\t\t/**\r\n\t\t * loads all unloaded nodes\r\n\t\t * @name load_all([obj, callback])\r\n\t\t * @param {mixed} obj the node to load recursively, omit to load all nodes in the tree\r\n\t\t * @param {function} callback a function to be executed once loading all the nodes is complete,\r\n\t\t * @trigger load_all.jstree\r\n\t\t */\r\n\t\tload_all : function (obj, callback) {\r\n\t\t\tif(!obj) { obj = $.jstree.root; }\r\n\t\t\tobj = this.get_node(obj);\r\n\t\t\tif(!obj) { return false; }\r\n\t\t\tvar to_load = [],\r\n\t\t\t\tm = this._model.data,\r\n\t\t\t\tc = m[obj.id].children_d,\r\n\t\t\t\ti, j;\r\n\t\t\tif(obj.state && !obj.state.loaded) {\r\n\t\t\t\tto_load.push(obj.id);\r\n\t\t\t}\r\n\t\t\tfor(i = 0, j = c.length; i < j; i++) {\r\n\t\t\t\tif(m[c[i]] && m[c[i]].state && !m[c[i]].state.loaded) {\r\n\t\t\t\t\tto_load.push(c[i]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(to_load.length) {\r\n\t\t\t\tthis._load_nodes(to_load, function () {\r\n\t\t\t\t\tthis.load_all(obj, callback);\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t/**\r\n\t\t\t\t * triggered after a load_all call completes\r\n\t\t\t\t * @event\r\n\t\t\t\t * @name load_all.jstree\r\n\t\t\t\t * @param {Object} node the recursively loaded node\r\n\t\t\t\t */\r\n\t\t\t\tif(callback) { callback.call(this, obj); }\r\n\t\t\t\tthis.trigger('load_all', { \"node\" : obj });\r\n\t\t\t}\r\n\t\t},\r\n\t\t/**\r\n\t\t * handles the actual loading of a node. Used only internally.\r\n\t\t * @private\r\n\t\t * @name _load_node(obj [, callback])\r\n\t\t * @param  {mixed} obj\r\n\t\t * @param  {function} callback a function to be executed once loading is complete, the function is executed in the instance's scope and receives one argument - a boolean status\r\n\t\t * @return {Boolean}\r\n\t\t */\r\n\t\t_load_node : function (obj, callback) {\r\n\t\t\tvar s = this.settings.core.data, t;\r\n\t\t\tvar notTextOrCommentNode = function notTextOrCommentNode () {\r\n\t\t\t\treturn this.nodeType !== 3 && this.nodeType !== 8;\r\n\t\t\t};\r\n\t\t\t// use original HTML\r\n\t\t\tif(!s) {\r\n\t\t\t\tif(obj.id === $.jstree.root) {\r\n\t\t\t\t\treturn this._append_html_data(obj, this._data.core.original_container_html.clone(true), function (status) {\r\n\t\t\t\t\t\tcallback.call(this, status);\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\treturn callback.call(this, false);\r\n\t\t\t\t}\r\n\t\t\t\t// return callback.call(this, obj.id === $.jstree.root ? this._append_html_data(obj, this._data.core.original_container_html.clone(true)) : false);\r\n\t\t\t}\r\n\t\t\tif($.isFunction(s)) {\r\n\t\t\t\treturn s.call(this, obj, $.proxy(function (d) {\r\n\t\t\t\t\tif(d === false) {\r\n\t\t\t\t\t\tcallback.call(this, false);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tthis[typeof d === 'string' ? '_append_html_data' : '_append_json_data'](obj, typeof d === 'string' ? $($.parseHTML(d)).filter(notTextOrCommentNode) : d, function (status) {\r\n\t\t\t\t\t\t\tcallback.call(this, status);\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t\t// return d === false ? callback.call(this, false) : callback.call(this, this[typeof d === 'string' ? '_append_html_data' : '_append_json_data'](obj, typeof d === 'string' ? $(d) : d));\r\n\t\t\t\t}, this));\r\n\t\t\t}\r\n\t\t\tif(typeof s === 'object') {\r\n\t\t\t\tif(s.url) {\r\n\t\t\t\t\ts = $.extend(true, {}, s);\r\n\t\t\t\t\tif($.isFunction(s.url)) {\r\n\t\t\t\t\t\ts.url = s.url.call(this, obj);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif($.isFunction(s.data)) {\r\n\t\t\t\t\t\ts.data = s.data.call(this, obj);\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn $.ajax(s)\r\n\t\t\t\t\t\t.done($.proxy(function (d,t,x) {\r\n\t\t\t\t\t\t\t\tvar type = x.getResponseHeader('Content-Type');\r\n\t\t\t\t\t\t\t\tif((type && type.indexOf('json') !== -1) || typeof d === \"object\") {\r\n\t\t\t\t\t\t\t\t\treturn this._append_json_data(obj, d, function (status) { callback.call(this, status); });\r\n\t\t\t\t\t\t\t\t\t//return callback.call(this, this._append_json_data(obj, d));\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tif((type && type.indexOf('html') !== -1) || typeof d === \"string\") {\r\n\t\t\t\t\t\t\t\t\treturn this._append_html_data(obj, $($.parseHTML(d)).filter(notTextOrCommentNode), function (status) { callback.call(this, status); });\r\n\t\t\t\t\t\t\t\t\t// return callback.call(this, this._append_html_data(obj, $(d)));\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tthis._data.core.last_error = { 'error' : 'ajax', 'plugin' : 'core', 'id' : 'core_04', 'reason' : 'Could not load node', 'data' : JSON.stringify({ 'id' : obj.id, 'xhr' : x }) };\r\n\t\t\t\t\t\t\t\tthis.settings.core.error.call(this, this._data.core.last_error);\r\n\t\t\t\t\t\t\t\treturn callback.call(this, false);\r\n\t\t\t\t\t\t\t}, this))\r\n\t\t\t\t\t\t.fail($.proxy(function (f) {\r\n\t\t\t\t\t\t\t\tthis._data.core.last_error = { 'error' : 'ajax', 'plugin' : 'core', 'id' : 'core_04', 'reason' : 'Could not load node', 'data' : JSON.stringify({ 'id' : obj.id, 'xhr' : f }) };\r\n\t\t\t\t\t\t\t\tcallback.call(this, false);\r\n\t\t\t\t\t\t\t\tthis.settings.core.error.call(this, this._data.core.last_error);\r\n\t\t\t\t\t\t\t}, this));\r\n\t\t\t\t}\r\n\t\t\t\tif ($.isArray(s)) {\r\n\t\t\t\t\tt = $.extend(true, [], s);\r\n\t\t\t\t} else if ($.isPlainObject(s)) {\r\n\t\t\t\t\tt = $.extend(true, {}, s);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tt = s;\r\n\t\t\t\t}\r\n\t\t\t\tif(obj.id === $.jstree.root) {\r\n\t\t\t\t\treturn this._append_json_data(obj, t, function (status) {\r\n\t\t\t\t\t\tcallback.call(this, status);\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis._data.core.last_error = { 'error' : 'nodata', 'plugin' : 'core', 'id' : 'core_05', 'reason' : 'Could not load node', 'data' : JSON.stringify({ 'id' : obj.id }) };\r\n\t\t\t\t\tthis.settings.core.error.call(this, this._data.core.last_error);\r\n\t\t\t\t\treturn callback.call(this, false);\r\n\t\t\t\t}\r\n\t\t\t\t//return callback.call(this, (obj.id === $.jstree.root ? this._append_json_data(obj, t) : false) );\r\n\t\t\t}\r\n\t\t\tif(typeof s === 'string') {\r\n\t\t\t\tif(obj.id === $.jstree.root) {\r\n\t\t\t\t\treturn this._append_html_data(obj, $($.parseHTML(s)).filter(notTextOrCommentNode), function (status) {\r\n\t\t\t\t\t\tcallback.call(this, status);\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis._data.core.last_error = { 'error' : 'nodata', 'plugin' : 'core', 'id' : 'core_06', 'reason' : 'Could not load node', 'data' : JSON.stringify({ 'id' : obj.id }) };\r\n\t\t\t\t\tthis.settings.core.error.call(this, this._data.core.last_error);\r\n\t\t\t\t\treturn callback.call(this, false);\r\n\t\t\t\t}\r\n\t\t\t\t//return callback.call(this, (obj.id === $.jstree.root ? this._append_html_data(obj, $(s)) : false) );\r\n\t\t\t}\r\n\t\t\treturn callback.call(this, false);\r\n\t\t},\r\n\t\t/**\r\n\t\t * adds a node to the list of nodes to redraw. Used only internally.\r\n\t\t * @private\r\n\t\t * @name _node_changed(obj [, callback])\r\n\t\t * @param  {mixed} obj\r\n\t\t */\r\n\t\t_node_changed : function (obj) {\r\n\t\t\tobj = this.get_node(obj);\r\n      if (obj && $.inArray(obj.id, this._model.changed) === -1) {\r\n\t\t\t\tthis._model.changed.push(obj.id);\r\n\t\t\t}\r\n\t\t},\r\n\t\t/**\r\n\t\t * appends HTML content to the tree. Used internally.\r\n\t\t * @private\r\n\t\t * @name _append_html_data(obj, data)\r\n\t\t * @param  {mixed} obj the node to append to\r\n\t\t * @param  {String} data the HTML string to parse and append\r\n\t\t * @trigger model.jstree, changed.jstree\r\n\t\t */\r\n\t\t_append_html_data : function (dom, data, cb) {\r\n\t\t\tdom = this.get_node(dom);\r\n\t\t\tdom.children = [];\r\n\t\t\tdom.children_d = [];\r\n\t\t\tvar dat = data.is('ul') ? data.children() : data,\r\n\t\t\t\tpar = dom.id,\r\n\t\t\t\tchd = [],\r\n\t\t\t\tdpc = [],\r\n\t\t\t\tm = this._model.data,\r\n\t\t\t\tp = m[par],\r\n\t\t\t\ts = this._data.core.selected.length,\r\n\t\t\t\ttmp, i, j;\r\n\t\t\tdat.each($.proxy(function (i, v) {\r\n\t\t\t\ttmp = this._parse_model_from_html($(v), par, p.parents.concat());\r\n\t\t\t\tif(tmp) {\r\n\t\t\t\t\tchd.push(tmp);\r\n\t\t\t\t\tdpc.push(tmp);\r\n\t\t\t\t\tif(m[tmp].children_d.length) {\r\n\t\t\t\t\t\tdpc = dpc.concat(m[tmp].children_d);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}, this));\r\n\t\t\tp.children = chd;\r\n\t\t\tp.children_d = dpc;\r\n\t\t\tfor(i = 0, j = p.parents.length; i < j; i++) {\r\n\t\t\t\tm[p.parents[i]].children_d = m[p.parents[i]].children_d.concat(dpc);\r\n\t\t\t}\r\n\t\t\t/**\r\n\t\t\t * triggered when new data is inserted to the tree model\r\n\t\t\t * @event\r\n\t\t\t * @name model.jstree\r\n\t\t\t * @param {Array} nodes an array of node IDs\r\n\t\t\t * @param {String} parent the parent ID of the nodes\r\n\t\t\t */\r\n\t\t\tthis.trigger('model', { \"nodes\" : dpc, 'parent' : par });\r\n\t\t\tif(par !== $.jstree.root) {\r\n\t\t\t\tthis._node_changed(par);\r\n\t\t\t\tthis.redraw();\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.get_container_ul().children('.jstree-initial-node').remove();\r\n\t\t\t\tthis.redraw(true);\r\n\t\t\t}\r\n\t\t\tif(this._data.core.selected.length !== s) {\r\n\t\t\t\tthis.trigger('changed', { 'action' : 'model', 'selected' : this._data.core.selected });\r\n\t\t\t}\r\n\t\t\tcb.call(this, true);\r\n\t\t},\r\n\t\t/**\r\n\t\t * appends JSON content to the tree. Used internally.\r\n\t\t * @private\r\n\t\t * @name _append_json_data(obj, data)\r\n\t\t * @param  {mixed} obj the node to append to\r\n\t\t * @param  {String} data the JSON object to parse and append\r\n\t\t * @param  {Boolean} force_processing internal param - do not set\r\n\t\t * @trigger model.jstree, changed.jstree\r\n\t\t */\r\n\t\t_append_json_data : function (dom, data, cb, force_processing) {\r\n\t\t\tif(this.element === null) { return; }\r\n\t\t\tdom = this.get_node(dom);\r\n\t\t\tdom.children = [];\r\n\t\t\tdom.children_d = [];\r\n\t\t\t// *%$@!!!\r\n\t\t\tif(data.d) {\r\n\t\t\t\tdata = data.d;\r\n\t\t\t\tif(typeof data === \"string\") {\r\n\t\t\t\t\tdata = JSON.parse(data);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(!$.isArray(data)) { data = [data]; }\r\n\t\t\tvar w = null,\r\n\t\t\t\targs = {\r\n\t\t\t\t\t'df'\t: this._model.default_state,\r\n\t\t\t\t\t'dat'\t: data,\r\n\t\t\t\t\t'par'\t: dom.id,\r\n\t\t\t\t\t'm'\t\t: this._model.data,\r\n\t\t\t\t\t't_id'\t: this._id,\r\n\t\t\t\t\t't_cnt'\t: this._cnt,\r\n\t\t\t\t\t'sel'\t: this._data.core.selected\r\n\t\t\t\t},\r\n\t\t\t\tfunc = function (data, undefined) {\r\n\t\t\t\t\tif(data.data) { data = data.data; }\r\n\t\t\t\t\tvar dat = data.dat,\r\n\t\t\t\t\t\tpar = data.par,\r\n\t\t\t\t\t\tchd = [],\r\n\t\t\t\t\t\tdpc = [],\r\n\t\t\t\t\t\tadd = [],\r\n\t\t\t\t\t\tdf = data.df,\r\n\t\t\t\t\t\tt_id = data.t_id,\r\n\t\t\t\t\t\tt_cnt = data.t_cnt,\r\n\t\t\t\t\t\tm = data.m,\r\n\t\t\t\t\t\tp = m[par],\r\n\t\t\t\t\t\tsel = data.sel,\r\n\t\t\t\t\t\ttmp, i, j, rslt,\r\n\t\t\t\t\t\tparse_flat = function (d, p, ps) {\r\n\t\t\t\t\t\t\tif(!ps) { ps = []; }\r\n\t\t\t\t\t\t\telse { ps = ps.concat(); }\r\n\t\t\t\t\t\t\tif(p) { ps.unshift(p); }\r\n\t\t\t\t\t\t\tvar tid = d.id.toString(),\r\n\t\t\t\t\t\t\t\ti, j, c, e,\r\n\t\t\t\t\t\t\t\ttmp = {\r\n\t\t\t\t\t\t\t\t\tid\t\t\t: tid,\r\n\t\t\t\t\t\t\t\t\ttext\t\t: d.text || '',\r\n\t\t\t\t\t\t\t\t\ticon\t\t: d.icon !== undefined ? d.icon : true,\r\n\t\t\t\t\t\t\t\t\tparent\t\t: p,\r\n\t\t\t\t\t\t\t\t\tparents\t\t: ps,\r\n\t\t\t\t\t\t\t\t\tchildren\t: d.children || [],\r\n\t\t\t\t\t\t\t\t\tchildren_d\t: d.children_d || [],\r\n\t\t\t\t\t\t\t\t\tdata\t\t: d.data,\r\n\t\t\t\t\t\t\t\t\tstate\t\t: { },\r\n\t\t\t\t\t\t\t\t\tli_attr\t\t: { id : false },\r\n\t\t\t\t\t\t\t\t\ta_attr\t\t: { href : '#' },\r\n\t\t\t\t\t\t\t\t\toriginal\t: false\r\n\t\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t\tfor(i in df) {\r\n\t\t\t\t\t\t\t\tif(df.hasOwnProperty(i)) {\r\n\t\t\t\t\t\t\t\t\ttmp.state[i] = df[i];\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif(d && d.data && d.data.jstree && d.data.jstree.icon) {\r\n\t\t\t\t\t\t\t\ttmp.icon = d.data.jstree.icon;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif(tmp.icon === undefined || tmp.icon === null || tmp.icon === \"\") {\r\n\t\t\t\t\t\t\t\ttmp.icon = true;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif(d && d.data) {\r\n\t\t\t\t\t\t\t\ttmp.data = d.data;\r\n\t\t\t\t\t\t\t\tif(d.data.jstree) {\r\n\t\t\t\t\t\t\t\t\tfor(i in d.data.jstree) {\r\n\t\t\t\t\t\t\t\t\t\tif(d.data.jstree.hasOwnProperty(i)) {\r\n\t\t\t\t\t\t\t\t\t\t\ttmp.state[i] = d.data.jstree[i];\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif(d && typeof d.state === 'object') {\r\n\t\t\t\t\t\t\t\tfor (i in d.state) {\r\n\t\t\t\t\t\t\t\t\tif(d.state.hasOwnProperty(i)) {\r\n\t\t\t\t\t\t\t\t\t\ttmp.state[i] = d.state[i];\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif(d && typeof d.li_attr === 'object') {\r\n\t\t\t\t\t\t\t\tfor (i in d.li_attr) {\r\n\t\t\t\t\t\t\t\t\tif(d.li_attr.hasOwnProperty(i)) {\r\n\t\t\t\t\t\t\t\t\t\ttmp.li_attr[i] = d.li_attr[i];\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif(!tmp.li_attr.id) {\r\n\t\t\t\t\t\t\t\ttmp.li_attr.id = tid;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif(d && typeof d.a_attr === 'object') {\r\n\t\t\t\t\t\t\t\tfor (i in d.a_attr) {\r\n\t\t\t\t\t\t\t\t\tif(d.a_attr.hasOwnProperty(i)) {\r\n\t\t\t\t\t\t\t\t\t\ttmp.a_attr[i] = d.a_attr[i];\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif(d && d.children && d.children === true) {\r\n\t\t\t\t\t\t\t\ttmp.state.loaded = false;\r\n\t\t\t\t\t\t\t\ttmp.children = [];\r\n\t\t\t\t\t\t\t\ttmp.children_d = [];\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tm[tmp.id] = tmp;\r\n\t\t\t\t\t\t\tfor(i = 0, j = tmp.children.length; i < j; i++) {\r\n\t\t\t\t\t\t\t\tc = parse_flat(m[tmp.children[i]], tmp.id, ps);\r\n\t\t\t\t\t\t\t\te = m[c];\r\n\t\t\t\t\t\t\t\ttmp.children_d.push(c);\r\n\t\t\t\t\t\t\t\tif(e.children_d.length) {\r\n\t\t\t\t\t\t\t\t\ttmp.children_d = tmp.children_d.concat(e.children_d);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tdelete d.data;\r\n\t\t\t\t\t\t\tdelete d.children;\r\n\t\t\t\t\t\t\tm[tmp.id].original = d;\r\n\t\t\t\t\t\t\tif(tmp.state.selected) {\r\n\t\t\t\t\t\t\t\tadd.push(tmp.id);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\treturn tmp.id;\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\tparse_nest = function (d, p, ps) {\r\n\t\t\t\t\t\t\tif(!ps) { ps = []; }\r\n\t\t\t\t\t\t\telse { ps = ps.concat(); }\r\n\t\t\t\t\t\t\tif(p) { ps.unshift(p); }\r\n\t\t\t\t\t\t\tvar tid = false, i, j, c, e, tmp;\r\n\t\t\t\t\t\t\tdo {\r\n\t\t\t\t\t\t\t\ttid = 'j' + t_id + '_' + (++t_cnt);\r\n\t\t\t\t\t\t\t} while(m[tid]);\r\n\r\n\t\t\t\t\t\t\ttmp = {\r\n\t\t\t\t\t\t\t\tid\t\t\t: false,\r\n\t\t\t\t\t\t\t\ttext\t\t: typeof d === 'string' ? d : '',\r\n\t\t\t\t\t\t\t\ticon\t\t: typeof d === 'object' && d.icon !== undefined ? d.icon : true,\r\n\t\t\t\t\t\t\t\tparent\t\t: p,\r\n\t\t\t\t\t\t\t\tparents\t\t: ps,\r\n\t\t\t\t\t\t\t\tchildren\t: [],\r\n\t\t\t\t\t\t\t\tchildren_d\t: [],\r\n\t\t\t\t\t\t\t\tdata\t\t: null,\r\n\t\t\t\t\t\t\t\tstate\t\t: { },\r\n\t\t\t\t\t\t\t\tli_attr\t\t: { id : false },\r\n\t\t\t\t\t\t\t\ta_attr\t\t: { href : '#' },\r\n\t\t\t\t\t\t\t\toriginal\t: false\r\n\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t\tfor(i in df) {\r\n\t\t\t\t\t\t\t\tif(df.hasOwnProperty(i)) {\r\n\t\t\t\t\t\t\t\t\ttmp.state[i] = df[i];\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif(d && d.id) { tmp.id = d.id.toString(); }\r\n\t\t\t\t\t\t\tif(d && d.text) { tmp.text = d.text; }\r\n\t\t\t\t\t\t\tif(d && d.data && d.data.jstree && d.data.jstree.icon) {\r\n\t\t\t\t\t\t\t\ttmp.icon = d.data.jstree.icon;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif(tmp.icon === undefined || tmp.icon === null || tmp.icon === \"\") {\r\n\t\t\t\t\t\t\t\ttmp.icon = true;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif(d && d.data) {\r\n\t\t\t\t\t\t\t\ttmp.data = d.data;\r\n\t\t\t\t\t\t\t\tif(d.data.jstree) {\r\n\t\t\t\t\t\t\t\t\tfor(i in d.data.jstree) {\r\n\t\t\t\t\t\t\t\t\t\tif(d.data.jstree.hasOwnProperty(i)) {\r\n\t\t\t\t\t\t\t\t\t\t\ttmp.state[i] = d.data.jstree[i];\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif(d && typeof d.state === 'object') {\r\n\t\t\t\t\t\t\t\tfor (i in d.state) {\r\n\t\t\t\t\t\t\t\t\tif(d.state.hasOwnProperty(i)) {\r\n\t\t\t\t\t\t\t\t\t\ttmp.state[i] = d.state[i];\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif(d && typeof d.li_attr === 'object') {\r\n\t\t\t\t\t\t\t\tfor (i in d.li_attr) {\r\n\t\t\t\t\t\t\t\t\tif(d.li_attr.hasOwnProperty(i)) {\r\n\t\t\t\t\t\t\t\t\t\ttmp.li_attr[i] = d.li_attr[i];\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif(tmp.li_attr.id && !tmp.id) {\r\n\t\t\t\t\t\t\t\ttmp.id = tmp.li_attr.id.toString();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif(!tmp.id) {\r\n\t\t\t\t\t\t\t\ttmp.id = tid;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif(!tmp.li_attr.id) {\r\n\t\t\t\t\t\t\t\ttmp.li_attr.id = tmp.id;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif(d && typeof d.a_attr === 'object') {\r\n\t\t\t\t\t\t\t\tfor (i in d.a_attr) {\r\n\t\t\t\t\t\t\t\t\tif(d.a_attr.hasOwnProperty(i)) {\r\n\t\t\t\t\t\t\t\t\t\ttmp.a_attr[i] = d.a_attr[i];\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif(d && d.children && d.children.length) {\r\n\t\t\t\t\t\t\t\tfor(i = 0, j = d.children.length; i < j; i++) {\r\n\t\t\t\t\t\t\t\t\tc = parse_nest(d.children[i], tmp.id, ps);\r\n\t\t\t\t\t\t\t\t\te = m[c];\r\n\t\t\t\t\t\t\t\t\ttmp.children.push(c);\r\n\t\t\t\t\t\t\t\t\tif(e.children_d.length) {\r\n\t\t\t\t\t\t\t\t\t\ttmp.children_d = tmp.children_d.concat(e.children_d);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\ttmp.children_d = tmp.children_d.concat(tmp.children);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif(d && d.children && d.children === true) {\r\n\t\t\t\t\t\t\t\ttmp.state.loaded = false;\r\n\t\t\t\t\t\t\t\ttmp.children = [];\r\n\t\t\t\t\t\t\t\ttmp.children_d = [];\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tdelete d.data;\r\n\t\t\t\t\t\t\tdelete d.children;\r\n\t\t\t\t\t\t\ttmp.original = d;\r\n\t\t\t\t\t\t\tm[tmp.id] = tmp;\r\n\t\t\t\t\t\t\tif(tmp.state.selected) {\r\n\t\t\t\t\t\t\t\tadd.push(tmp.id);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\treturn tmp.id;\r\n\t\t\t\t\t\t};\r\n\r\n\t\t\t\t\tif(dat.length && dat[0].id !== undefined && dat[0].parent !== undefined) {\r\n\t\t\t\t\t\t// Flat JSON support (for easy import from DB):\r\n\t\t\t\t\t\t// 1) convert to object (foreach)\r\n\t\t\t\t\t\tfor(i = 0, j = dat.length; i < j; i++) {\r\n\t\t\t\t\t\t\tif(!dat[i].children) {\r\n\t\t\t\t\t\t\t\tdat[i].children = [];\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif(!dat[i].state) {\r\n\t\t\t\t\t\t\t\tdat[i].state = {};\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tm[dat[i].id.toString()] = dat[i];\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t// 2) populate children (foreach)\r\n\t\t\t\t\t\tfor(i = 0, j = dat.length; i < j; i++) {\r\n\t\t\t\t\t\t\tif (!m[dat[i].parent.toString()]) {\r\n\t\t\t\t\t\t\t\tthis._data.core.last_error = { 'error' : 'parse', 'plugin' : 'core', 'id' : 'core_07', 'reason' : 'Node with invalid parent', 'data' : JSON.stringify({ 'id' : dat[i].id.toString(), 'parent' : dat[i].parent.toString() }) };\r\n\t\t\t\t\t\t\t\tthis.settings.core.error.call(this, this._data.core.last_error);\r\n\t\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tm[dat[i].parent.toString()].children.push(dat[i].id.toString());\r\n\t\t\t\t\t\t\t// populate parent.children_d\r\n\t\t\t\t\t\t\tp.children_d.push(dat[i].id.toString());\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t// 3) normalize && populate parents and children_d with recursion\r\n\t\t\t\t\t\tfor(i = 0, j = p.children.length; i < j; i++) {\r\n\t\t\t\t\t\t\ttmp = parse_flat(m[p.children[i]], par, p.parents.concat());\r\n\t\t\t\t\t\t\tdpc.push(tmp);\r\n\t\t\t\t\t\t\tif(m[tmp].children_d.length) {\r\n\t\t\t\t\t\t\t\tdpc = dpc.concat(m[tmp].children_d);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tfor(i = 0, j = p.parents.length; i < j; i++) {\r\n\t\t\t\t\t\t\tm[p.parents[i]].children_d = m[p.parents[i]].children_d.concat(dpc);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t// ?) three_state selection - p.state.selected && t - (if three_state foreach(dat => ch) -> foreach(parents) if(parent.selected) child.selected = true;\r\n\t\t\t\t\t\trslt = {\r\n\t\t\t\t\t\t\t'cnt' : t_cnt,\r\n\t\t\t\t\t\t\t'mod' : m,\r\n\t\t\t\t\t\t\t'sel' : sel,\r\n\t\t\t\t\t\t\t'par' : par,\r\n\t\t\t\t\t\t\t'dpc' : dpc,\r\n\t\t\t\t\t\t\t'add' : add\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tfor(i = 0, j = dat.length; i < j; i++) {\r\n\t\t\t\t\t\t\ttmp = parse_nest(dat[i], par, p.parents.concat());\r\n\t\t\t\t\t\t\tif(tmp) {\r\n\t\t\t\t\t\t\t\tchd.push(tmp);\r\n\t\t\t\t\t\t\t\tdpc.push(tmp);\r\n\t\t\t\t\t\t\t\tif(m[tmp].children_d.length) {\r\n\t\t\t\t\t\t\t\t\tdpc = dpc.concat(m[tmp].children_d);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tp.children = chd;\r\n\t\t\t\t\t\tp.children_d = dpc;\r\n\t\t\t\t\t\tfor(i = 0, j = p.parents.length; i < j; i++) {\r\n\t\t\t\t\t\t\tm[p.parents[i]].children_d = m[p.parents[i]].children_d.concat(dpc);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\trslt = {\r\n\t\t\t\t\t\t\t'cnt' : t_cnt,\r\n\t\t\t\t\t\t\t'mod' : m,\r\n\t\t\t\t\t\t\t'sel' : sel,\r\n\t\t\t\t\t\t\t'par' : par,\r\n\t\t\t\t\t\t\t'dpc' : dpc,\r\n\t\t\t\t\t\t\t'add' : add\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(typeof window === 'undefined' || typeof window.document === 'undefined') {\r\n\t\t\t\t\t\tpostMessage(rslt);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\treturn rslt;\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t\trslt = function (rslt, worker) {\r\n\t\t\t\t\tif(this.element === null) { return; }\r\n\t\t\t\t\tthis._cnt = rslt.cnt;\r\n\t\t\t\t\tvar i, m = this._model.data;\r\n\t\t\t\t\tfor (i in m) {\r\n\t\t\t\t\t\tif (m.hasOwnProperty(i) && m[i].state && m[i].state.loading && rslt.mod[i]) {\r\n\t\t\t\t\t\t\trslt.mod[i].state.loading = true;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis._model.data = rslt.mod; // breaks the reference in load_node - careful\r\n\r\n\t\t\t\t\tif(worker) {\r\n\t\t\t\t\t\tvar j, a = rslt.add, r = rslt.sel, s = this._data.core.selected.slice();\r\n\t\t\t\t\t\tm = this._model.data;\r\n\t\t\t\t\t\t// if selection was changed while calculating in worker\r\n\t\t\t\t\t\tif(r.length !== s.length || $.vakata.array_unique(r.concat(s)).length !== r.length) {\r\n\t\t\t\t\t\t\t// deselect nodes that are no longer selected\r\n\t\t\t\t\t\t\tfor(i = 0, j = r.length; i < j; i++) {\r\n\t\t\t\t\t\t\t\tif($.inArray(r[i], a) === -1 && $.inArray(r[i], s) === -1) {\r\n\t\t\t\t\t\t\t\t\tm[r[i]].state.selected = false;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t// select nodes that were selected in the mean time\r\n\t\t\t\t\t\t\tfor(i = 0, j = s.length; i < j; i++) {\r\n\t\t\t\t\t\t\t\tif($.inArray(s[i], r) === -1) {\r\n\t\t\t\t\t\t\t\t\tm[s[i]].state.selected = true;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(rslt.add.length) {\r\n\t\t\t\t\t\tthis._data.core.selected = this._data.core.selected.concat(rslt.add);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tthis.trigger('model', { \"nodes\" : rslt.dpc, 'parent' : rslt.par });\r\n\r\n\t\t\t\t\tif(rslt.par !== $.jstree.root) {\r\n\t\t\t\t\t\tthis._node_changed(rslt.par);\r\n\t\t\t\t\t\tthis.redraw();\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\t// this.get_container_ul().children('.jstree-initial-node').remove();\r\n\t\t\t\t\t\tthis.redraw(true);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(rslt.add.length) {\r\n\t\t\t\t\t\tthis.trigger('changed', { 'action' : 'model', 'selected' : this._data.core.selected });\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcb.call(this, true);\r\n\t\t\t\t};\r\n\t\t\tif(this.settings.core.worker && window.Blob && window.URL && window.Worker) {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tif(this._wrk === null) {\r\n\t\t\t\t\t\tthis._wrk = window.URL.createObjectURL(\r\n\t\t\t\t\t\t\tnew window.Blob(\r\n\t\t\t\t\t\t\t\t['self.onmessage = ' + func.toString()],\r\n\t\t\t\t\t\t\t\t{type:\"text/javascript\"}\r\n\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(!this._data.core.working || force_processing) {\r\n\t\t\t\t\t\tthis._data.core.working = true;\r\n\t\t\t\t\t\tw = new window.Worker(this._wrk);\r\n\t\t\t\t\t\tw.onmessage = $.proxy(function (e) {\r\n\t\t\t\t\t\t\trslt.call(this, e.data, true);\r\n\t\t\t\t\t\t\ttry { w.terminate(); w = null; } catch(ignore) { }\r\n\t\t\t\t\t\t\tif(this._data.core.worker_queue.length) {\r\n\t\t\t\t\t\t\t\tthis._append_json_data.apply(this, this._data.core.worker_queue.shift());\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\tthis._data.core.working = false;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}, this);\r\n\t\t\t\t\t\tif(!args.par) {\r\n\t\t\t\t\t\t\tif(this._data.core.worker_queue.length) {\r\n\t\t\t\t\t\t\t\tthis._append_json_data.apply(this, this._data.core.worker_queue.shift());\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\tthis._data.core.working = false;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tw.postMessage(args);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tthis._data.core.worker_queue.push([dom, data, cb, true]);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tcatch(e) {\r\n\t\t\t\t\trslt.call(this, func(args), false);\r\n\t\t\t\t\tif(this._data.core.worker_queue.length) {\r\n\t\t\t\t\t\tthis._append_json_data.apply(this, this._data.core.worker_queue.shift());\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tthis._data.core.working = false;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\trslt.call(this, func(args), false);\r\n\t\t\t}\r\n\t\t},\r\n\t\t/**\r\n\t\t * parses a node from a jQuery object and appends them to the in memory tree model. Used internally.\r\n\t\t * @private\r\n\t\t * @name _parse_model_from_html(d [, p, ps])\r\n\t\t * @param  {jQuery} d the jQuery object to parse\r\n\t\t * @param  {String} p the parent ID\r\n\t\t * @param  {Array} ps list of all parents\r\n\t\t * @return {String} the ID of the object added to the model\r\n\t\t */\r\n\t\t_parse_model_from_html : function (d, p, ps) {\r\n\t\t\tif(!ps) { ps = []; }\r\n\t\t\telse { ps = [].concat(ps); }\r\n\t\t\tif(p) { ps.unshift(p); }\r\n\t\t\tvar c, e, m = this._model.data,\r\n\t\t\t\tdata = {\r\n\t\t\t\t\tid\t\t\t: false,\r\n\t\t\t\t\ttext\t\t: false,\r\n\t\t\t\t\ticon\t\t: true,\r\n\t\t\t\t\tparent\t\t: p,\r\n\t\t\t\t\tparents\t\t: ps,\r\n\t\t\t\t\tchildren\t: [],\r\n\t\t\t\t\tchildren_d\t: [],\r\n\t\t\t\t\tdata\t\t: null,\r\n\t\t\t\t\tstate\t\t: { },\r\n\t\t\t\t\tli_attr\t\t: { id : false },\r\n\t\t\t\t\ta_attr\t\t: { href : '#' },\r\n\t\t\t\t\toriginal\t: false\r\n\t\t\t\t}, i, tmp, tid;\r\n\t\t\tfor(i in this._model.default_state) {\r\n\t\t\t\tif(this._model.default_state.hasOwnProperty(i)) {\r\n\t\t\t\t\tdata.state[i] = this._model.default_state[i];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\ttmp = $.vakata.attributes(d, true);\r\n\t\t\t$.each(tmp, function (i, v) {\r\n\t\t\t\tv = $.trim(v);\r\n\t\t\t\tif(!v.length) { return true; }\r\n\t\t\t\tdata.li_attr[i] = v;\r\n\t\t\t\tif(i === 'id') {\r\n\t\t\t\t\tdata.id = v.toString();\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\ttmp = d.children('a').first();\r\n\t\t\tif(tmp.length) {\r\n\t\t\t\ttmp = $.vakata.attributes(tmp, true);\r\n\t\t\t\t$.each(tmp, function (i, v) {\r\n\t\t\t\t\tv = $.trim(v);\r\n\t\t\t\t\tif(v.length) {\r\n\t\t\t\t\t\tdata.a_attr[i] = v;\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\ttmp = d.children(\"a\").first().length ? d.children(\"a\").first().clone() : d.clone();\r\n\t\t\ttmp.children(\"ins, i, ul\").remove();\r\n\t\t\ttmp = tmp.html();\r\n\t\t\ttmp = $('<div />').html(tmp);\r\n\t\t\tdata.text = this.settings.core.force_text ? tmp.text() : tmp.html();\r\n\t\t\ttmp = d.data();\r\n\t\t\tdata.data = tmp ? $.extend(true, {}, tmp) : null;\r\n\t\t\tdata.state.opened = d.hasClass('jstree-open');\r\n\t\t\tdata.state.selected = d.children('a').hasClass('jstree-clicked');\r\n\t\t\tdata.state.disabled = d.children('a').hasClass('jstree-disabled');\r\n\t\t\tif(data.data && data.data.jstree) {\r\n\t\t\t\tfor(i in data.data.jstree) {\r\n\t\t\t\t\tif(data.data.jstree.hasOwnProperty(i)) {\r\n\t\t\t\t\t\tdata.state[i] = data.data.jstree[i];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\ttmp = d.children(\"a\").children(\".jstree-themeicon\");\r\n\t\t\tif(tmp.length) {\r\n\t\t\t\tdata.icon = tmp.hasClass('jstree-themeicon-hidden') ? false : tmp.attr('rel');\r\n\t\t\t}\r\n\t\t\tif(data.state.icon !== undefined) {\r\n\t\t\t\tdata.icon = data.state.icon;\r\n\t\t\t}\r\n\t\t\tif(data.icon === undefined || data.icon === null || data.icon === \"\") {\r\n\t\t\t\tdata.icon = true;\r\n\t\t\t}\r\n\t\t\ttmp = d.children(\"ul\").children(\"li\");\r\n\t\t\tdo {\r\n\t\t\t\ttid = 'j' + this._id + '_' + (++this._cnt);\r\n\t\t\t} while(m[tid]);\r\n\t\t\tdata.id = data.li_attr.id ? data.li_attr.id.toString() : tid;\r\n\t\t\tif(tmp.length) {\r\n\t\t\t\ttmp.each($.proxy(function (i, v) {\r\n\t\t\t\t\tc = this._parse_model_from_html($(v), data.id, ps);\r\n\t\t\t\t\te = this._model.data[c];\r\n\t\t\t\t\tdata.children.push(c);\r\n\t\t\t\t\tif(e.children_d.length) {\r\n\t\t\t\t\t\tdata.children_d = data.children_d.concat(e.children_d);\r\n\t\t\t\t\t}\r\n\t\t\t\t}, this));\r\n\t\t\t\tdata.children_d = data.children_d.concat(data.children);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif(d.hasClass('jstree-closed')) {\r\n\t\t\t\t\tdata.state.loaded = false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(data.li_attr['class']) {\r\n\t\t\t\tdata.li_attr['class'] = data.li_attr['class'].replace('jstree-closed','').replace('jstree-open','');\r\n\t\t\t}\r\n\t\t\tif(data.a_attr['class']) {\r\n\t\t\t\tdata.a_attr['class'] = data.a_attr['class'].replace('jstree-clicked','').replace('jstree-disabled','');\r\n\t\t\t}\r\n\t\t\tm[data.id] = data;\r\n\t\t\tif(data.state.selected) {\r\n\t\t\t\tthis._data.core.selected.push(data.id);\r\n\t\t\t}\r\n\t\t\treturn data.id;\r\n\t\t},\r\n\t\t/**\r\n\t\t * parses a node from a JSON object (used when dealing with flat data, which has no nesting of children, but has id and parent properties) and appends it to the in memory tree model. Used internally.\r\n\t\t * @private\r\n\t\t * @name _parse_model_from_flat_json(d [, p, ps])\r\n\t\t * @param  {Object} d the JSON object to parse\r\n\t\t * @param  {String} p the parent ID\r\n\t\t * @param  {Array} ps list of all parents\r\n\t\t * @return {String} the ID of the object added to the model\r\n\t\t */\r\n\t\t_parse_model_from_flat_json : function (d, p, ps) {\r\n\t\t\tif(!ps) { ps = []; }\r\n\t\t\telse { ps = ps.concat(); }\r\n\t\t\tif(p) { ps.unshift(p); }\r\n\t\t\tvar tid = d.id.toString(),\r\n\t\t\t\tm = this._model.data,\r\n\t\t\t\tdf = this._model.default_state,\r\n\t\t\t\ti, j, c, e,\r\n\t\t\t\ttmp = {\r\n\t\t\t\t\tid\t\t\t: tid,\r\n\t\t\t\t\ttext\t\t: d.text || '',\r\n\t\t\t\t\ticon\t\t: d.icon !== undefined ? d.icon : true,\r\n\t\t\t\t\tparent\t\t: p,\r\n\t\t\t\t\tparents\t\t: ps,\r\n\t\t\t\t\tchildren\t: d.children || [],\r\n\t\t\t\t\tchildren_d\t: d.children_d || [],\r\n\t\t\t\t\tdata\t\t: d.data,\r\n\t\t\t\t\tstate\t\t: { },\r\n\t\t\t\t\tli_attr\t\t: { id : false },\r\n\t\t\t\t\ta_attr\t\t: { href : '#' },\r\n\t\t\t\t\toriginal\t: false\r\n\t\t\t\t};\r\n\t\t\tfor(i in df) {\r\n\t\t\t\tif(df.hasOwnProperty(i)) {\r\n\t\t\t\t\ttmp.state[i] = df[i];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(d && d.data && d.data.jstree && d.data.jstree.icon) {\r\n\t\t\t\ttmp.icon = d.data.jstree.icon;\r\n\t\t\t}\r\n\t\t\tif(tmp.icon === undefined || tmp.icon === null || tmp.icon === \"\") {\r\n\t\t\t\ttmp.icon = true;\r\n\t\t\t}\r\n\t\t\tif(d && d.data) {\r\n\t\t\t\ttmp.data = d.data;\r\n\t\t\t\tif(d.data.jstree) {\r\n\t\t\t\t\tfor(i in d.data.jstree) {\r\n\t\t\t\t\t\tif(d.data.jstree.hasOwnProperty(i)) {\r\n\t\t\t\t\t\t\ttmp.state[i] = d.data.jstree[i];\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(d && typeof d.state === 'object') {\r\n\t\t\t\tfor (i in d.state) {\r\n\t\t\t\t\tif(d.state.hasOwnProperty(i)) {\r\n\t\t\t\t\t\ttmp.state[i] = d.state[i];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(d && typeof d.li_attr === 'object') {\r\n\t\t\t\tfor (i in d.li_attr) {\r\n\t\t\t\t\tif(d.li_attr.hasOwnProperty(i)) {\r\n\t\t\t\t\t\ttmp.li_attr[i] = d.li_attr[i];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(!tmp.li_attr.id) {\r\n\t\t\t\ttmp.li_attr.id = tid;\r\n\t\t\t}\r\n\t\t\tif(d && typeof d.a_attr === 'object') {\r\n\t\t\t\tfor (i in d.a_attr) {\r\n\t\t\t\t\tif(d.a_attr.hasOwnProperty(i)) {\r\n\t\t\t\t\t\ttmp.a_attr[i] = d.a_attr[i];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(d && d.children && d.children === true) {\r\n\t\t\t\ttmp.state.loaded = false;\r\n\t\t\t\ttmp.children = [];\r\n\t\t\t\ttmp.children_d = [];\r\n\t\t\t}\r\n\t\t\tm[tmp.id] = tmp;\r\n\t\t\tfor(i = 0, j = tmp.children.length; i < j; i++) {\r\n\t\t\t\tc = this._parse_model_from_flat_json(m[tmp.children[i]], tmp.id, ps);\r\n\t\t\t\te = m[c];\r\n\t\t\t\ttmp.children_d.push(c);\r\n\t\t\t\tif(e.children_d.length) {\r\n\t\t\t\t\ttmp.children_d = tmp.children_d.concat(e.children_d);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tdelete d.data;\r\n\t\t\tdelete d.children;\r\n\t\t\tm[tmp.id].original = d;\r\n\t\t\tif(tmp.state.selected) {\r\n\t\t\t\tthis._data.core.selected.push(tmp.id);\r\n\t\t\t}\r\n\t\t\treturn tmp.id;\r\n\t\t},\r\n\t\t/**\r\n\t\t * parses a node from a JSON object and appends it to the in memory tree model. Used internally.\r\n\t\t * @private\r\n\t\t * @name _parse_model_from_json(d [, p, ps])\r\n\t\t * @param  {Object} d the JSON object to parse\r\n\t\t * @param  {String} p the parent ID\r\n\t\t * @param  {Array} ps list of all parents\r\n\t\t * @return {String} the ID of the object added to the model\r\n\t\t */\r\n\t\t_parse_model_from_json : function (d, p, ps) {\r\n\t\t\tif(!ps) { ps = []; }\r\n\t\t\telse { ps = ps.concat(); }\r\n\t\t\tif(p) { ps.unshift(p); }\r\n\t\t\tvar tid = false, i, j, c, e, m = this._model.data, df = this._model.default_state, tmp;\r\n\t\t\tdo {\r\n\t\t\t\ttid = 'j' + this._id + '_' + (++this._cnt);\r\n\t\t\t} while(m[tid]);\r\n\r\n\t\t\ttmp = {\r\n\t\t\t\tid\t\t\t: false,\r\n\t\t\t\ttext\t\t: typeof d === 'string' ? d : '',\r\n\t\t\t\ticon\t\t: typeof d === 'object' && d.icon !== undefined ? d.icon : true,\r\n\t\t\t\tparent\t\t: p,\r\n\t\t\t\tparents\t\t: ps,\r\n\t\t\t\tchildren\t: [],\r\n\t\t\t\tchildren_d\t: [],\r\n\t\t\t\tdata\t\t: null,\r\n\t\t\t\tstate\t\t: { },\r\n\t\t\t\tli_attr\t\t: { id : false },\r\n\t\t\t\ta_attr\t\t: { href : '#' },\r\n\t\t\t\toriginal\t: false\r\n\t\t\t};\r\n\t\t\tfor(i in df) {\r\n\t\t\t\tif(df.hasOwnProperty(i)) {\r\n\t\t\t\t\ttmp.state[i] = df[i];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(d && d.id) { tmp.id = d.id.toString(); }\r\n\t\t\tif(d && d.text) { tmp.text = d.text; }\r\n\t\t\tif(d && d.data && d.data.jstree && d.data.jstree.icon) {\r\n\t\t\t\ttmp.icon = d.data.jstree.icon;\r\n\t\t\t}\r\n\t\t\tif(tmp.icon === undefined || tmp.icon === null || tmp.icon === \"\") {\r\n\t\t\t\ttmp.icon = true;\r\n\t\t\t}\r\n\t\t\tif(d && d.data) {\r\n\t\t\t\ttmp.data = d.data;\r\n\t\t\t\tif(d.data.jstree) {\r\n\t\t\t\t\tfor(i in d.data.jstree) {\r\n\t\t\t\t\t\tif(d.data.jstree.hasOwnProperty(i)) {\r\n\t\t\t\t\t\t\ttmp.state[i] = d.data.jstree[i];\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(d && typeof d.state === 'object') {\r\n\t\t\t\tfor (i in d.state) {\r\n\t\t\t\t\tif(d.state.hasOwnProperty(i)) {\r\n\t\t\t\t\t\ttmp.state[i] = d.state[i];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(d && typeof d.li_attr === 'object') {\r\n\t\t\t\tfor (i in d.li_attr) {\r\n\t\t\t\t\tif(d.li_attr.hasOwnProperty(i)) {\r\n\t\t\t\t\t\ttmp.li_attr[i] = d.li_attr[i];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(tmp.li_attr.id && !tmp.id) {\r\n\t\t\t\ttmp.id = tmp.li_attr.id.toString();\r\n\t\t\t}\r\n\t\t\tif(!tmp.id) {\r\n\t\t\t\ttmp.id = tid;\r\n\t\t\t}\r\n\t\t\tif(!tmp.li_attr.id) {\r\n\t\t\t\ttmp.li_attr.id = tmp.id;\r\n\t\t\t}\r\n\t\t\tif(d && typeof d.a_attr === 'object') {\r\n\t\t\t\tfor (i in d.a_attr) {\r\n\t\t\t\t\tif(d.a_attr.hasOwnProperty(i)) {\r\n\t\t\t\t\t\ttmp.a_attr[i] = d.a_attr[i];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(d && d.children && d.children.length) {\r\n\t\t\t\tfor(i = 0, j = d.children.length; i < j; i++) {\r\n\t\t\t\t\tc = this._parse_model_from_json(d.children[i], tmp.id, ps);\r\n\t\t\t\t\te = m[c];\r\n\t\t\t\t\ttmp.children.push(c);\r\n\t\t\t\t\tif(e.children_d.length) {\r\n\t\t\t\t\t\ttmp.children_d = tmp.children_d.concat(e.children_d);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\ttmp.children_d = tmp.children_d.concat(tmp.children);\r\n\t\t\t}\r\n\t\t\tif(d && d.children && d.children === true) {\r\n\t\t\t\ttmp.state.loaded = false;\r\n\t\t\t\ttmp.children = [];\r\n\t\t\t\ttmp.children_d = [];\r\n\t\t\t}\r\n\t\t\tdelete d.data;\r\n\t\t\tdelete d.children;\r\n\t\t\ttmp.original = d;\r\n\t\t\tm[tmp.id] = tmp;\r\n\t\t\tif(tmp.state.selected) {\r\n\t\t\t\tthis._data.core.selected.push(tmp.id);\r\n\t\t\t}\r\n\t\t\treturn tmp.id;\r\n\t\t},\r\n\t\t/**\r\n\t\t * redraws all nodes that need to be redrawn. Used internally.\r\n\t\t * @private\r\n\t\t * @name _redraw()\r\n\t\t * @trigger redraw.jstree\r\n\t\t */\r\n\t\t_redraw : function () {\r\n\t\t\tvar nodes = this._model.force_full_redraw ? this._model.data[$.jstree.root].children.concat([]) : this._model.changed.concat([]),\r\n\t\t\t\tf = document.createElement('UL'), tmp, i, j, fe = this._data.core.focused;\r\n\t\t\tfor(i = 0, j = nodes.length; i < j; i++) {\r\n\t\t\t\ttmp = this.redraw_node(nodes[i], true, this._model.force_full_redraw);\r\n\t\t\t\tif(tmp && this._model.force_full_redraw) {\r\n\t\t\t\t\tf.appendChild(tmp);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(this._model.force_full_redraw) {\r\n\t\t\t\tf.className = this.get_container_ul()[0].className;\r\n\t\t\t\tf.setAttribute('role','group');\r\n\t\t\t\tthis.element.empty().append(f);\r\n\t\t\t\t//this.get_container_ul()[0].appendChild(f);\r\n\t\t\t}\r\n\t\t\tif(fe !== null) {\r\n\t\t\t\ttmp = this.get_node(fe, true);\r\n\t\t\t\tif(tmp && tmp.length && tmp.children('.jstree-anchor')[0] !== document.activeElement) {\r\n\t\t\t\t\ttmp.children('.jstree-anchor').focus();\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis._data.core.focused = null;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthis._model.force_full_redraw = false;\r\n\t\t\tthis._model.changed = [];\r\n\t\t\t/**\r\n\t\t\t * triggered after nodes are redrawn\r\n\t\t\t * @event\r\n\t\t\t * @name redraw.jstree\r\n\t\t\t * @param {array} nodes the redrawn nodes\r\n\t\t\t */\r\n\t\t\tthis.trigger('redraw', { \"nodes\" : nodes });\r\n\t\t},\r\n\t\t/**\r\n\t\t * redraws all nodes that need to be redrawn or optionally - the whole tree\r\n\t\t * @name redraw([full])\r\n\t\t * @param {Boolean} full if set to `true` all nodes are redrawn.\r\n\t\t */\r\n\t\tredraw : function (full) {\r\n\t\t\tif(full) {\r\n\t\t\t\tthis._model.force_full_redraw = true;\r\n\t\t\t}\r\n\t\t\t//if(this._model.redraw_timeout) {\r\n\t\t\t//\tclearTimeout(this._model.redraw_timeout);\r\n\t\t\t//}\r\n\t\t\t//this._model.redraw_timeout = setTimeout($.proxy(this._redraw, this),0);\r\n\t\t\tthis._redraw();\r\n\t\t},\r\n\t\t/**\r\n\t\t * redraws a single node's children. Used internally.\r\n\t\t * @private\r\n\t\t * @name draw_children(node)\r\n\t\t * @param {mixed} node the node whose children will be redrawn\r\n\t\t */\r\n\t\tdraw_children : function (node) {\r\n\t\t\tvar obj = this.get_node(node),\r\n\t\t\t\ti = false,\r\n\t\t\t\tj = false,\r\n\t\t\t\tk = false,\r\n\t\t\t\td = document;\r\n\t\t\tif(!obj) { return false; }\r\n\t\t\tif(obj.id === $.jstree.root) { return this.redraw(true); }\r\n\t\t\tnode = this.get_node(node, true);\r\n\t\t\tif(!node || !node.length) { return false; } // TODO: quick toggle\r\n\r\n\t\t\tnode.children('.jstree-children').remove();\r\n\t\t\tnode = node[0];\r\n\t\t\tif(obj.children.length && obj.state.loaded) {\r\n\t\t\t\tk = d.createElement('UL');\r\n\t\t\t\tk.setAttribute('role', 'group');\r\n\t\t\t\tk.className = 'jstree-children';\r\n\t\t\t\tfor(i = 0, j = obj.children.length; i < j; i++) {\r\n\t\t\t\t\tk.appendChild(this.redraw_node(obj.children[i], true, true));\r\n\t\t\t\t}\r\n\t\t\t\tnode.appendChild(k);\r\n\t\t\t}\r\n\t\t},\r\n\t\t/**\r\n\t\t * redraws a single node. Used internally.\r\n\t\t * @private\r\n\t\t * @name redraw_node(node, deep, is_callback, force_render)\r\n\t\t * @param {mixed} node the node to redraw\r\n\t\t * @param {Boolean} deep should child nodes be redrawn too\r\n\t\t * @param {Boolean} is_callback is this a recursion call\r\n\t\t * @param {Boolean} force_render should children of closed parents be drawn anyway\r\n\t\t */\r\n\t\tredraw_node : function (node, deep, is_callback, force_render) {\r\n\t\t\tvar obj = this.get_node(node),\r\n\t\t\t\tpar = false,\r\n\t\t\t\tind = false,\r\n\t\t\t\told = false,\r\n\t\t\t\ti = false,\r\n\t\t\t\tj = false,\r\n\t\t\t\tk = false,\r\n\t\t\t\tc = '',\r\n\t\t\t\td = document,\r\n\t\t\t\tm = this._model.data,\r\n\t\t\t\tf = false,\r\n\t\t\t\ts = false,\r\n\t\t\t\ttmp = null,\r\n\t\t\t\tt = 0,\r\n\t\t\t\tl = 0,\r\n\t\t\t\thas_children = false,\r\n\t\t\t\tlast_sibling = false;\r\n\t\t\tif(!obj) { return false; }\r\n\t\t\tif(obj.id === $.jstree.root) {  return this.redraw(true); }\r\n\t\t\tdeep = deep || obj.children.length === 0;\r\n\t\t\tnode = !document.querySelector ? document.getElementById(obj.id) : this.element[0].querySelector('#' + (\"0123456789\".indexOf(obj.id[0]) !== -1 ? '\\\\3' + obj.id[0] + ' ' + obj.id.substr(1).replace($.jstree.idregex,'\\\\$&') : obj.id.replace($.jstree.idregex,'\\\\$&')) ); //, this.element);\r\n\t\t\tif(!node) {\r\n\t\t\t\tdeep = true;\r\n\t\t\t\t//node = d.createElement('LI');\r\n\t\t\t\tif(!is_callback) {\r\n\t\t\t\t\tpar = obj.parent !== $.jstree.root ? $('#' + obj.parent.replace($.jstree.idregex,'\\\\$&'), this.element)[0] : null;\r\n\t\t\t\t\tif(par !== null && (!par || !m[obj.parent].state.opened)) {\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tind = $.inArray(obj.id, par === null ? m[$.jstree.root].children : m[obj.parent].children);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tnode = $(node);\r\n\t\t\t\tif(!is_callback) {\r\n\t\t\t\t\tpar = node.parent().parent()[0];\r\n\t\t\t\t\tif(par === this.element[0]) {\r\n\t\t\t\t\t\tpar = null;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tind = node.index();\r\n\t\t\t\t}\r\n\t\t\t\t// m[obj.id].data = node.data(); // use only node's data, no need to touch jquery storage\r\n\t\t\t\tif(!deep && obj.children.length && !node.children('.jstree-children').length) {\r\n\t\t\t\t\tdeep = true;\r\n\t\t\t\t}\r\n\t\t\t\tif(!deep) {\r\n\t\t\t\t\told = node.children('.jstree-children')[0];\r\n\t\t\t\t}\r\n\t\t\t\tf = node.children('.jstree-anchor')[0] === document.activeElement;\r\n\t\t\t\tnode.remove();\r\n\t\t\t\t//node = d.createElement('LI');\r\n\t\t\t\t//node = node[0];\r\n\t\t\t}\r\n\t\t\tnode = this._data.core.node.cloneNode(true);\r\n\t\t\t// node is DOM, deep is boolean\r\n\r\n\t\t\tc = 'jstree-node ';\r\n\t\t\tfor(i in obj.li_attr) {\r\n\t\t\t\tif(obj.li_attr.hasOwnProperty(i)) {\r\n\t\t\t\t\tif(i === 'id') { continue; }\r\n\t\t\t\t\tif(i !== 'class') {\r\n\t\t\t\t\t\tnode.setAttribute(i, obj.li_attr[i]);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tc += obj.li_attr[i];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(!obj.a_attr.id) {\r\n\t\t\t\tobj.a_attr.id = obj.id + '_anchor';\r\n\t\t\t}\r\n\t\t\tnode.setAttribute('aria-selected', !!obj.state.selected);\r\n\t\t\tnode.setAttribute('aria-level', obj.parents.length);\r\n\t\t\tnode.setAttribute('aria-labelledby', obj.a_attr.id);\r\n\t\t\tif(obj.state.disabled) {\r\n\t\t\t\tnode.setAttribute('aria-disabled', true);\r\n\t\t\t}\r\n\r\n\t\t\tfor(i = 0, j = obj.children.length; i < j; i++) {\r\n\t\t\t\tif(!m[obj.children[i]].state.hidden) {\r\n\t\t\t\t\thas_children = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(obj.parent !== null && m[obj.parent] && !obj.state.hidden) {\r\n\t\t\t\ti = $.inArray(obj.id, m[obj.parent].children);\r\n\t\t\t\tlast_sibling = obj.id;\r\n\t\t\t\tif(i !== -1) {\r\n\t\t\t\t\ti++;\r\n\t\t\t\t\tfor(j = m[obj.parent].children.length; i < j; i++) {\r\n\t\t\t\t\t\tif(!m[m[obj.parent].children[i]].state.hidden) {\r\n\t\t\t\t\t\t\tlast_sibling = m[obj.parent].children[i];\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif(last_sibling !== obj.id) {\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif(obj.state.hidden) {\r\n\t\t\t\tc += ' jstree-hidden';\r\n\t\t\t}\r\n\t\t\tif (obj.state.loading) {\r\n\t\t\t\tc += ' jstree-loading';\r\n\t\t\t}\r\n\t\t\tif(obj.state.loaded && !has_children) {\r\n\t\t\t\tc += ' jstree-leaf';\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tc += obj.state.opened && obj.state.loaded ? ' jstree-open' : ' jstree-closed';\r\n\t\t\t\tnode.setAttribute('aria-expanded', (obj.state.opened && obj.state.loaded) );\r\n\t\t\t}\r\n\t\t\tif(last_sibling === obj.id) {\r\n\t\t\t\tc += ' jstree-last';\r\n\t\t\t}\r\n\t\t\tnode.id = obj.id;\r\n\t\t\tnode.className = c;\r\n\t\t\tc = ( obj.state.selected ? ' jstree-clicked' : '') + ( obj.state.disabled ? ' jstree-disabled' : '');\r\n\t\t\tfor(j in obj.a_attr) {\r\n\t\t\t\tif(obj.a_attr.hasOwnProperty(j)) {\r\n\t\t\t\t\tif(j === 'href' && obj.a_attr[j] === '#') { continue; }\r\n\t\t\t\t\tif(j !== 'class') {\r\n\t\t\t\t\t\tnode.childNodes[1].setAttribute(j, obj.a_attr[j]);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tc += ' ' + obj.a_attr[j];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(c.length) {\r\n\t\t\t\tnode.childNodes[1].className = 'jstree-anchor ' + c;\r\n\t\t\t}\r\n\t\t\tif((obj.icon && obj.icon !== true) || obj.icon === false) {\r\n\t\t\t\tif(obj.icon === false) {\r\n\t\t\t\t\tnode.childNodes[1].childNodes[0].className += ' jstree-themeicon-hidden';\r\n\t\t\t\t}\r\n\t\t\t\telse if(obj.icon.indexOf('/') === -1 && obj.icon.indexOf('.') === -1) {\r\n\t\t\t\t\tnode.childNodes[1].childNodes[0].className += ' ' + obj.icon + ' jstree-themeicon-custom';\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tnode.childNodes[1].childNodes[0].style.backgroundImage = 'url(\"'+obj.icon+'\")';\r\n\t\t\t\t\tnode.childNodes[1].childNodes[0].style.backgroundPosition = 'center center';\r\n\t\t\t\t\tnode.childNodes[1].childNodes[0].style.backgroundSize = 'auto';\r\n\t\t\t\t\tnode.childNodes[1].childNodes[0].className += ' jstree-themeicon-custom';\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif(this.settings.core.force_text) {\r\n\t\t\t\tnode.childNodes[1].appendChild(d.createTextNode(obj.text));\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tnode.childNodes[1].innerHTML += obj.text;\r\n\t\t\t}\r\n\r\n\r\n\t\t\tif(deep && obj.children.length && (obj.state.opened || force_render) && obj.state.loaded) {\r\n\t\t\t\tk = d.createElement('UL');\r\n\t\t\t\tk.setAttribute('role', 'group');\r\n\t\t\t\tk.className = 'jstree-children';\r\n\t\t\t\tfor(i = 0, j = obj.children.length; i < j; i++) {\r\n\t\t\t\t\tk.appendChild(this.redraw_node(obj.children[i], deep, true));\r\n\t\t\t\t}\r\n\t\t\t\tnode.appendChild(k);\r\n\t\t\t}\r\n\t\t\tif(old) {\r\n\t\t\t\tnode.appendChild(old);\r\n\t\t\t}\r\n\t\t\tif(!is_callback) {\r\n\t\t\t\t// append back using par / ind\r\n\t\t\t\tif(!par) {\r\n\t\t\t\t\tpar = this.element[0];\r\n\t\t\t\t}\r\n\t\t\t\tfor(i = 0, j = par.childNodes.length; i < j; i++) {\r\n\t\t\t\t\tif(par.childNodes[i] && par.childNodes[i].className && par.childNodes[i].className.indexOf('jstree-children') !== -1) {\r\n\t\t\t\t\t\ttmp = par.childNodes[i];\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif(!tmp) {\r\n\t\t\t\t\ttmp = d.createElement('UL');\r\n\t\t\t\t\ttmp.setAttribute('role', 'group');\r\n\t\t\t\t\ttmp.className = 'jstree-children';\r\n\t\t\t\t\tpar.appendChild(tmp);\r\n\t\t\t\t}\r\n\t\t\t\tpar = tmp;\r\n\r\n\t\t\t\tif(ind < par.childNodes.length) {\r\n\t\t\t\t\tpar.insertBefore(node, par.childNodes[ind]);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tpar.appendChild(node);\r\n\t\t\t\t}\r\n\t\t\t\tif(f) {\r\n\t\t\t\t\tt = this.element[0].scrollTop;\r\n\t\t\t\t\tl = this.element[0].scrollLeft;\r\n\t\t\t\t\tnode.childNodes[1].focus();\r\n\t\t\t\t\tthis.element[0].scrollTop = t;\r\n\t\t\t\t\tthis.element[0].scrollLeft = l;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(obj.state.opened && !obj.state.loaded) {\r\n\t\t\t\tobj.state.opened = false;\r\n\t\t\t\tsetTimeout($.proxy(function () {\r\n\t\t\t\t\tthis.open_node(obj.id, false, 0);\r\n\t\t\t\t}, this), 0);\r\n\t\t\t}\r\n\t\t\treturn node;\r\n\t\t},\r\n\t\t/**\r\n\t\t * opens a node, revaling its children. If the node is not loaded it will be loaded and opened once ready.\r\n\t\t * @name open_node(obj [, callback, animation])\r\n\t\t * @param {mixed} obj the node to open\r\n\t\t * @param {Function} callback a function to execute once the node is opened\r\n\t\t * @param {Number} animation the animation duration in milliseconds when opening the node (overrides the `core.animation` setting). Use `false` for no animation.\r\n\t\t * @trigger open_node.jstree, after_open.jstree, before_open.jstree\r\n\t\t */\r\n\t\topen_node : function (obj, callback, animation) {\r\n\t\t\tvar t1, t2, d, t;\r\n\t\t\tif($.isArray(obj)) {\r\n\t\t\t\tobj = obj.slice();\r\n\t\t\t\tfor(t1 = 0, t2 = obj.length; t1 < t2; t1++) {\r\n\t\t\t\t\tthis.open_node(obj[t1], callback, animation);\r\n\t\t\t\t}\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\tobj = this.get_node(obj);\r\n\t\t\tif(!obj || obj.id === $.jstree.root) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tanimation = animation === undefined ? this.settings.core.animation : animation;\r\n\t\t\tif(!this.is_closed(obj)) {\r\n\t\t\t\tif(callback) {\r\n\t\t\t\t\tcallback.call(this, obj, false);\r\n\t\t\t\t}\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tif(!this.is_loaded(obj)) {\r\n\t\t\t\tif(this.is_loading(obj)) {\r\n\t\t\t\t\treturn setTimeout($.proxy(function () {\r\n\t\t\t\t\t\tthis.open_node(obj, callback, animation);\r\n\t\t\t\t\t}, this), 500);\r\n\t\t\t\t}\r\n\t\t\t\tthis.load_node(obj, function (o, ok) {\r\n\t\t\t\t\treturn ok ? this.open_node(o, callback, animation) : (callback ? callback.call(this, o, false) : false);\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\td = this.get_node(obj, true);\r\n\t\t\t\tt = this;\r\n\t\t\t\tif(d.length) {\r\n\t\t\t\t\tif(animation && d.children(\".jstree-children\").length) {\r\n\t\t\t\t\t\td.children(\".jstree-children\").stop(true, true);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(obj.children.length && !this._firstChild(d.children('.jstree-children')[0])) {\r\n\t\t\t\t\t\tthis.draw_children(obj);\r\n\t\t\t\t\t\t//d = this.get_node(obj, true);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(!animation) {\r\n\t\t\t\t\t\tthis.trigger('before_open', { \"node\" : obj });\r\n\t\t\t\t\t\td[0].className = d[0].className.replace('jstree-closed', 'jstree-open');\r\n\t\t\t\t\t\td[0].setAttribute(\"aria-expanded\", true);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tthis.trigger('before_open', { \"node\" : obj });\r\n\t\t\t\t\t\td\r\n\t\t\t\t\t\t\t.children(\".jstree-children\").css(\"display\",\"none\").end()\r\n\t\t\t\t\t\t\t.removeClass(\"jstree-closed\").addClass(\"jstree-open\").attr(\"aria-expanded\", true)\r\n\t\t\t\t\t\t\t.children(\".jstree-children\").stop(true, true)\r\n\t\t\t\t\t\t\t\t.slideDown(animation, function () {\r\n\t\t\t\t\t\t\t\t\tthis.style.display = \"\";\r\n\t\t\t\t\t\t\t\t\tif (t.element) {\r\n\t\t\t\t\t\t\t\t\t\tt.trigger(\"after_open\", { \"node\" : obj });\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tobj.state.opened = true;\r\n\t\t\t\tif(callback) {\r\n\t\t\t\t\tcallback.call(this, obj, true);\r\n\t\t\t\t}\r\n\t\t\t\tif(!d.length) {\r\n\t\t\t\t\t/**\r\n\t\t\t\t\t * triggered when a node is about to be opened (if the node is supposed to be in the DOM, it will be, but it won't be visible yet)\r\n\t\t\t\t\t * @event\r\n\t\t\t\t\t * @name before_open.jstree\r\n\t\t\t\t\t * @param {Object} node the opened node\r\n\t\t\t\t\t */\r\n\t\t\t\t\tthis.trigger('before_open', { \"node\" : obj });\r\n\t\t\t\t}\r\n\t\t\t\t/**\r\n\t\t\t\t * triggered when a node is opened (if there is an animation it will not be completed yet)\r\n\t\t\t\t * @event\r\n\t\t\t\t * @name open_node.jstree\r\n\t\t\t\t * @param {Object} node the opened node\r\n\t\t\t\t */\r\n\t\t\t\tthis.trigger('open_node', { \"node\" : obj });\r\n\t\t\t\tif(!animation || !d.length) {\r\n\t\t\t\t\t/**\r\n\t\t\t\t\t * triggered when a node is opened and the animation is complete\r\n\t\t\t\t\t * @event\r\n\t\t\t\t\t * @name after_open.jstree\r\n\t\t\t\t\t * @param {Object} node the opened node\r\n\t\t\t\t\t */\r\n\t\t\t\t\tthis.trigger(\"after_open\", { \"node\" : obj });\r\n\t\t\t\t}\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t},\r\n\t\t/**\r\n\t\t * opens every parent of a node (node should be loaded)\r\n\t\t * @name _open_to(obj)\r\n\t\t * @param {mixed} obj the node to reveal\r\n\t\t * @private\r\n\t\t */\r\n\t\t_open_to : function (obj) {\r\n\t\t\tobj = this.get_node(obj);\r\n\t\t\tif(!obj || obj.id === $.jstree.root) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tvar i, j, p = obj.parents;\r\n\t\t\tfor(i = 0, j = p.length; i < j; i+=1) {\r\n\t\t\t\tif(i !== $.jstree.root) {\r\n\t\t\t\t\tthis.open_node(p[i], false, 0);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn $('#' + obj.id.replace($.jstree.idregex,'\\\\$&'), this.element);\r\n\t\t},\r\n\t\t/**\r\n\t\t * closes a node, hiding its children\r\n\t\t * @name close_node(obj [, animation])\r\n\t\t * @param {mixed} obj the node to close\r\n\t\t * @param {Number} animation the animation duration in milliseconds when closing the node (overrides the `core.animation` setting). Use `false` for no animation.\r\n\t\t * @trigger close_node.jstree, after_close.jstree\r\n\t\t */\r\n\t\tclose_node : function (obj, animation) {\r\n\t\t\tvar t1, t2, t, d;\r\n\t\t\tif($.isArray(obj)) {\r\n\t\t\t\tobj = obj.slice();\r\n\t\t\t\tfor(t1 = 0, t2 = obj.length; t1 < t2; t1++) {\r\n\t\t\t\t\tthis.close_node(obj[t1], animation);\r\n\t\t\t\t}\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\tobj = this.get_node(obj);\r\n\t\t\tif(!obj || obj.id === $.jstree.root) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tif(this.is_closed(obj)) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tanimation = animation === undefined ? this.settings.core.animation : animation;\r\n\t\t\tt = this;\r\n\t\t\td = this.get_node(obj, true);\r\n\r\n\t\t\tobj.state.opened = false;\r\n\t\t\t/**\r\n\t\t\t * triggered when a node is closed (if there is an animation it will not be complete yet)\r\n\t\t\t * @event\r\n\t\t\t * @name close_node.jstree\r\n\t\t\t * @param {Object} node the closed node\r\n\t\t\t */\r\n\t\t\tthis.trigger('close_node',{ \"node\" : obj });\r\n\t\t\tif(!d.length) {\r\n\t\t\t\t/**\r\n\t\t\t\t * triggered when a node is closed and the animation is complete\r\n\t\t\t\t * @event\r\n\t\t\t\t * @name after_close.jstree\r\n\t\t\t\t * @param {Object} node the closed node\r\n\t\t\t\t */\r\n\t\t\t\tthis.trigger(\"after_close\", { \"node\" : obj });\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif(!animation) {\r\n\t\t\t\t\td[0].className = d[0].className.replace('jstree-open', 'jstree-closed');\r\n\t\t\t\t\td.attr(\"aria-expanded\", false).children('.jstree-children').remove();\r\n\t\t\t\t\tthis.trigger(\"after_close\", { \"node\" : obj });\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\td\r\n\t\t\t\t\t\t.children(\".jstree-children\").attr(\"style\",\"display:block !important\").end()\r\n\t\t\t\t\t\t.removeClass(\"jstree-open\").addClass(\"jstree-closed\").attr(\"aria-expanded\", false)\r\n\t\t\t\t\t\t.children(\".jstree-children\").stop(true, true).slideUp(animation, function () {\r\n\t\t\t\t\t\t\tthis.style.display = \"\";\r\n\t\t\t\t\t\t\td.children('.jstree-children').remove();\r\n\t\t\t\t\t\t\tif (t.element) {\r\n\t\t\t\t\t\t\t\tt.trigger(\"after_close\", { \"node\" : obj });\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\t\t/**\r\n\t\t * toggles a node - closing it if it is open, opening it if it is closed\r\n\t\t * @name toggle_node(obj)\r\n\t\t * @param {mixed} obj the node to toggle\r\n\t\t */\r\n\t\ttoggle_node : function (obj) {\r\n\t\t\tvar t1, t2;\r\n\t\t\tif($.isArray(obj)) {\r\n\t\t\t\tobj = obj.slice();\r\n\t\t\t\tfor(t1 = 0, t2 = obj.length; t1 < t2; t1++) {\r\n\t\t\t\t\tthis.toggle_node(obj[t1]);\r\n\t\t\t\t}\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\tif(this.is_closed(obj)) {\r\n\t\t\t\treturn this.open_node(obj);\r\n\t\t\t}\r\n\t\t\tif(this.is_open(obj)) {\r\n\t\t\t\treturn this.close_node(obj);\r\n\t\t\t}\r\n\t\t},\r\n\t\t/**\r\n\t\t * opens all nodes within a node (or the tree), revaling their children. If the node is not loaded it will be loaded and opened once ready.\r\n\t\t * @name open_all([obj, animation, original_obj])\r\n\t\t * @param {mixed} obj the node to open recursively, omit to open all nodes in the tree\r\n\t\t * @param {Number} animation the animation duration in milliseconds when opening the nodes, the default is no animation\r\n\t\t * @param {jQuery} reference to the node that started the process (internal use)\r\n\t\t * @trigger open_all.jstree\r\n\t\t */\r\n\t\topen_all : function (obj, animation, original_obj) {\r\n\t\t\tif(!obj) { obj = $.jstree.root; }\r\n\t\t\tobj = this.get_node(obj);\r\n\t\t\tif(!obj) { return false; }\r\n\t\t\tvar dom = obj.id === $.jstree.root ? this.get_container_ul() : this.get_node(obj, true), i, j, _this;\r\n\t\t\tif(!dom.length) {\r\n\t\t\t\tfor(i = 0, j = obj.children_d.length; i < j; i++) {\r\n\t\t\t\t\tif(this.is_closed(this._model.data[obj.children_d[i]])) {\r\n\t\t\t\t\t\tthis._model.data[obj.children_d[i]].state.opened = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\treturn this.trigger('open_all', { \"node\" : obj });\r\n\t\t\t}\r\n\t\t\toriginal_obj = original_obj || dom;\r\n\t\t\t_this = this;\r\n\t\t\tdom = this.is_closed(obj) ? dom.find('.jstree-closed').addBack() : dom.find('.jstree-closed');\r\n\t\t\tdom.each(function () {\r\n\t\t\t\t_this.open_node(\r\n\t\t\t\t\tthis,\r\n\t\t\t\t\tfunction(node, status) { if(status && this.is_parent(node)) { this.open_all(node, animation, original_obj); } },\r\n\t\t\t\t\tanimation || 0\r\n\t\t\t\t);\r\n\t\t\t});\r\n\t\t\tif(original_obj.find('.jstree-closed').length === 0) {\r\n\t\t\t\t/**\r\n\t\t\t\t * triggered when an `open_all` call completes\r\n\t\t\t\t * @event\r\n\t\t\t\t * @name open_all.jstree\r\n\t\t\t\t * @param {Object} node the opened node\r\n\t\t\t\t */\r\n\t\t\t\tthis.trigger('open_all', { \"node\" : this.get_node(original_obj) });\r\n\t\t\t}\r\n\t\t},\r\n\t\t/**\r\n\t\t * closes all nodes within a node (or the tree), revaling their children\r\n\t\t * @name close_all([obj, animation])\r\n\t\t * @param {mixed} obj the node to close recursively, omit to close all nodes in the tree\r\n\t\t * @param {Number} animation the animation duration in milliseconds when closing the nodes, the default is no animation\r\n\t\t * @trigger close_all.jstree\r\n\t\t */\r\n\t\tclose_all : function (obj, animation) {\r\n\t\t\tif(!obj) { obj = $.jstree.root; }\r\n\t\t\tobj = this.get_node(obj);\r\n\t\t\tif(!obj) { return false; }\r\n\t\t\tvar dom = obj.id === $.jstree.root ? this.get_container_ul() : this.get_node(obj, true),\r\n\t\t\t\t_this = this, i, j;\r\n\t\t\tif(dom.length) {\r\n\t\t\t\tdom = this.is_open(obj) ? dom.find('.jstree-open').addBack() : dom.find('.jstree-open');\r\n\t\t\t\t$(dom.get().reverse()).each(function () { _this.close_node(this, animation || 0); });\r\n\t\t\t}\r\n\t\t\tfor(i = 0, j = obj.children_d.length; i < j; i++) {\r\n\t\t\t\tthis._model.data[obj.children_d[i]].state.opened = false;\r\n\t\t\t}\r\n\t\t\t/**\r\n\t\t\t * triggered when an `close_all` call completes\r\n\t\t\t * @event\r\n\t\t\t * @name close_all.jstree\r\n\t\t\t * @param {Object} node the closed node\r\n\t\t\t */\r\n\t\t\tthis.trigger('close_all', { \"node\" : obj });\r\n\t\t},\r\n\t\t/**\r\n\t\t * checks if a node is disabled (not selectable)\r\n\t\t * @name is_disabled(obj)\r\n\t\t * @param  {mixed} obj\r\n\t\t * @return {Boolean}\r\n\t\t */\r\n\t\tis_disabled : function (obj) {\r\n\t\t\tobj = this.get_node(obj);\r\n\t\t\treturn obj && obj.state && obj.state.disabled;\r\n\t\t},\r\n\t\t/**\r\n\t\t * enables a node - so that it can be selected\r\n\t\t * @name enable_node(obj)\r\n\t\t * @param {mixed} obj the node to enable\r\n\t\t * @trigger enable_node.jstree\r\n\t\t */\r\n\t\tenable_node : function (obj) {\r\n\t\t\tvar t1, t2;\r\n\t\t\tif($.isArray(obj)) {\r\n\t\t\t\tobj = obj.slice();\r\n\t\t\t\tfor(t1 = 0, t2 = obj.length; t1 < t2; t1++) {\r\n\t\t\t\t\tthis.enable_node(obj[t1]);\r\n\t\t\t\t}\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\tobj = this.get_node(obj);\r\n\t\t\tif(!obj || obj.id === $.jstree.root) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tobj.state.disabled = false;\r\n\t\t\tthis.get_node(obj,true).children('.jstree-anchor').removeClass('jstree-disabled').attr('aria-disabled', false);\r\n\t\t\t/**\r\n\t\t\t * triggered when an node is enabled\r\n\t\t\t * @event\r\n\t\t\t * @name enable_node.jstree\r\n\t\t\t * @param {Object} node the enabled node\r\n\t\t\t */\r\n\t\t\tthis.trigger('enable_node', { 'node' : obj });\r\n\t\t},\r\n\t\t/**\r\n\t\t * disables a node - so that it can not be selected\r\n\t\t * @name disable_node(obj)\r\n\t\t * @param {mixed} obj the node to disable\r\n\t\t * @trigger disable_node.jstree\r\n\t\t */\r\n\t\tdisable_node : function (obj) {\r\n\t\t\tvar t1, t2;\r\n\t\t\tif($.isArray(obj)) {\r\n\t\t\t\tobj = obj.slice();\r\n\t\t\t\tfor(t1 = 0, t2 = obj.length; t1 < t2; t1++) {\r\n\t\t\t\t\tthis.disable_node(obj[t1]);\r\n\t\t\t\t}\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\tobj = this.get_node(obj);\r\n\t\t\tif(!obj || obj.id === $.jstree.root) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tobj.state.disabled = true;\r\n\t\t\tthis.get_node(obj,true).children('.jstree-anchor').addClass('jstree-disabled').attr('aria-disabled', true);\r\n\t\t\t/**\r\n\t\t\t * triggered when an node is disabled\r\n\t\t\t * @event\r\n\t\t\t * @name disable_node.jstree\r\n\t\t\t * @param {Object} node the disabled node\r\n\t\t\t */\r\n\t\t\tthis.trigger('disable_node', { 'node' : obj });\r\n\t\t},\r\n\t\t/**\r\n\t\t * determines if a node is hidden\r\n\t\t * @name is_hidden(obj)\r\n\t\t * @param {mixed} obj the node\r\n\t\t */\r\n\t\tis_hidden : function (obj) {\r\n\t\t\tobj = this.get_node(obj);\r\n\t\t\treturn obj.state.hidden === true;\r\n\t\t},\r\n\t\t/**\r\n\t\t * hides a node - it is still in the structure but will not be visible\r\n\t\t * @name hide_node(obj)\r\n\t\t * @param {mixed} obj the node to hide\r\n\t\t * @param {Boolean} skip_redraw internal parameter controlling if redraw is called\r\n\t\t * @trigger hide_node.jstree\r\n\t\t */\r\n\t\thide_node : function (obj, skip_redraw) {\r\n\t\t\tvar t1, t2;\r\n\t\t\tif($.isArray(obj)) {\r\n\t\t\t\tobj = obj.slice();\r\n\t\t\t\tfor(t1 = 0, t2 = obj.length; t1 < t2; t1++) {\r\n\t\t\t\t\tthis.hide_node(obj[t1], true);\r\n\t\t\t\t}\r\n\t\t\t\tif (!skip_redraw) {\r\n\t\t\t\t\tthis.redraw();\r\n\t\t\t\t}\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\tobj = this.get_node(obj);\r\n\t\t\tif(!obj || obj.id === $.jstree.root) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tif(!obj.state.hidden) {\r\n\t\t\t\tobj.state.hidden = true;\r\n\t\t\t\tthis._node_changed(obj.parent);\r\n\t\t\t\tif(!skip_redraw) {\r\n\t\t\t\t\tthis.redraw();\r\n\t\t\t\t}\r\n\t\t\t\t/**\r\n\t\t\t\t * triggered when an node is hidden\r\n\t\t\t\t * @event\r\n\t\t\t\t * @name hide_node.jstree\r\n\t\t\t\t * @param {Object} node the hidden node\r\n\t\t\t\t */\r\n\t\t\t\tthis.trigger('hide_node', { 'node' : obj });\r\n\t\t\t}\r\n\t\t},\r\n\t\t/**\r\n\t\t * shows a node\r\n\t\t * @name show_node(obj)\r\n\t\t * @param {mixed} obj the node to show\r\n\t\t * @param {Boolean} skip_redraw internal parameter controlling if redraw is called\r\n\t\t * @trigger show_node.jstree\r\n\t\t */\r\n\t\tshow_node : function (obj, skip_redraw) {\r\n\t\t\tvar t1, t2;\r\n\t\t\tif($.isArray(obj)) {\r\n\t\t\t\tobj = obj.slice();\r\n\t\t\t\tfor(t1 = 0, t2 = obj.length; t1 < t2; t1++) {\r\n\t\t\t\t\tthis.show_node(obj[t1], true);\r\n\t\t\t\t}\r\n\t\t\t\tif (!skip_redraw) {\r\n\t\t\t\t\tthis.redraw();\r\n\t\t\t\t}\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\tobj = this.get_node(obj);\r\n\t\t\tif(!obj || obj.id === $.jstree.root) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tif(obj.state.hidden) {\r\n\t\t\t\tobj.state.hidden = false;\r\n\t\t\t\tthis._node_changed(obj.parent);\r\n\t\t\t\tif(!skip_redraw) {\r\n\t\t\t\t\tthis.redraw();\r\n\t\t\t\t}\r\n\t\t\t\t/**\r\n\t\t\t\t * triggered when an node is shown\r\n\t\t\t\t * @event\r\n\t\t\t\t * @name show_node.jstree\r\n\t\t\t\t * @param {Object} node the shown node\r\n\t\t\t\t */\r\n\t\t\t\tthis.trigger('show_node', { 'node' : obj });\r\n\t\t\t}\r\n\t\t},\r\n\t\t/**\r\n\t\t * hides all nodes\r\n\t\t * @name hide_all()\r\n\t\t * @trigger hide_all.jstree\r\n\t\t */\r\n\t\thide_all : function (skip_redraw) {\r\n\t\t\tvar i, m = this._model.data, ids = [];\r\n\t\t\tfor(i in m) {\r\n\t\t\t\tif(m.hasOwnProperty(i) && i !== $.jstree.root && !m[i].state.hidden) {\r\n\t\t\t\t\tm[i].state.hidden = true;\r\n\t\t\t\t\tids.push(i);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthis._model.force_full_redraw = true;\r\n\t\t\tif(!skip_redraw) {\r\n\t\t\t\tthis.redraw();\r\n\t\t\t}\r\n\t\t\t/**\r\n\t\t\t * triggered when all nodes are hidden\r\n\t\t\t * @event\r\n\t\t\t * @name hide_all.jstree\r\n\t\t\t * @param {Array} nodes the IDs of all hidden nodes\r\n\t\t\t */\r\n\t\t\tthis.trigger('hide_all', { 'nodes' : ids });\r\n\t\t\treturn ids;\r\n\t\t},\r\n\t\t/**\r\n\t\t * shows all nodes\r\n\t\t * @name show_all()\r\n\t\t * @trigger show_all.jstree\r\n\t\t */\r\n\t\tshow_all : function (skip_redraw) {\r\n\t\t\tvar i, m = this._model.data, ids = [];\r\n\t\t\tfor(i in m) {\r\n\t\t\t\tif(m.hasOwnProperty(i) && i !== $.jstree.root && m[i].state.hidden) {\r\n\t\t\t\t\tm[i].state.hidden = false;\r\n\t\t\t\t\tids.push(i);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthis._model.force_full_redraw = true;\r\n\t\t\tif(!skip_redraw) {\r\n\t\t\t\tthis.redraw();\r\n\t\t\t}\r\n\t\t\t/**\r\n\t\t\t * triggered when all nodes are shown\r\n\t\t\t * @event\r\n\t\t\t * @name show_all.jstree\r\n\t\t\t * @param {Array} nodes the IDs of all shown nodes\r\n\t\t\t */\r\n\t\t\tthis.trigger('show_all', { 'nodes' : ids });\r\n\t\t\treturn ids;\r\n\t\t},\r\n\t\t/**\r\n\t\t * called when a node is selected by the user. Used internally.\r\n\t\t * @private\r\n\t\t * @name activate_node(obj, e)\r\n\t\t * @param {mixed} obj the node\r\n\t\t * @param {Object} e the related event\r\n\t\t * @trigger activate_node.jstree, changed.jstree\r\n\t\t */\r\n\t\tactivate_node : function (obj, e) {\r\n\t\t\tif(this.is_disabled(obj)) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tif(!e || typeof e !== 'object') {\r\n\t\t\t\te = {};\r\n\t\t\t}\r\n\r\n\t\t\t// ensure last_clicked is still in the DOM, make it fresh (maybe it was moved?) and make sure it is still selected, if not - make last_clicked the last selected node\r\n\t\t\tthis._data.core.last_clicked = this._data.core.last_clicked && this._data.core.last_clicked.id !== undefined ? this.get_node(this._data.core.last_clicked.id) : null;\r\n\t\t\tif(this._data.core.last_clicked && !this._data.core.last_clicked.state.selected) { this._data.core.last_clicked = null; }\r\n\t\t\tif(!this._data.core.last_clicked && this._data.core.selected.length) { this._data.core.last_clicked = this.get_node(this._data.core.selected[this._data.core.selected.length - 1]); }\r\n\r\n\t\t\tif(!this.settings.core.multiple || (!e.metaKey && !e.ctrlKey && !e.shiftKey) || (e.shiftKey && (!this._data.core.last_clicked || !this.get_parent(obj) || this.get_parent(obj) !== this._data.core.last_clicked.parent ) )) {\r\n\t\t\t\tif(!this.settings.core.multiple && (e.metaKey || e.ctrlKey || e.shiftKey) && this.is_selected(obj)) {\r\n\t\t\t\t\tthis.deselect_node(obj, false, e);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.deselect_all(true);\r\n\t\t\t\t\tthis.select_node(obj, false, false, e);\r\n\t\t\t\t\tthis._data.core.last_clicked = this.get_node(obj);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif(e.shiftKey) {\r\n\t\t\t\t\tvar o = this.get_node(obj).id,\r\n\t\t\t\t\t\tl = this._data.core.last_clicked.id,\r\n\t\t\t\t\t\tp = this.get_node(this._data.core.last_clicked.parent).children,\r\n\t\t\t\t\t\tc = false,\r\n\t\t\t\t\t\ti, j;\r\n\t\t\t\t\tfor(i = 0, j = p.length; i < j; i += 1) {\r\n\t\t\t\t\t\t// separate IFs work whem o and l are the same\r\n\t\t\t\t\t\tif(p[i] === o) {\r\n\t\t\t\t\t\t\tc = !c;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif(p[i] === l) {\r\n\t\t\t\t\t\t\tc = !c;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif(!this.is_disabled(p[i]) && (c || p[i] === o || p[i] === l)) {\r\n\t\t\t\t\t\t\tif (!this.is_hidden(p[i])) {\r\n\t\t\t\t\t\t\t\tthis.select_node(p[i], true, false, e);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tthis.deselect_node(p[i], true, e);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis.trigger('changed', { 'action' : 'select_node', 'node' : this.get_node(obj), 'selected' : this._data.core.selected, 'event' : e });\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tif(!this.is_selected(obj)) {\r\n\t\t\t\t\t\tthis.select_node(obj, false, false, e);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tthis.deselect_node(obj, false, e);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t/**\r\n\t\t\t * triggered when an node is clicked or intercated with by the user\r\n\t\t\t * @event\r\n\t\t\t * @name activate_node.jstree\r\n\t\t\t * @param {Object} node\r\n\t\t\t * @param {Object} event the ooriginal event (if any) which triggered the call (may be an empty object)\r\n\t\t\t */\r\n\t\t\tthis.trigger('activate_node', { 'node' : this.get_node(obj), 'event' : e });\r\n\t\t},\r\n\t\t/**\r\n\t\t * applies the hover state on a node, called when a node is hovered by the user. Used internally.\r\n\t\t * @private\r\n\t\t * @name hover_node(obj)\r\n\t\t * @param {mixed} obj\r\n\t\t * @trigger hover_node.jstree\r\n\t\t */\r\n\t\thover_node : function (obj) {\r\n\t\t\tobj = this.get_node(obj, true);\r\n\t\t\tif(!obj || !obj.length || obj.children('.jstree-hovered').length) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tvar o = this.element.find('.jstree-hovered'), t = this.element;\r\n\t\t\tif(o && o.length) { this.dehover_node(o); }\r\n\r\n\t\t\tobj.children('.jstree-anchor').addClass('jstree-hovered');\r\n\t\t\t/**\r\n\t\t\t * triggered when an node is hovered\r\n\t\t\t * @event\r\n\t\t\t * @name hover_node.jstree\r\n\t\t\t * @param {Object} node\r\n\t\t\t */\r\n\t\t\tthis.trigger('hover_node', { 'node' : this.get_node(obj) });\r\n\t\t\tsetTimeout(function () { t.attr('aria-activedescendant', obj[0].id); }, 0);\r\n\t\t},\r\n\t\t/**\r\n\t\t * removes the hover state from a nodecalled when a node is no longer hovered by the user. Used internally.\r\n\t\t * @private\r\n\t\t * @name dehover_node(obj)\r\n\t\t * @param {mixed} obj\r\n\t\t * @trigger dehover_node.jstree\r\n\t\t */\r\n\t\tdehover_node : function (obj) {\r\n\t\t\tobj = this.get_node(obj, true);\r\n\t\t\tif(!obj || !obj.length || !obj.children('.jstree-hovered').length) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tobj.children('.jstree-anchor').removeClass('jstree-hovered');\r\n\t\t\t/**\r\n\t\t\t * triggered when an node is no longer hovered\r\n\t\t\t * @event\r\n\t\t\t * @name dehover_node.jstree\r\n\t\t\t * @param {Object} node\r\n\t\t\t */\r\n\t\t\tthis.trigger('dehover_node', { 'node' : this.get_node(obj) });\r\n\t\t},\r\n\t\t/**\r\n\t\t * select a node\r\n\t\t * @name select_node(obj [, supress_event, prevent_open])\r\n\t\t * @param {mixed} obj an array can be used to select multiple nodes\r\n\t\t * @param {Boolean} supress_event if set to `true` the `changed.jstree` event won't be triggered\r\n\t\t * @param {Boolean} prevent_open if set to `true` parents of the selected node won't be opened\r\n\t\t * @trigger select_node.jstree, changed.jstree\r\n\t\t */\r\n\t\tselect_node : function (obj, supress_event, prevent_open, e) {\r\n\t\t\tvar dom, t1, t2, th;\r\n\t\t\tif($.isArray(obj)) {\r\n\t\t\t\tobj = obj.slice();\r\n\t\t\t\tfor(t1 = 0, t2 = obj.length; t1 < t2; t1++) {\r\n\t\t\t\t\tthis.select_node(obj[t1], supress_event, prevent_open, e);\r\n\t\t\t\t}\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\tobj = this.get_node(obj);\r\n\t\t\tif(!obj || obj.id === $.jstree.root) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tdom = this.get_node(obj, true);\r\n\t\t\tif(!obj.state.selected) {\r\n\t\t\t\tobj.state.selected = true;\r\n\t\t\t\tthis._data.core.selected.push(obj.id);\r\n\t\t\t\tif(!prevent_open) {\r\n\t\t\t\t\tdom = this._open_to(obj);\r\n\t\t\t\t}\r\n\t\t\t\tif(dom && dom.length) {\r\n\t\t\t\t\tdom.attr('aria-selected', true).children('.jstree-anchor').addClass('jstree-clicked');\r\n\t\t\t\t}\r\n\t\t\t\t/**\r\n\t\t\t\t * triggered when an node is selected\r\n\t\t\t\t * @event\r\n\t\t\t\t * @name select_node.jstree\r\n\t\t\t\t * @param {Object} node\r\n\t\t\t\t * @param {Array} selected the current selection\r\n\t\t\t\t * @param {Object} event the event (if any) that triggered this select_node\r\n\t\t\t\t */\r\n\t\t\t\tthis.trigger('select_node', { 'node' : obj, 'selected' : this._data.core.selected, 'event' : e });\r\n\t\t\t\tif(!supress_event) {\r\n\t\t\t\t\t/**\r\n\t\t\t\t\t * triggered when selection changes\r\n\t\t\t\t\t * @event\r\n\t\t\t\t\t * @name changed.jstree\r\n\t\t\t\t\t * @param {Object} node\r\n\t\t\t\t\t * @param {Object} action the action that caused the selection to change\r\n\t\t\t\t\t * @param {Array} selected the current selection\r\n\t\t\t\t\t * @param {Object} event the event (if any) that triggered this changed event\r\n\t\t\t\t\t */\r\n\t\t\t\t\tthis.trigger('changed', { 'action' : 'select_node', 'node' : obj, 'selected' : this._data.core.selected, 'event' : e });\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\t\t/**\r\n\t\t * deselect a node\r\n\t\t * @name deselect_node(obj [, supress_event])\r\n\t\t * @param {mixed} obj an array can be used to deselect multiple nodes\r\n\t\t * @param {Boolean} supress_event if set to `true` the `changed.jstree` event won't be triggered\r\n\t\t * @trigger deselect_node.jstree, changed.jstree\r\n\t\t */\r\n\t\tdeselect_node : function (obj, supress_event, e) {\r\n\t\t\tvar t1, t2, dom;\r\n\t\t\tif($.isArray(obj)) {\r\n\t\t\t\tobj = obj.slice();\r\n\t\t\t\tfor(t1 = 0, t2 = obj.length; t1 < t2; t1++) {\r\n\t\t\t\t\tthis.deselect_node(obj[t1], supress_event, e);\r\n\t\t\t\t}\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\tobj = this.get_node(obj);\r\n\t\t\tif(!obj || obj.id === $.jstree.root) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tdom = this.get_node(obj, true);\r\n\t\t\tif(obj.state.selected) {\r\n\t\t\t\tobj.state.selected = false;\r\n\t\t\t\tthis._data.core.selected = $.vakata.array_remove_item(this._data.core.selected, obj.id);\r\n\t\t\t\tif(dom.length) {\r\n\t\t\t\t\tdom.attr('aria-selected', false).children('.jstree-anchor').removeClass('jstree-clicked');\r\n\t\t\t\t}\r\n\t\t\t\t/**\r\n\t\t\t\t * triggered when an node is deselected\r\n\t\t\t\t * @event\r\n\t\t\t\t * @name deselect_node.jstree\r\n\t\t\t\t * @param {Object} node\r\n\t\t\t\t * @param {Array} selected the current selection\r\n\t\t\t\t * @param {Object} event the event (if any) that triggered this deselect_node\r\n\t\t\t\t */\r\n\t\t\t\tthis.trigger('deselect_node', { 'node' : obj, 'selected' : this._data.core.selected, 'event' : e });\r\n\t\t\t\tif(!supress_event) {\r\n\t\t\t\t\tthis.trigger('changed', { 'action' : 'deselect_node', 'node' : obj, 'selected' : this._data.core.selected, 'event' : e });\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\t\t/**\r\n\t\t * select all nodes in the tree\r\n\t\t * @name select_all([supress_event])\r\n\t\t * @param {Boolean} supress_event if set to `true` the `changed.jstree` event won't be triggered\r\n\t\t * @trigger select_all.jstree, changed.jstree\r\n\t\t */\r\n\t\tselect_all : function (supress_event) {\r\n\t\t\tvar tmp = this._data.core.selected.concat([]), i, j;\r\n\t\t\tthis._data.core.selected = this._model.data[$.jstree.root].children_d.concat();\r\n\t\t\tfor(i = 0, j = this._data.core.selected.length; i < j; i++) {\r\n\t\t\t\tif(this._model.data[this._data.core.selected[i]]) {\r\n\t\t\t\t\tthis._model.data[this._data.core.selected[i]].state.selected = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthis.redraw(true);\r\n\t\t\t/**\r\n\t\t\t * triggered when all nodes are selected\r\n\t\t\t * @event\r\n\t\t\t * @name select_all.jstree\r\n\t\t\t * @param {Array} selected the current selection\r\n\t\t\t */\r\n\t\t\tthis.trigger('select_all', { 'selected' : this._data.core.selected });\r\n\t\t\tif(!supress_event) {\r\n\t\t\t\tthis.trigger('changed', { 'action' : 'select_all', 'selected' : this._data.core.selected, 'old_selection' : tmp });\r\n\t\t\t}\r\n\t\t},\r\n\t\t/**\r\n\t\t * deselect all selected nodes\r\n\t\t * @name deselect_all([supress_event])\r\n\t\t * @param {Boolean} supress_event if set to `true` the `changed.jstree` event won't be triggered\r\n\t\t * @trigger deselect_all.jstree, changed.jstree\r\n\t\t */\r\n\t\tdeselect_all : function (supress_event) {\r\n\t\t\tvar tmp = this._data.core.selected.concat([]), i, j;\r\n\t\t\tfor(i = 0, j = this._data.core.selected.length; i < j; i++) {\r\n\t\t\t\tif(this._model.data[this._data.core.selected[i]]) {\r\n\t\t\t\t\tthis._model.data[this._data.core.selected[i]].state.selected = false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthis._data.core.selected = [];\r\n\t\t\tthis.element.find('.jstree-clicked').removeClass('jstree-clicked').parent().attr('aria-selected', false);\r\n\t\t\t/**\r\n\t\t\t * triggered when all nodes are deselected\r\n\t\t\t * @event\r\n\t\t\t * @name deselect_all.jstree\r\n\t\t\t * @param {Object} node the previous selection\r\n\t\t\t * @param {Array} selected the current selection\r\n\t\t\t */\r\n\t\t\tthis.trigger('deselect_all', { 'selected' : this._data.core.selected, 'node' : tmp });\r\n\t\t\tif(!supress_event) {\r\n\t\t\t\tthis.trigger('changed', { 'action' : 'deselect_all', 'selected' : this._data.core.selected, 'old_selection' : tmp });\r\n\t\t\t}\r\n\t\t},\r\n\t\t/**\r\n\t\t * checks if a node is selected\r\n\t\t * @name is_selected(obj)\r\n\t\t * @param  {mixed}  obj\r\n\t\t * @return {Boolean}\r\n\t\t */\r\n\t\tis_selected : function (obj) {\r\n\t\t\tobj = this.get_node(obj);\r\n\t\t\tif(!obj || obj.id === $.jstree.root) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\treturn obj.state.selected;\r\n\t\t},\r\n\t\t/**\r\n\t\t * get an array of all selected nodes\r\n\t\t * @name get_selected([full])\r\n\t\t * @param  {mixed}  full if set to `true` the returned array will consist of the full node objects, otherwise - only IDs will be returned\r\n\t\t * @return {Array}\r\n\t\t */\r\n\t\tget_selected : function (full) {\r\n\t\t\treturn full ? $.map(this._data.core.selected, $.proxy(function (i) { return this.get_node(i); }, this)) : this._data.core.selected.slice();\r\n\t\t},\r\n\t\t/**\r\n\t\t * get an array of all top level selected nodes (ignoring children of selected nodes)\r\n\t\t * @name get_top_selected([full])\r\n\t\t * @param  {mixed}  full if set to `true` the returned array will consist of the full node objects, otherwise - only IDs will be returned\r\n\t\t * @return {Array}\r\n\t\t */\r\n\t\tget_top_selected : function (full) {\r\n\t\t\tvar tmp = this.get_selected(true),\r\n\t\t\t\tobj = {}, i, j, k, l;\r\n\t\t\tfor(i = 0, j = tmp.length; i < j; i++) {\r\n\t\t\t\tobj[tmp[i].id] = tmp[i];\r\n\t\t\t}\r\n\t\t\tfor(i = 0, j = tmp.length; i < j; i++) {\r\n\t\t\t\tfor(k = 0, l = tmp[i].children_d.length; k < l; k++) {\r\n\t\t\t\t\tif(obj[tmp[i].children_d[k]]) {\r\n\t\t\t\t\t\tdelete obj[tmp[i].children_d[k]];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\ttmp = [];\r\n\t\t\tfor(i in obj) {\r\n\t\t\t\tif(obj.hasOwnProperty(i)) {\r\n\t\t\t\t\ttmp.push(i);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn full ? $.map(tmp, $.proxy(function (i) { return this.get_node(i); }, this)) : tmp;\r\n\t\t},\r\n\t\t/**\r\n\t\t * get an array of all bottom level selected nodes (ignoring selected parents)\r\n\t\t * @name get_bottom_selected([full])\r\n\t\t * @param  {mixed}  full if set to `true` the returned array will consist of the full node objects, otherwise - only IDs will be returned\r\n\t\t * @return {Array}\r\n\t\t */\r\n\t\tget_bottom_selected : function (full) {\r\n\t\t\tvar tmp = this.get_selected(true),\r\n\t\t\t\tobj = [], i, j;\r\n\t\t\tfor(i = 0, j = tmp.length; i < j; i++) {\r\n\t\t\t\tif(!tmp[i].children.length) {\r\n\t\t\t\t\tobj.push(tmp[i].id);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn full ? $.map(obj, $.proxy(function (i) { return this.get_node(i); }, this)) : obj;\r\n\t\t},\r\n\t\t/**\r\n\t\t * gets the current state of the tree so that it can be restored later with `set_state(state)`. Used internally.\r\n\t\t * @name get_state()\r\n\t\t * @private\r\n\t\t * @return {Object}\r\n\t\t */\r\n\t\tget_state : function () {\r\n\t\t\tvar state\t= {\r\n\t\t\t\t'core' : {\r\n\t\t\t\t\t'open' : [],\r\n\t\t\t\t\t'loaded' : [],\r\n\t\t\t\t\t'scroll' : {\r\n\t\t\t\t\t\t'left' : this.element.scrollLeft(),\r\n\t\t\t\t\t\t'top' : this.element.scrollTop()\r\n\t\t\t\t\t},\r\n\t\t\t\t\t/*!\r\n\t\t\t\t\t'themes' : {\r\n\t\t\t\t\t\t'name' : this.get_theme(),\r\n\t\t\t\t\t\t'icons' : this._data.core.themes.icons,\r\n\t\t\t\t\t\t'dots' : this._data.core.themes.dots\r\n\t\t\t\t\t},\r\n\t\t\t\t\t*/\r\n\t\t\t\t\t'selected' : []\r\n\t\t\t\t}\r\n\t\t\t}, i;\r\n\t\t\tfor(i in this._model.data) {\r\n\t\t\t\tif(this._model.data.hasOwnProperty(i)) {\r\n\t\t\t\t\tif(i !== $.jstree.root) {\r\n\t\t\t\t\t\tif(this._model.data[i].state.loaded && this.settings.core.loaded_state) {\r\n\t\t\t\t\t\t\tstate.core.loaded.push(i);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif(this._model.data[i].state.opened) {\r\n\t\t\t\t\t\t\tstate.core.open.push(i);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif(this._model.data[i].state.selected) {\r\n\t\t\t\t\t\t\tstate.core.selected.push(i);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn state;\r\n\t\t},\r\n\t\t/**\r\n\t\t * sets the state of the tree. Used internally.\r\n\t\t * @name set_state(state [, callback])\r\n\t\t * @private\r\n\t\t * @param {Object} state the state to restore. Keep in mind this object is passed by reference and jstree will modify it.\r\n\t\t * @param {Function} callback an optional function to execute once the state is restored.\r\n\t\t * @trigger set_state.jstree\r\n\t\t */\r\n\t\tset_state : function (state, callback) {\r\n\t\t\tif(state) {\r\n\t\t\t\tif(state.core && state.core.selected && state.core.initial_selection === undefined) {\r\n\t\t\t\t\tstate.core.initial_selection = this._data.core.selected.concat([]).sort().join(',');\r\n\t\t\t\t}\r\n\t\t\t\tif(state.core) {\r\n\t\t\t\t\tvar res, n, t, _this, i;\r\n\t\t\t\t\tif(state.core.loaded) {\r\n\t\t\t\t\t\tif(!this.settings.core.loaded_state || !$.isArray(state.core.loaded) || !state.core.loaded.length) {\r\n\t\t\t\t\t\t\tdelete state.core.loaded;\r\n\t\t\t\t\t\t\tthis.set_state(state, callback);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tthis._load_nodes(state.core.loaded, function (nodes) {\r\n\t\t\t\t\t\t\t\tdelete state.core.loaded;\r\n\t\t\t\t\t\t\t\tthis.set_state(state, callback);\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(state.core.open) {\r\n\t\t\t\t\t\tif(!$.isArray(state.core.open) || !state.core.open.length) {\r\n\t\t\t\t\t\t\tdelete state.core.open;\r\n\t\t\t\t\t\t\tthis.set_state(state, callback);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tthis._load_nodes(state.core.open, function (nodes) {\r\n\t\t\t\t\t\t\t\tthis.open_node(nodes, false, 0);\r\n\t\t\t\t\t\t\t\tdelete state.core.open;\r\n\t\t\t\t\t\t\t\tthis.set_state(state, callback);\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(state.core.scroll) {\r\n\t\t\t\t\t\tif(state.core.scroll && state.core.scroll.left !== undefined) {\r\n\t\t\t\t\t\t\tthis.element.scrollLeft(state.core.scroll.left);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif(state.core.scroll && state.core.scroll.top !== undefined) {\r\n\t\t\t\t\t\t\tthis.element.scrollTop(state.core.scroll.top);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tdelete state.core.scroll;\r\n\t\t\t\t\t\tthis.set_state(state, callback);\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(state.core.selected) {\r\n\t\t\t\t\t\t_this = this;\r\n\t\t\t\t\t\tif (state.core.initial_selection === undefined ||\r\n\t\t\t\t\t\t\tstate.core.initial_selection === this._data.core.selected.concat([]).sort().join(',')\r\n\t\t\t\t\t\t) {\r\n\t\t\t\t\t\t\tthis.deselect_all();\r\n\t\t\t\t\t\t\t$.each(state.core.selected, function (i, v) {\r\n\t\t\t\t\t\t\t\t_this.select_node(v, false, true);\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tdelete state.core.initial_selection;\r\n\t\t\t\t\t\tdelete state.core.selected;\r\n\t\t\t\t\t\tthis.set_state(state, callback);\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tfor(i in state) {\r\n\t\t\t\t\t\tif(state.hasOwnProperty(i) && i !== \"core\" && $.inArray(i, this.settings.plugins) === -1) {\r\n\t\t\t\t\t\t\tdelete state[i];\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif($.isEmptyObject(state.core)) {\r\n\t\t\t\t\t\tdelete state.core;\r\n\t\t\t\t\t\tthis.set_state(state, callback);\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif($.isEmptyObject(state)) {\r\n\t\t\t\t\tstate = null;\r\n\t\t\t\t\tif(callback) { callback.call(this); }\r\n\t\t\t\t\t/**\r\n\t\t\t\t\t * triggered when a `set_state` call completes\r\n\t\t\t\t\t * @event\r\n\t\t\t\t\t * @name set_state.jstree\r\n\t\t\t\t\t */\r\n\t\t\t\t\tthis.trigger('set_state');\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\treturn false;\r\n\t\t},\r\n\t\t/**\r\n\t\t * refreshes the tree - all nodes are reloaded with calls to `load_node`.\r\n\t\t * @name refresh()\r\n\t\t * @param {Boolean} skip_loading an option to skip showing the loading indicator\r\n\t\t * @param {Mixed} forget_state if set to `true` state will not be reapplied, if set to a function (receiving the current state as argument) the result of that function will be used as state\r\n\t\t * @trigger refresh.jstree\r\n\t\t */\r\n\t\trefresh : function (skip_loading, forget_state) {\r\n\t\t\tthis._data.core.state = forget_state === true ? {} : this.get_state();\r\n\t\t\tif(forget_state && $.isFunction(forget_state)) { this._data.core.state = forget_state.call(this, this._data.core.state); }\r\n\t\t\tthis._cnt = 0;\r\n\t\t\tthis._model.data = {};\r\n\t\t\tthis._model.data[$.jstree.root] = {\r\n\t\t\t\tid : $.jstree.root,\r\n\t\t\t\tparent : null,\r\n\t\t\t\tparents : [],\r\n\t\t\t\tchildren : [],\r\n\t\t\t\tchildren_d : [],\r\n\t\t\t\tstate : { loaded : false }\r\n\t\t\t};\r\n\t\t\tthis._data.core.selected = [];\r\n\t\t\tthis._data.core.last_clicked = null;\r\n\t\t\tthis._data.core.focused = null;\r\n\r\n\t\t\tvar c = this.get_container_ul()[0].className;\r\n\t\t\tif(!skip_loading) {\r\n\t\t\t\tthis.element.html(\"<\"+\"ul class='\"+c+\"' role='group'><\"+\"li class='jstree-initial-node jstree-loading jstree-leaf jstree-last' role='treeitem' id='j\"+this._id+\"_loading'><i class='jstree-icon jstree-ocl'></i><\"+\"a class='jstree-anchor' href='#'><i class='jstree-icon jstree-themeicon-hidden'></i>\" + this.get_string(\"Loading ...\") + \"</a></li></ul>\");\r\n\t\t\t\tthis.element.attr('aria-activedescendant','j'+this._id+'_loading');\r\n\t\t\t}\r\n\t\t\tthis.load_node($.jstree.root, function (o, s) {\r\n\t\t\t\tif(s) {\r\n\t\t\t\t\tthis.get_container_ul()[0].className = c;\r\n\t\t\t\t\tif(this._firstChild(this.get_container_ul()[0])) {\r\n\t\t\t\t\t\tthis.element.attr('aria-activedescendant',this._firstChild(this.get_container_ul()[0]).id);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis.set_state($.extend(true, {}, this._data.core.state), function () {\r\n\t\t\t\t\t\t/**\r\n\t\t\t\t\t\t * triggered when a `refresh` call completes\r\n\t\t\t\t\t\t * @event\r\n\t\t\t\t\t\t * @name refresh.jstree\r\n\t\t\t\t\t\t */\r\n\t\t\t\t\t\tthis.trigger('refresh');\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\tthis._data.core.state = null;\r\n\t\t\t});\r\n\t\t},\r\n\t\t/**\r\n\t\t * refreshes a node in the tree (reload its children) all opened nodes inside that node are reloaded with calls to `load_node`.\r\n\t\t * @name refresh_node(obj)\r\n\t\t * @param  {mixed} obj the node\r\n\t\t * @trigger refresh_node.jstree\r\n\t\t */\r\n\t\trefresh_node : function (obj) {\r\n\t\t\tobj = this.get_node(obj);\r\n\t\t\tif(!obj || obj.id === $.jstree.root) { return false; }\r\n\t\t\tvar opened = [], to_load = [], s = this._data.core.selected.concat([]);\r\n\t\t\tto_load.push(obj.id);\r\n\t\t\tif(obj.state.opened === true) { opened.push(obj.id); }\r\n\t\t\tthis.get_node(obj, true).find('.jstree-open').each(function() { to_load.push(this.id); opened.push(this.id); });\r\n\t\t\tthis._load_nodes(to_load, $.proxy(function (nodes) {\r\n\t\t\t\tthis.open_node(opened, false, 0);\r\n\t\t\t\tthis.select_node(s);\r\n\t\t\t\t/**\r\n\t\t\t\t * triggered when a node is refreshed\r\n\t\t\t\t * @event\r\n\t\t\t\t * @name refresh_node.jstree\r\n\t\t\t\t * @param {Object} node - the refreshed node\r\n\t\t\t\t * @param {Array} nodes - an array of the IDs of the nodes that were reloaded\r\n\t\t\t\t */\r\n\t\t\t\tthis.trigger('refresh_node', { 'node' : obj, 'nodes' : nodes });\r\n\t\t\t}, this), false, true);\r\n\t\t},\r\n\t\t/**\r\n\t\t * set (change) the ID of a node\r\n\t\t * @name set_id(obj, id)\r\n\t\t * @param  {mixed} obj the node\r\n\t\t * @param  {String} id the new ID\r\n\t\t * @return {Boolean}\r\n\t\t * @trigger set_id.jstree\r\n\t\t */\r\n\t\tset_id : function (obj, id) {\r\n\t\t\tobj = this.get_node(obj);\r\n\t\t\tif(!obj || obj.id === $.jstree.root) { return false; }\r\n\t\t\tvar i, j, m = this._model.data, old = obj.id;\r\n\t\t\tid = id.toString();\r\n\t\t\t// update parents (replace current ID with new one in children and children_d)\r\n\t\t\tm[obj.parent].children[$.inArray(obj.id, m[obj.parent].children)] = id;\r\n\t\t\tfor(i = 0, j = obj.parents.length; i < j; i++) {\r\n\t\t\t\tm[obj.parents[i]].children_d[$.inArray(obj.id, m[obj.parents[i]].children_d)] = id;\r\n\t\t\t}\r\n\t\t\t// update children (replace current ID with new one in parent and parents)\r\n\t\t\tfor(i = 0, j = obj.children.length; i < j; i++) {\r\n\t\t\t\tm[obj.children[i]].parent = id;\r\n\t\t\t}\r\n\t\t\tfor(i = 0, j = obj.children_d.length; i < j; i++) {\r\n\t\t\t\tm[obj.children_d[i]].parents[$.inArray(obj.id, m[obj.children_d[i]].parents)] = id;\r\n\t\t\t}\r\n\t\t\ti = $.inArray(obj.id, this._data.core.selected);\r\n\t\t\tif(i !== -1) { this._data.core.selected[i] = id; }\r\n\t\t\t// update model and obj itself (obj.id, this._model.data[KEY])\r\n\t\t\ti = this.get_node(obj.id, true);\r\n\t\t\tif(i) {\r\n\t\t\t\ti.attr('id', id); //.children('.jstree-anchor').attr('id', id + '_anchor').end().attr('aria-labelledby', id + '_anchor');\r\n\t\t\t\tif(this.element.attr('aria-activedescendant') === obj.id) {\r\n\t\t\t\t\tthis.element.attr('aria-activedescendant', id);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tdelete m[obj.id];\r\n\t\t\tobj.id = id;\r\n\t\t\tobj.li_attr.id = id;\r\n\t\t\tm[id] = obj;\r\n\t\t\t/**\r\n\t\t\t * triggered when a node id value is changed\r\n\t\t\t * @event\r\n\t\t\t * @name set_id.jstree\r\n\t\t\t * @param {Object} node\r\n\t\t\t * @param {String} old the old id\r\n\t\t\t */\r\n\t\t\tthis.trigger('set_id',{ \"node\" : obj, \"new\" : obj.id, \"old\" : old });\r\n\t\t\treturn true;\r\n\t\t},\r\n\t\t/**\r\n\t\t * get the text value of a node\r\n\t\t * @name get_text(obj)\r\n\t\t * @param  {mixed} obj the node\r\n\t\t * @return {String}\r\n\t\t */\r\n\t\tget_text : function (obj) {\r\n\t\t\tobj = this.get_node(obj);\r\n\t\t\treturn (!obj || obj.id === $.jstree.root) ? false : obj.text;\r\n\t\t},\r\n\t\t/**\r\n\t\t * set the text value of a node. Used internally, please use `rename_node(obj, val)`.\r\n\t\t * @private\r\n\t\t * @name set_text(obj, val)\r\n\t\t * @param  {mixed} obj the node, you can pass an array to set the text on multiple nodes\r\n\t\t * @param  {String} val the new text value\r\n\t\t * @return {Boolean}\r\n\t\t * @trigger set_text.jstree\r\n\t\t */\r\n\t\tset_text : function (obj, val) {\r\n\t\t\tvar t1, t2;\r\n\t\t\tif($.isArray(obj)) {\r\n\t\t\t\tobj = obj.slice();\r\n\t\t\t\tfor(t1 = 0, t2 = obj.length; t1 < t2; t1++) {\r\n\t\t\t\t\tthis.set_text(obj[t1], val);\r\n\t\t\t\t}\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\tobj = this.get_node(obj);\r\n\t\t\tif(!obj || obj.id === $.jstree.root) { return false; }\r\n\t\t\tobj.text = val;\r\n\t\t\tif(this.get_node(obj, true).length) {\r\n\t\t\t\tthis.redraw_node(obj.id);\r\n\t\t\t}\r\n\t\t\t/**\r\n\t\t\t * triggered when a node text value is changed\r\n\t\t\t * @event\r\n\t\t\t * @name set_text.jstree\r\n\t\t\t * @param {Object} obj\r\n\t\t\t * @param {String} text the new value\r\n\t\t\t */\r\n\t\t\tthis.trigger('set_text',{ \"obj\" : obj, \"text\" : val });\r\n\t\t\treturn true;\r\n\t\t},\r\n\t\t/**\r\n\t\t * gets a JSON representation of a node (or the whole tree)\r\n\t\t * @name get_json([obj, options])\r\n\t\t * @param  {mixed} obj\r\n\t\t * @param  {Object} options\r\n\t\t * @param  {Boolean} options.no_state do not return state information\r\n\t\t * @param  {Boolean} options.no_id do not return ID\r\n\t\t * @param  {Boolean} options.no_children do not include children\r\n\t\t * @param  {Boolean} options.no_data do not include node data\r\n\t\t * @param  {Boolean} options.no_li_attr do not include LI attributes\r\n\t\t * @param  {Boolean} options.no_a_attr do not include A attributes\r\n\t\t * @param  {Boolean} options.flat return flat JSON instead of nested\r\n\t\t * @return {Object}\r\n\t\t */\r\n\t\tget_json : function (obj, options, flat) {\r\n\t\t\tobj = this.get_node(obj || $.jstree.root);\r\n\t\t\tif(!obj) { return false; }\r\n\t\t\tif(options && options.flat && !flat) { flat = []; }\r\n\t\t\tvar tmp = {\r\n\t\t\t\t'id' : obj.id,\r\n\t\t\t\t'text' : obj.text,\r\n\t\t\t\t'icon' : this.get_icon(obj),\r\n\t\t\t\t'li_attr' : $.extend(true, {}, obj.li_attr),\r\n\t\t\t\t'a_attr' : $.extend(true, {}, obj.a_attr),\r\n\t\t\t\t'state' : {},\r\n\t\t\t\t'data' : options && options.no_data ? false : $.extend(true, $.isArray(obj.data)?[]:{}, obj.data)\r\n\t\t\t\t//( this.get_node(obj, true).length ? this.get_node(obj, true).data() : obj.data ),\r\n\t\t\t}, i, j;\r\n\t\t\tif(options && options.flat) {\r\n\t\t\t\ttmp.parent = obj.parent;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\ttmp.children = [];\r\n\t\t\t}\r\n\t\t\tif(!options || !options.no_state) {\r\n\t\t\t\tfor(i in obj.state) {\r\n\t\t\t\t\tif(obj.state.hasOwnProperty(i)) {\r\n\t\t\t\t\t\ttmp.state[i] = obj.state[i];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tdelete tmp.state;\r\n\t\t\t}\r\n\t\t\tif(options && options.no_li_attr) {\r\n\t\t\t\tdelete tmp.li_attr;\r\n\t\t\t}\r\n\t\t\tif(options && options.no_a_attr) {\r\n\t\t\t\tdelete tmp.a_attr;\r\n\t\t\t}\r\n\t\t\tif(options && options.no_id) {\r\n\t\t\t\tdelete tmp.id;\r\n\t\t\t\tif(tmp.li_attr && tmp.li_attr.id) {\r\n\t\t\t\t\tdelete tmp.li_attr.id;\r\n\t\t\t\t}\r\n\t\t\t\tif(tmp.a_attr && tmp.a_attr.id) {\r\n\t\t\t\t\tdelete tmp.a_attr.id;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(options && options.flat && obj.id !== $.jstree.root) {\r\n\t\t\t\tflat.push(tmp);\r\n\t\t\t}\r\n\t\t\tif(!options || !options.no_children) {\r\n\t\t\t\tfor(i = 0, j = obj.children.length; i < j; i++) {\r\n\t\t\t\t\tif(options && options.flat) {\r\n\t\t\t\t\t\tthis.get_json(obj.children[i], options, flat);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\ttmp.children.push(this.get_json(obj.children[i], options));\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn options && options.flat ? flat : (obj.id === $.jstree.root ? tmp.children : tmp);\r\n\t\t},\r\n\t\t/**\r\n\t\t * create a new node (do not confuse with load_node)\r\n\t\t * @name create_node([par, node, pos, callback, is_loaded])\r\n\t\t * @param  {mixed}   par       the parent node (to create a root node use either \"#\" (string) or `null`)\r\n\t\t * @param  {mixed}   node      the data for the new node (a valid JSON object, or a simple string with the name)\r\n\t\t * @param  {mixed}   pos       the index at which to insert the node, \"first\" and \"last\" are also supported, default is \"last\"\r\n\t\t * @param  {Function} callback a function to be called once the node is created\r\n\t\t * @param  {Boolean} is_loaded internal argument indicating if the parent node was succesfully loaded\r\n\t\t * @return {String}            the ID of the newly create node\r\n\t\t * @trigger model.jstree, create_node.jstree\r\n\t\t */\r\n\t\tcreate_node : function (par, node, pos, callback, is_loaded) {\r\n\t\t\tif(par === null) { par = $.jstree.root; }\r\n\t\t\tpar = this.get_node(par);\r\n\t\t\tif(!par) { return false; }\r\n\t\t\tpos = pos === undefined ? \"last\" : pos;\r\n\t\t\tif(!pos.toString().match(/^(before|after)$/) && !is_loaded && !this.is_loaded(par)) {\r\n\t\t\t\treturn this.load_node(par, function () { this.create_node(par, node, pos, callback, true); });\r\n\t\t\t}\r\n\t\t\tif(!node) { node = { \"text\" : this.get_string('New node') }; }\r\n\t\t\tif(typeof node === \"string\") {\r\n\t\t\t\tnode = { \"text\" : node };\r\n\t\t\t} else {\r\n\t\t\t\tnode = $.extend(true, {}, node);\r\n\t\t\t}\r\n\t\t\tif(node.text === undefined) { node.text = this.get_string('New node'); }\r\n\t\t\tvar tmp, dpc, i, j;\r\n\r\n\t\t\tif(par.id === $.jstree.root) {\r\n\t\t\t\tif(pos === \"before\") { pos = \"first\"; }\r\n\t\t\t\tif(pos === \"after\") { pos = \"last\"; }\r\n\t\t\t}\r\n\t\t\tswitch(pos) {\r\n\t\t\t\tcase \"before\":\r\n\t\t\t\t\ttmp = this.get_node(par.parent);\r\n\t\t\t\t\tpos = $.inArray(par.id, tmp.children);\r\n\t\t\t\t\tpar = tmp;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"after\" :\r\n\t\t\t\t\ttmp = this.get_node(par.parent);\r\n\t\t\t\t\tpos = $.inArray(par.id, tmp.children) + 1;\r\n\t\t\t\t\tpar = tmp;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"inside\":\r\n\t\t\t\tcase \"first\":\r\n\t\t\t\t\tpos = 0;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"last\":\r\n\t\t\t\t\tpos = par.children.length;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tif(!pos) { pos = 0; }\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tif(pos > par.children.length) { pos = par.children.length; }\r\n\t\t\tif(!node.id) { node.id = true; }\r\n\t\t\tif(!this.check(\"create_node\", node, par, pos)) {\r\n\t\t\t\tthis.settings.core.error.call(this, this._data.core.last_error);\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tif(node.id === true) { delete node.id; }\r\n\t\t\tnode = this._parse_model_from_json(node, par.id, par.parents.concat());\r\n\t\t\tif(!node) { return false; }\r\n\t\t\ttmp = this.get_node(node);\r\n\t\t\tdpc = [];\r\n\t\t\tdpc.push(node);\r\n\t\t\tdpc = dpc.concat(tmp.children_d);\r\n\t\t\tthis.trigger('model', { \"nodes\" : dpc, \"parent\" : par.id });\r\n\r\n\t\t\tpar.children_d = par.children_d.concat(dpc);\r\n\t\t\tfor(i = 0, j = par.parents.length; i < j; i++) {\r\n\t\t\t\tthis._model.data[par.parents[i]].children_d = this._model.data[par.parents[i]].children_d.concat(dpc);\r\n\t\t\t}\r\n\t\t\tnode = tmp;\r\n\t\t\ttmp = [];\r\n\t\t\tfor(i = 0, j = par.children.length; i < j; i++) {\r\n\t\t\t\ttmp[i >= pos ? i+1 : i] = par.children[i];\r\n\t\t\t}\r\n\t\t\ttmp[pos] = node.id;\r\n\t\t\tpar.children = tmp;\r\n\r\n\t\t\tthis.redraw_node(par, true);\r\n\t\t\t/**\r\n\t\t\t * triggered when a node is created\r\n\t\t\t * @event\r\n\t\t\t * @name create_node.jstree\r\n\t\t\t * @param {Object} node\r\n\t\t\t * @param {String} parent the parent's ID\r\n\t\t\t * @param {Number} position the position of the new node among the parent's children\r\n\t\t\t */\r\n\t\t\tthis.trigger('create_node', { \"node\" : this.get_node(node), \"parent\" : par.id, \"position\" : pos });\r\n\t\t\tif(callback) { callback.call(this, this.get_node(node)); }\r\n\t\t\treturn node.id;\r\n\t\t},\r\n\t\t/**\r\n\t\t * set the text value of a node\r\n\t\t * @name rename_node(obj, val)\r\n\t\t * @param  {mixed} obj the node, you can pass an array to rename multiple nodes to the same name\r\n\t\t * @param  {String} val the new text value\r\n\t\t * @return {Boolean}\r\n\t\t * @trigger rename_node.jstree\r\n\t\t */\r\n\t\trename_node : function (obj, val) {\r\n\t\t\tvar t1, t2, old;\r\n\t\t\tif($.isArray(obj)) {\r\n\t\t\t\tobj = obj.slice();\r\n\t\t\t\tfor(t1 = 0, t2 = obj.length; t1 < t2; t1++) {\r\n\t\t\t\t\tthis.rename_node(obj[t1], val);\r\n\t\t\t\t}\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\tobj = this.get_node(obj);\r\n\t\t\tif(!obj || obj.id === $.jstree.root) { return false; }\r\n\t\t\told = obj.text;\r\n\t\t\tif(!this.check(\"rename_node\", obj, this.get_parent(obj), val)) {\r\n\t\t\t\tthis.settings.core.error.call(this, this._data.core.last_error);\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tthis.set_text(obj, val); // .apply(this, Array.prototype.slice.call(arguments))\r\n\t\t\t/**\r\n\t\t\t * triggered when a node is renamed\r\n\t\t\t * @event\r\n\t\t\t * @name rename_node.jstree\r\n\t\t\t * @param {Object} node\r\n\t\t\t * @param {String} text the new value\r\n\t\t\t * @param {String} old the old value\r\n\t\t\t */\r\n\t\t\tthis.trigger('rename_node', { \"node\" : obj, \"text\" : val, \"old\" : old });\r\n\t\t\treturn true;\r\n\t\t},\r\n\t\t/**\r\n\t\t * remove a node\r\n\t\t * @name delete_node(obj)\r\n\t\t * @param  {mixed} obj the node, you can pass an array to delete multiple nodes\r\n\t\t * @return {Boolean}\r\n\t\t * @trigger delete_node.jstree, changed.jstree\r\n\t\t */\r\n\t\tdelete_node : function (obj) {\r\n\t\t\tvar t1, t2, par, pos, tmp, i, j, k, l, c, top, lft;\r\n\t\t\tif($.isArray(obj)) {\r\n\t\t\t\tobj = obj.slice();\r\n\t\t\t\tfor(t1 = 0, t2 = obj.length; t1 < t2; t1++) {\r\n\t\t\t\t\tthis.delete_node(obj[t1]);\r\n\t\t\t\t}\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\tobj = this.get_node(obj);\r\n\t\t\tif(!obj || obj.id === $.jstree.root) { return false; }\r\n\t\t\tpar = this.get_node(obj.parent);\r\n\t\t\tpos = $.inArray(obj.id, par.children);\r\n\t\t\tc = false;\r\n\t\t\tif(!this.check(\"delete_node\", obj, par, pos)) {\r\n\t\t\t\tthis.settings.core.error.call(this, this._data.core.last_error);\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tif(pos !== -1) {\r\n\t\t\t\tpar.children = $.vakata.array_remove(par.children, pos);\r\n\t\t\t}\r\n\t\t\ttmp = obj.children_d.concat([]);\r\n\t\t\ttmp.push(obj.id);\r\n\t\t\tfor(i = 0, j = obj.parents.length; i < j; i++) {\r\n\t\t\t\tthis._model.data[obj.parents[i]].children_d = $.vakata.array_filter(this._model.data[obj.parents[i]].children_d, function (v) {\r\n\t\t\t\t\treturn $.inArray(v, tmp) === -1;\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\tfor(k = 0, l = tmp.length; k < l; k++) {\r\n\t\t\t\tif(this._model.data[tmp[k]].state.selected) {\r\n\t\t\t\t\tc = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (c) {\r\n\t\t\t\tthis._data.core.selected = $.vakata.array_filter(this._data.core.selected, function (v) {\r\n\t\t\t\t\treturn $.inArray(v, tmp) === -1;\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\t/**\r\n\t\t\t * triggered when a node is deleted\r\n\t\t\t * @event\r\n\t\t\t * @name delete_node.jstree\r\n\t\t\t * @param {Object} node\r\n\t\t\t * @param {String} parent the parent's ID\r\n\t\t\t */\r\n\t\t\tthis.trigger('delete_node', { \"node\" : obj, \"parent\" : par.id });\r\n\t\t\tif(c) {\r\n\t\t\t\tthis.trigger('changed', { 'action' : 'delete_node', 'node' : obj, 'selected' : this._data.core.selected, 'parent' : par.id });\r\n\t\t\t}\r\n\t\t\tfor(k = 0, l = tmp.length; k < l; k++) {\r\n\t\t\t\tdelete this._model.data[tmp[k]];\r\n\t\t\t}\r\n\t\t\tif($.inArray(this._data.core.focused, tmp) !== -1) {\r\n\t\t\t\tthis._data.core.focused = null;\r\n\t\t\t\ttop = this.element[0].scrollTop;\r\n\t\t\t\tlft = this.element[0].scrollLeft;\r\n\t\t\t\tif(par.id === $.jstree.root) {\r\n\t\t\t\t\tif (this._model.data[$.jstree.root].children[0]) {\r\n\t\t\t\t\t\tthis.get_node(this._model.data[$.jstree.root].children[0], true).children('.jstree-anchor').focus();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis.get_node(par, true).children('.jstree-anchor').focus();\r\n\t\t\t\t}\r\n\t\t\t\tthis.element[0].scrollTop  = top;\r\n\t\t\t\tthis.element[0].scrollLeft = lft;\r\n\t\t\t}\r\n\t\t\tthis.redraw_node(par, true);\r\n\t\t\treturn true;\r\n\t\t},\r\n\t\t/**\r\n\t\t * check if an operation is premitted on the tree. Used internally.\r\n\t\t * @private\r\n\t\t * @name check(chk, obj, par, pos)\r\n\t\t * @param  {String} chk the operation to check, can be \"create_node\", \"rename_node\", \"delete_node\", \"copy_node\" or \"move_node\"\r\n\t\t * @param  {mixed} obj the node\r\n\t\t * @param  {mixed} par the parent\r\n\t\t * @param  {mixed} pos the position to insert at, or if \"rename_node\" - the new name\r\n\t\t * @param  {mixed} more some various additional information, for example if a \"move_node\" operations is triggered by DND this will be the hovered node\r\n\t\t * @return {Boolean}\r\n\t\t */\r\n\t\tcheck : function (chk, obj, par, pos, more) {\r\n\t\t\tobj = obj && obj.id ? obj : this.get_node(obj);\r\n\t\t\tpar = par && par.id ? par : this.get_node(par);\r\n\t\t\tvar tmp = chk.match(/^move_node|copy_node|create_node$/i) ? par : obj,\r\n\t\t\t\tchc = this.settings.core.check_callback;\r\n\t\t\tif(chk === \"move_node\" || chk === \"copy_node\") {\r\n\t\t\t\tif((!more || !more.is_multi) && (obj.id === par.id || (chk === \"move_node\" && $.inArray(obj.id, par.children) === pos) || $.inArray(par.id, obj.children_d) !== -1)) {\r\n\t\t\t\t\tthis._data.core.last_error = { 'error' : 'check', 'plugin' : 'core', 'id' : 'core_01', 'reason' : 'Moving parent inside child', 'data' : JSON.stringify({ 'chk' : chk, 'pos' : pos, 'obj' : obj && obj.id ? obj.id : false, 'par' : par && par.id ? par.id : false }) };\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(tmp && tmp.data) { tmp = tmp.data; }\r\n\t\t\tif(tmp && tmp.functions && (tmp.functions[chk] === false || tmp.functions[chk] === true)) {\r\n\t\t\t\tif(tmp.functions[chk] === false) {\r\n\t\t\t\t\tthis._data.core.last_error = { 'error' : 'check', 'plugin' : 'core', 'id' : 'core_02', 'reason' : 'Node data prevents function: ' + chk, 'data' : JSON.stringify({ 'chk' : chk, 'pos' : pos, 'obj' : obj && obj.id ? obj.id : false, 'par' : par && par.id ? par.id : false }) };\r\n\t\t\t\t}\r\n\t\t\t\treturn tmp.functions[chk];\r\n\t\t\t}\r\n\t\t\tif(chc === false || ($.isFunction(chc) && chc.call(this, chk, obj, par, pos, more) === false) || (chc && chc[chk] === false)) {\r\n\t\t\t\tthis._data.core.last_error = { 'error' : 'check', 'plugin' : 'core', 'id' : 'core_03', 'reason' : 'User config for core.check_callback prevents function: ' + chk, 'data' : JSON.stringify({ 'chk' : chk, 'pos' : pos, 'obj' : obj && obj.id ? obj.id : false, 'par' : par && par.id ? par.id : false }) };\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t},\r\n\t\t/**\r\n\t\t * get the last error\r\n\t\t * @name last_error()\r\n\t\t * @return {Object}\r\n\t\t */\r\n\t\tlast_error : function () {\r\n\t\t\treturn this._data.core.last_error;\r\n\t\t},\r\n\t\t/**\r\n\t\t * move a node to a new parent\r\n\t\t * @name move_node(obj, par [, pos, callback, is_loaded])\r\n\t\t * @param  {mixed} obj the node to move, pass an array to move multiple nodes\r\n\t\t * @param  {mixed} par the new parent\r\n\t\t * @param  {mixed} pos the position to insert at (besides integer values, \"first\" and \"last\" are supported, as well as \"before\" and \"after\"), defaults to integer `0`\r\n\t\t * @param  {function} callback a function to call once the move is completed, receives 3 arguments - the node, the new parent and the position\r\n\t\t * @param  {Boolean} is_loaded internal parameter indicating if the parent node has been loaded\r\n\t\t * @param  {Boolean} skip_redraw internal parameter indicating if the tree should be redrawn\r\n\t\t * @param  {Boolean} instance internal parameter indicating if the node comes from another instance\r\n\t\t * @trigger move_node.jstree\r\n\t\t */\r\n\t\tmove_node : function (obj, par, pos, callback, is_loaded, skip_redraw, origin) {\r\n\t\t\tvar t1, t2, old_par, old_pos, new_par, old_ins, is_multi, dpc, tmp, i, j, k, l, p;\r\n\r\n\t\t\tpar = this.get_node(par);\r\n\t\t\tpos = pos === undefined ? 0 : pos;\r\n\t\t\tif(!par) { return false; }\r\n\t\t\tif(!pos.toString().match(/^(before|after)$/) && !is_loaded && !this.is_loaded(par)) {\r\n\t\t\t\treturn this.load_node(par, function () { this.move_node(obj, par, pos, callback, true, false, origin); });\r\n\t\t\t}\r\n\r\n\t\t\tif($.isArray(obj)) {\r\n\t\t\t\tif(obj.length === 1) {\r\n\t\t\t\t\tobj = obj[0];\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t//obj = obj.slice();\r\n\t\t\t\t\tfor(t1 = 0, t2 = obj.length; t1 < t2; t1++) {\r\n\t\t\t\t\t\tif((tmp = this.move_node(obj[t1], par, pos, callback, is_loaded, false, origin))) {\r\n\t\t\t\t\t\t\tpar = tmp;\r\n\t\t\t\t\t\t\tpos = \"after\";\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis.redraw();\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tobj = obj && obj.id ? obj : this.get_node(obj);\r\n\r\n\t\t\tif(!obj || obj.id === $.jstree.root) { return false; }\r\n\r\n\t\t\told_par = (obj.parent || $.jstree.root).toString();\r\n\t\t\tnew_par = (!pos.toString().match(/^(before|after)$/) || par.id === $.jstree.root) ? par : this.get_node(par.parent);\r\n\t\t\told_ins = origin ? origin : (this._model.data[obj.id] ? this : $.jstree.reference(obj.id));\r\n\t\t\tis_multi = !old_ins || !old_ins._id || (this._id !== old_ins._id);\r\n\t\t\told_pos = old_ins && old_ins._id && old_par && old_ins._model.data[old_par] && old_ins._model.data[old_par].children ? $.inArray(obj.id, old_ins._model.data[old_par].children) : -1;\r\n\t\t\tif(old_ins && old_ins._id) {\r\n\t\t\t\tobj = old_ins._model.data[obj.id];\r\n\t\t\t}\r\n\r\n\t\t\tif(is_multi) {\r\n\t\t\t\tif((tmp = this.copy_node(obj, par, pos, callback, is_loaded, false, origin))) {\r\n\t\t\t\t\tif(old_ins) { old_ins.delete_node(obj); }\r\n\t\t\t\t\treturn tmp;\r\n\t\t\t\t}\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\t//var m = this._model.data;\r\n\t\t\tif(par.id === $.jstree.root) {\r\n\t\t\t\tif(pos === \"before\") { pos = \"first\"; }\r\n\t\t\t\tif(pos === \"after\") { pos = \"last\"; }\r\n\t\t\t}\r\n\t\t\tswitch(pos) {\r\n\t\t\t\tcase \"before\":\r\n\t\t\t\t\tpos = $.inArray(par.id, new_par.children);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"after\" :\r\n\t\t\t\t\tpos = $.inArray(par.id, new_par.children) + 1;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"inside\":\r\n\t\t\t\tcase \"first\":\r\n\t\t\t\t\tpos = 0;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"last\":\r\n\t\t\t\t\tpos = new_par.children.length;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tif(!pos) { pos = 0; }\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tif(pos > new_par.children.length) { pos = new_par.children.length; }\r\n\t\t\tif(!this.check(\"move_node\", obj, new_par, pos, { 'core' : true, 'origin' : origin, 'is_multi' : (old_ins && old_ins._id && old_ins._id !== this._id), 'is_foreign' : (!old_ins || !old_ins._id) })) {\r\n\t\t\t\tthis.settings.core.error.call(this, this._data.core.last_error);\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tif(obj.parent === new_par.id) {\r\n\t\t\t\tdpc = new_par.children.concat();\r\n\t\t\t\ttmp = $.inArray(obj.id, dpc);\r\n\t\t\t\tif(tmp !== -1) {\r\n\t\t\t\t\tdpc = $.vakata.array_remove(dpc, tmp);\r\n\t\t\t\t\tif(pos > tmp) { pos--; }\r\n\t\t\t\t}\r\n\t\t\t\ttmp = [];\r\n\t\t\t\tfor(i = 0, j = dpc.length; i < j; i++) {\r\n\t\t\t\t\ttmp[i >= pos ? i+1 : i] = dpc[i];\r\n\t\t\t\t}\r\n\t\t\t\ttmp[pos] = obj.id;\r\n\t\t\t\tnew_par.children = tmp;\r\n\t\t\t\tthis._node_changed(new_par.id);\r\n\t\t\t\tthis.redraw(new_par.id === $.jstree.root);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t// clean old parent and up\r\n\t\t\t\ttmp = obj.children_d.concat();\r\n\t\t\t\ttmp.push(obj.id);\r\n\t\t\t\tfor(i = 0, j = obj.parents.length; i < j; i++) {\r\n\t\t\t\t\tdpc = [];\r\n\t\t\t\t\tp = old_ins._model.data[obj.parents[i]].children_d;\r\n\t\t\t\t\tfor(k = 0, l = p.length; k < l; k++) {\r\n\t\t\t\t\t\tif($.inArray(p[k], tmp) === -1) {\r\n\t\t\t\t\t\t\tdpc.push(p[k]);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\told_ins._model.data[obj.parents[i]].children_d = dpc;\r\n\t\t\t\t}\r\n\t\t\t\told_ins._model.data[old_par].children = $.vakata.array_remove_item(old_ins._model.data[old_par].children, obj.id);\r\n\r\n\t\t\t\t// insert into new parent and up\r\n\t\t\t\tfor(i = 0, j = new_par.parents.length; i < j; i++) {\r\n\t\t\t\t\tthis._model.data[new_par.parents[i]].children_d = this._model.data[new_par.parents[i]].children_d.concat(tmp);\r\n\t\t\t\t}\r\n\t\t\t\tdpc = [];\r\n\t\t\t\tfor(i = 0, j = new_par.children.length; i < j; i++) {\r\n\t\t\t\t\tdpc[i >= pos ? i+1 : i] = new_par.children[i];\r\n\t\t\t\t}\r\n\t\t\t\tdpc[pos] = obj.id;\r\n\t\t\t\tnew_par.children = dpc;\r\n\t\t\t\tnew_par.children_d.push(obj.id);\r\n\t\t\t\tnew_par.children_d = new_par.children_d.concat(obj.children_d);\r\n\r\n\t\t\t\t// update object\r\n\t\t\t\tobj.parent = new_par.id;\r\n\t\t\t\ttmp = new_par.parents.concat();\r\n\t\t\t\ttmp.unshift(new_par.id);\r\n\t\t\t\tp = obj.parents.length;\r\n\t\t\t\tobj.parents = tmp;\r\n\r\n\t\t\t\t// update object children\r\n\t\t\t\ttmp = tmp.concat();\r\n\t\t\t\tfor(i = 0, j = obj.children_d.length; i < j; i++) {\r\n\t\t\t\t\tthis._model.data[obj.children_d[i]].parents = this._model.data[obj.children_d[i]].parents.slice(0,p*-1);\r\n\t\t\t\t\tArray.prototype.push.apply(this._model.data[obj.children_d[i]].parents, tmp);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif(old_par === $.jstree.root || new_par.id === $.jstree.root) {\r\n\t\t\t\t\tthis._model.force_full_redraw = true;\r\n\t\t\t\t}\r\n\t\t\t\tif(!this._model.force_full_redraw) {\r\n\t\t\t\t\tthis._node_changed(old_par);\r\n\t\t\t\t\tthis._node_changed(new_par.id);\r\n\t\t\t\t}\r\n\t\t\t\tif(!skip_redraw) {\r\n\t\t\t\t\tthis.redraw();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(callback) { callback.call(this, obj, new_par, pos); }\r\n\t\t\t/**\r\n\t\t\t * triggered when a node is moved\r\n\t\t\t * @event\r\n\t\t\t * @name move_node.jstree\r\n\t\t\t * @param {Object} node\r\n\t\t\t * @param {String} parent the parent's ID\r\n\t\t\t * @param {Number} position the position of the node among the parent's children\r\n\t\t\t * @param {String} old_parent the old parent of the node\r\n\t\t\t * @param {Number} old_position the old position of the node\r\n\t\t\t * @param {Boolean} is_multi do the node and new parent belong to different instances\r\n\t\t\t * @param {jsTree} old_instance the instance the node came from\r\n\t\t\t * @param {jsTree} new_instance the instance of the new parent\r\n\t\t\t */\r\n\t\t\tthis.trigger('move_node', { \"node\" : obj, \"parent\" : new_par.id, \"position\" : pos, \"old_parent\" : old_par, \"old_position\" : old_pos, 'is_multi' : (old_ins && old_ins._id && old_ins._id !== this._id), 'is_foreign' : (!old_ins || !old_ins._id), 'old_instance' : old_ins, 'new_instance' : this });\r\n\t\t\treturn obj.id;\r\n\t\t},\r\n\t\t/**\r\n\t\t * copy a node to a new parent\r\n\t\t * @name copy_node(obj, par [, pos, callback, is_loaded])\r\n\t\t * @param  {mixed} obj the node to copy, pass an array to copy multiple nodes\r\n\t\t * @param  {mixed} par the new parent\r\n\t\t * @param  {mixed} pos the position to insert at (besides integer values, \"first\" and \"last\" are supported, as well as \"before\" and \"after\"), defaults to integer `0`\r\n\t\t * @param  {function} callback a function to call once the move is completed, receives 3 arguments - the node, the new parent and the position\r\n\t\t * @param  {Boolean} is_loaded internal parameter indicating if the parent node has been loaded\r\n\t\t * @param  {Boolean} skip_redraw internal parameter indicating if the tree should be redrawn\r\n\t\t * @param  {Boolean} instance internal parameter indicating if the node comes from another instance\r\n\t\t * @trigger model.jstree copy_node.jstree\r\n\t\t */\r\n\t\tcopy_node : function (obj, par, pos, callback, is_loaded, skip_redraw, origin) {\r\n\t\t\tvar t1, t2, dpc, tmp, i, j, node, old_par, new_par, old_ins, is_multi;\r\n\r\n\t\t\tpar = this.get_node(par);\r\n\t\t\tpos = pos === undefined ? 0 : pos;\r\n\t\t\tif(!par) { return false; }\r\n\t\t\tif(!pos.toString().match(/^(before|after)$/) && !is_loaded && !this.is_loaded(par)) {\r\n\t\t\t\treturn this.load_node(par, function () { this.copy_node(obj, par, pos, callback, true, false, origin); });\r\n\t\t\t}\r\n\r\n\t\t\tif($.isArray(obj)) {\r\n\t\t\t\tif(obj.length === 1) {\r\n\t\t\t\t\tobj = obj[0];\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t//obj = obj.slice();\r\n\t\t\t\t\tfor(t1 = 0, t2 = obj.length; t1 < t2; t1++) {\r\n\t\t\t\t\t\tif((tmp = this.copy_node(obj[t1], par, pos, callback, is_loaded, true, origin))) {\r\n\t\t\t\t\t\t\tpar = tmp;\r\n\t\t\t\t\t\t\tpos = \"after\";\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis.redraw();\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tobj = obj && obj.id ? obj : this.get_node(obj);\r\n\t\t\tif(!obj || obj.id === $.jstree.root) { return false; }\r\n\r\n\t\t\told_par = (obj.parent || $.jstree.root).toString();\r\n\t\t\tnew_par = (!pos.toString().match(/^(before|after)$/) || par.id === $.jstree.root) ? par : this.get_node(par.parent);\r\n\t\t\told_ins = origin ? origin : (this._model.data[obj.id] ? this : $.jstree.reference(obj.id));\r\n\t\t\tis_multi = !old_ins || !old_ins._id || (this._id !== old_ins._id);\r\n\r\n\t\t\tif(old_ins && old_ins._id) {\r\n\t\t\t\tobj = old_ins._model.data[obj.id];\r\n\t\t\t}\r\n\r\n\t\t\tif(par.id === $.jstree.root) {\r\n\t\t\t\tif(pos === \"before\") { pos = \"first\"; }\r\n\t\t\t\tif(pos === \"after\") { pos = \"last\"; }\r\n\t\t\t}\r\n\t\t\tswitch(pos) {\r\n\t\t\t\tcase \"before\":\r\n\t\t\t\t\tpos = $.inArray(par.id, new_par.children);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"after\" :\r\n\t\t\t\t\tpos = $.inArray(par.id, new_par.children) + 1;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"inside\":\r\n\t\t\t\tcase \"first\":\r\n\t\t\t\t\tpos = 0;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"last\":\r\n\t\t\t\t\tpos = new_par.children.length;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tif(!pos) { pos = 0; }\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tif(pos > new_par.children.length) { pos = new_par.children.length; }\r\n\t\t\tif(!this.check(\"copy_node\", obj, new_par, pos, { 'core' : true, 'origin' : origin, 'is_multi' : (old_ins && old_ins._id && old_ins._id !== this._id), 'is_foreign' : (!old_ins || !old_ins._id) })) {\r\n\t\t\t\tthis.settings.core.error.call(this, this._data.core.last_error);\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tnode = old_ins ? old_ins.get_json(obj, { no_id : true, no_data : true, no_state : true }) : obj;\r\n\t\t\tif(!node) { return false; }\r\n\t\t\tif(node.id === true) { delete node.id; }\r\n\t\t\tnode = this._parse_model_from_json(node, new_par.id, new_par.parents.concat());\r\n\t\t\tif(!node) { return false; }\r\n\t\t\ttmp = this.get_node(node);\r\n\t\t\tif(obj && obj.state && obj.state.loaded === false) { tmp.state.loaded = false; }\r\n\t\t\tdpc = [];\r\n\t\t\tdpc.push(node);\r\n\t\t\tdpc = dpc.concat(tmp.children_d);\r\n\t\t\tthis.trigger('model', { \"nodes\" : dpc, \"parent\" : new_par.id });\r\n\r\n\t\t\t// insert into new parent and up\r\n\t\t\tfor(i = 0, j = new_par.parents.length; i < j; i++) {\r\n\t\t\t\tthis._model.data[new_par.parents[i]].children_d = this._model.data[new_par.parents[i]].children_d.concat(dpc);\r\n\t\t\t}\r\n\t\t\tdpc = [];\r\n\t\t\tfor(i = 0, j = new_par.children.length; i < j; i++) {\r\n\t\t\t\tdpc[i >= pos ? i+1 : i] = new_par.children[i];\r\n\t\t\t}\r\n\t\t\tdpc[pos] = tmp.id;\r\n\t\t\tnew_par.children = dpc;\r\n\t\t\tnew_par.children_d.push(tmp.id);\r\n\t\t\tnew_par.children_d = new_par.children_d.concat(tmp.children_d);\r\n\r\n\t\t\tif(new_par.id === $.jstree.root) {\r\n\t\t\t\tthis._model.force_full_redraw = true;\r\n\t\t\t}\r\n\t\t\tif(!this._model.force_full_redraw) {\r\n\t\t\t\tthis._node_changed(new_par.id);\r\n\t\t\t}\r\n\t\t\tif(!skip_redraw) {\r\n\t\t\t\tthis.redraw(new_par.id === $.jstree.root);\r\n\t\t\t}\r\n\t\t\tif(callback) { callback.call(this, tmp, new_par, pos); }\r\n\t\t\t/**\r\n\t\t\t * triggered when a node is copied\r\n\t\t\t * @event\r\n\t\t\t * @name copy_node.jstree\r\n\t\t\t * @param {Object} node the copied node\r\n\t\t\t * @param {Object} original the original node\r\n\t\t\t * @param {String} parent the parent's ID\r\n\t\t\t * @param {Number} position the position of the node among the parent's children\r\n\t\t\t * @param {String} old_parent the old parent of the node\r\n\t\t\t * @param {Number} old_position the position of the original node\r\n\t\t\t * @param {Boolean} is_multi do the node and new parent belong to different instances\r\n\t\t\t * @param {jsTree} old_instance the instance the node came from\r\n\t\t\t * @param {jsTree} new_instance the instance of the new parent\r\n\t\t\t */\r\n\t\t\tthis.trigger('copy_node', { \"node\" : tmp, \"original\" : obj, \"parent\" : new_par.id, \"position\" : pos, \"old_parent\" : old_par, \"old_position\" : old_ins && old_ins._id && old_par && old_ins._model.data[old_par] && old_ins._model.data[old_par].children ? $.inArray(obj.id, old_ins._model.data[old_par].children) : -1,'is_multi' : (old_ins && old_ins._id && old_ins._id !== this._id), 'is_foreign' : (!old_ins || !old_ins._id), 'old_instance' : old_ins, 'new_instance' : this });\r\n\t\t\treturn tmp.id;\r\n\t\t},\r\n\t\t/**\r\n\t\t * cut a node (a later call to `paste(obj)` would move the node)\r\n\t\t * @name cut(obj)\r\n\t\t * @param  {mixed} obj multiple objects can be passed using an array\r\n\t\t * @trigger cut.jstree\r\n\t\t */\r\n\t\tcut : function (obj) {\r\n\t\t\tif(!obj) { obj = this._data.core.selected.concat(); }\r\n\t\t\tif(!$.isArray(obj)) { obj = [obj]; }\r\n\t\t\tif(!obj.length) { return false; }\r\n\t\t\tvar tmp = [], o, t1, t2;\r\n\t\t\tfor(t1 = 0, t2 = obj.length; t1 < t2; t1++) {\r\n\t\t\t\to = this.get_node(obj[t1]);\r\n\t\t\t\tif(o && o.id && o.id !== $.jstree.root) { tmp.push(o); }\r\n\t\t\t}\r\n\t\t\tif(!tmp.length) { return false; }\r\n\t\t\tccp_node = tmp;\r\n\t\t\tccp_inst = this;\r\n\t\t\tccp_mode = 'move_node';\r\n\t\t\t/**\r\n\t\t\t * triggered when nodes are added to the buffer for moving\r\n\t\t\t * @event\r\n\t\t\t * @name cut.jstree\r\n\t\t\t * @param {Array} node\r\n\t\t\t */\r\n\t\t\tthis.trigger('cut', { \"node\" : obj });\r\n\t\t},\r\n\t\t/**\r\n\t\t * copy a node (a later call to `paste(obj)` would copy the node)\r\n\t\t * @name copy(obj)\r\n\t\t * @param  {mixed} obj multiple objects can be passed using an array\r\n\t\t * @trigger copy.jstree\r\n\t\t */\r\n\t\tcopy : function (obj) {\r\n\t\t\tif(!obj) { obj = this._data.core.selected.concat(); }\r\n\t\t\tif(!$.isArray(obj)) { obj = [obj]; }\r\n\t\t\tif(!obj.length) { return false; }\r\n\t\t\tvar tmp = [], o, t1, t2;\r\n\t\t\tfor(t1 = 0, t2 = obj.length; t1 < t2; t1++) {\r\n\t\t\t\to = this.get_node(obj[t1]);\r\n\t\t\t\tif(o && o.id && o.id !== $.jstree.root) { tmp.push(o); }\r\n\t\t\t}\r\n\t\t\tif(!tmp.length) { return false; }\r\n\t\t\tccp_node = tmp;\r\n\t\t\tccp_inst = this;\r\n\t\t\tccp_mode = 'copy_node';\r\n\t\t\t/**\r\n\t\t\t * triggered when nodes are added to the buffer for copying\r\n\t\t\t * @event\r\n\t\t\t * @name copy.jstree\r\n\t\t\t * @param {Array} node\r\n\t\t\t */\r\n\t\t\tthis.trigger('copy', { \"node\" : obj });\r\n\t\t},\r\n\t\t/**\r\n\t\t * get the current buffer (any nodes that are waiting for a paste operation)\r\n\t\t * @name get_buffer()\r\n\t\t * @return {Object} an object consisting of `mode` (\"copy_node\" or \"move_node\"), `node` (an array of objects) and `inst` (the instance)\r\n\t\t */\r\n\t\tget_buffer : function () {\r\n\t\t\treturn { 'mode' : ccp_mode, 'node' : ccp_node, 'inst' : ccp_inst };\r\n\t\t},\r\n\t\t/**\r\n\t\t * check if there is something in the buffer to paste\r\n\t\t * @name can_paste()\r\n\t\t * @return {Boolean}\r\n\t\t */\r\n\t\tcan_paste : function () {\r\n\t\t\treturn ccp_mode !== false && ccp_node !== false; // && ccp_inst._model.data[ccp_node];\r\n\t\t},\r\n\t\t/**\r\n\t\t * copy or move the previously cut or copied nodes to a new parent\r\n\t\t * @name paste(obj [, pos])\r\n\t\t * @param  {mixed} obj the new parent\r\n\t\t * @param  {mixed} pos the position to insert at (besides integer, \"first\" and \"last\" are supported), defaults to integer `0`\r\n\t\t * @trigger paste.jstree\r\n\t\t */\r\n\t\tpaste : function (obj, pos) {\r\n\t\t\tobj = this.get_node(obj);\r\n\t\t\tif(!obj || !ccp_mode || !ccp_mode.match(/^(copy_node|move_node)$/) || !ccp_node) { return false; }\r\n\t\t\tif(this[ccp_mode](ccp_node, obj, pos, false, false, false, ccp_inst)) {\r\n\t\t\t\t/**\r\n\t\t\t\t * triggered when paste is invoked\r\n\t\t\t\t * @event\r\n\t\t\t\t * @name paste.jstree\r\n\t\t\t\t * @param {String} parent the ID of the receiving node\r\n\t\t\t\t * @param {Array} node the nodes in the buffer\r\n\t\t\t\t * @param {String} mode the performed operation - \"copy_node\" or \"move_node\"\r\n\t\t\t\t */\r\n\t\t\t\tthis.trigger('paste', { \"parent\" : obj.id, \"node\" : ccp_node, \"mode\" : ccp_mode });\r\n\t\t\t}\r\n\t\t\tccp_node = false;\r\n\t\t\tccp_mode = false;\r\n\t\t\tccp_inst = false;\r\n\t\t},\r\n\t\t/**\r\n\t\t * clear the buffer of previously copied or cut nodes\r\n\t\t * @name clear_buffer()\r\n\t\t * @trigger clear_buffer.jstree\r\n\t\t */\r\n\t\tclear_buffer : function () {\r\n\t\t\tccp_node = false;\r\n\t\t\tccp_mode = false;\r\n\t\t\tccp_inst = false;\r\n\t\t\t/**\r\n\t\t\t * triggered when the copy / cut buffer is cleared\r\n\t\t\t * @event\r\n\t\t\t * @name clear_buffer.jstree\r\n\t\t\t */\r\n\t\t\tthis.trigger('clear_buffer');\r\n\t\t},\r\n\t\t/**\r\n\t\t * put a node in edit mode (input field to rename the node)\r\n\t\t * @name edit(obj [, default_text, callback])\r\n\t\t * @param  {mixed} obj\r\n\t\t * @param  {String} default_text the text to populate the input with (if omitted or set to a non-string value the node's text value is used)\r\n\t\t * @param  {Function} callback a function to be called once the text box is blurred, it is called in the instance's scope and receives the node, a status parameter (true if the rename is successful, false otherwise) and a boolean indicating if the user cancelled the edit. You can access the node's title using .text\r\n\t\t */\r\n\t\tedit : function (obj, default_text, callback) {\r\n\t\t\tvar rtl, w, a, s, t, h1, h2, fn, tmp, cancel = false;\r\n\t\t\tobj = this.get_node(obj);\r\n\t\t\tif(!obj) { return false; }\r\n\t\t\tif(!this.check(\"edit\", obj, this.get_parent(obj))) {\r\n\t\t\t\tthis.settings.core.error.call(this, this._data.core.last_error);\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\ttmp = obj;\r\n\t\t\tdefault_text = typeof default_text === 'string' ? default_text : obj.text;\r\n\t\t\tthis.set_text(obj, \"\");\r\n\t\t\tobj = this._open_to(obj);\r\n\t\t\ttmp.text = default_text;\r\n\r\n\t\t\trtl = this._data.core.rtl;\r\n\t\t\tw  = this.element.width();\r\n\t\t\tthis._data.core.focused = tmp.id;\r\n\t\t\ta  = obj.children('.jstree-anchor').focus();\r\n\t\t\ts  = $('<span>');\r\n\t\t\t/*!\r\n\t\t\toi = obj.children(\"i:visible\"),\r\n\t\t\tai = a.children(\"i:visible\"),\r\n\t\t\tw1 = oi.width() * oi.length,\r\n\t\t\tw2 = ai.width() * ai.length,\r\n\t\t\t*/\r\n\t\t\tt  = default_text;\r\n\t\t\th1 = $(\"<\"+\"div />\", { css : { \"position\" : \"absolute\", \"top\" : \"-200px\", \"left\" : (rtl ? \"0px\" : \"-1000px\"), \"visibility\" : \"hidden\" } }).appendTo(document.body);\r\n\t\t\th2 = $(\"<\"+\"input />\", {\r\n\t\t\t\t\t\t\"value\" : t,\r\n\t\t\t\t\t\t\"class\" : \"jstree-rename-input\",\r\n\t\t\t\t\t\t// \"size\" : t.length,\r\n\t\t\t\t\t\t\"css\" : {\r\n\t\t\t\t\t\t\t\"padding\" : \"0\",\r\n\t\t\t\t\t\t\t\"border\" : \"1px solid silver\",\r\n\t\t\t\t\t\t\t\"box-sizing\" : \"border-box\",\r\n\t\t\t\t\t\t\t\"display\" : \"inline-block\",\r\n\t\t\t\t\t\t\t\"height\" : (this._data.core.li_height) + \"px\",\r\n\t\t\t\t\t\t\t\"lineHeight\" : (this._data.core.li_height) + \"px\",\r\n\t\t\t\t\t\t\t\"width\" : \"150px\" // will be set a bit further down\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\"blur\" : $.proxy(function (e) {\r\n\t\t\t\t\t\t\te.stopImmediatePropagation();\r\n\t\t\t\t\t\t\te.preventDefault();\r\n\t\t\t\t\t\t\tvar i = s.children(\".jstree-rename-input\"),\r\n\t\t\t\t\t\t\t\tv = i.val(),\r\n\t\t\t\t\t\t\t\tf = this.settings.core.force_text,\r\n\t\t\t\t\t\t\t\tnv;\r\n\t\t\t\t\t\t\tif(v === \"\") { v = t; }\r\n\t\t\t\t\t\t\th1.remove();\r\n\t\t\t\t\t\t\ts.replaceWith(a);\r\n\t\t\t\t\t\t\ts.remove();\r\n\t\t\t\t\t\t\tt = f ? t : $('<div></div>').append($.parseHTML(t)).html();\r\n\t\t\t\t\t\t\tthis.set_text(obj, t);\r\n\t\t\t\t\t\t\tnv = !!this.rename_node(obj, f ? $('<div></div>').text(v).text() : $('<div></div>').append($.parseHTML(v)).html());\r\n\t\t\t\t\t\t\tif(!nv) {\r\n\t\t\t\t\t\t\t\tthis.set_text(obj, t); // move this up? and fix #483\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tthis._data.core.focused = tmp.id;\r\n\t\t\t\t\t\t\tsetTimeout($.proxy(function () {\r\n\t\t\t\t\t\t\t\tvar node = this.get_node(tmp.id, true);\r\n\t\t\t\t\t\t\t\tif(node.length) {\r\n\t\t\t\t\t\t\t\t\tthis._data.core.focused = tmp.id;\r\n\t\t\t\t\t\t\t\t\tnode.children('.jstree-anchor').focus();\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}, this), 0);\r\n\t\t\t\t\t\t\tif(callback) {\r\n\t\t\t\t\t\t\t\tcallback.call(this, tmp, nv, cancel);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\th2 = null;\r\n\t\t\t\t\t\t}, this),\r\n\t\t\t\t\t\t\"keydown\" : function (e) {\r\n\t\t\t\t\t\t\tvar key = e.which;\r\n\t\t\t\t\t\t\tif(key === 27) {\r\n\t\t\t\t\t\t\t\tcancel = true;\r\n\t\t\t\t\t\t\t\tthis.value = t;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif(key === 27 || key === 13 || key === 37 || key === 38 || key === 39 || key === 40 || key === 32) {\r\n\t\t\t\t\t\t\t\te.stopImmediatePropagation();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif(key === 27 || key === 13) {\r\n\t\t\t\t\t\t\t\te.preventDefault();\r\n\t\t\t\t\t\t\t\tthis.blur();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\"click\" : function (e) { e.stopImmediatePropagation(); },\r\n\t\t\t\t\t\t\"mousedown\" : function (e) { e.stopImmediatePropagation(); },\r\n\t\t\t\t\t\t\"keyup\" : function (e) {\r\n\t\t\t\t\t\t\th2.width(Math.min(h1.text(\"pW\" + this.value).width(),w));\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\"keypress\" : function(e) {\r\n\t\t\t\t\t\t\tif(e.which === 13) { return false; }\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\tfn = {\r\n\t\t\t\t\t\tfontFamily\t\t: a.css('fontFamily')\t\t|| '',\r\n\t\t\t\t\t\tfontSize\t\t: a.css('fontSize')\t\t\t|| '',\r\n\t\t\t\t\t\tfontWeight\t\t: a.css('fontWeight')\t\t|| '',\r\n\t\t\t\t\t\tfontStyle\t\t: a.css('fontStyle')\t\t|| '',\r\n\t\t\t\t\t\tfontStretch\t\t: a.css('fontStretch')\t\t|| '',\r\n\t\t\t\t\t\tfontVariant\t\t: a.css('fontVariant')\t\t|| '',\r\n\t\t\t\t\t\tletterSpacing\t: a.css('letterSpacing')\t|| '',\r\n\t\t\t\t\t\twordSpacing\t\t: a.css('wordSpacing')\t\t|| ''\r\n\t\t\t\t};\r\n\t\t\ts.attr('class', a.attr('class')).append(a.contents().clone()).append(h2);\r\n\t\t\ta.replaceWith(s);\r\n\t\t\th1.css(fn);\r\n\t\t\th2.css(fn).width(Math.min(h1.text(\"pW\" + h2[0].value).width(),w))[0].select();\r\n\t\t\t$(document).one('mousedown.jstree touchstart.jstree dnd_start.vakata', function (e) {\r\n\t\t\t\tif (h2 && e.target !== h2) {\r\n\t\t\t\t\t$(h2).blur();\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t},\r\n\r\n\r\n\t\t/**\r\n\t\t * changes the theme\r\n\t\t * @name set_theme(theme_name [, theme_url])\r\n\t\t * @param {String} theme_name the name of the new theme to apply\r\n\t\t * @param {mixed} theme_url  the location of the CSS file for this theme. Omit or set to `false` if you manually included the file. Set to `true` to autoload from the `core.themes.dir` directory.\r\n\t\t * @trigger set_theme.jstree\r\n\t\t */\r\n\t\tset_theme : function (theme_name, theme_url) {\r\n\t\t\tif(!theme_name) { return false; }\r\n\t\t\tif(theme_url === true) {\r\n\t\t\t\tvar dir = this.settings.core.themes.dir;\r\n\t\t\t\tif(!dir) { dir = $.jstree.path + '/themes'; }\r\n\t\t\t\ttheme_url = dir + '/' + theme_name + '/style.css';\r\n\t\t\t}\r\n\t\t\tif(theme_url && $.inArray(theme_url, themes_loaded) === -1) {\r\n\t\t\t\t$('head').append('<'+'link rel=\"stylesheet\" href=\"' + theme_url + '\" type=\"text/css\" />');\r\n\t\t\t\tthemes_loaded.push(theme_url);\r\n\t\t\t}\r\n\t\t\tif(this._data.core.themes.name) {\r\n\t\t\t\tthis.element.removeClass('jstree-' + this._data.core.themes.name);\r\n\t\t\t}\r\n\t\t\tthis._data.core.themes.name = theme_name;\r\n\t\t\tthis.element.addClass('jstree-' + theme_name);\r\n\t\t\tthis.element[this.settings.core.themes.responsive ? 'addClass' : 'removeClass' ]('jstree-' + theme_name + '-responsive');\r\n\t\t\t/**\r\n\t\t\t * triggered when a theme is set\r\n\t\t\t * @event\r\n\t\t\t * @name set_theme.jstree\r\n\t\t\t * @param {String} theme the new theme\r\n\t\t\t */\r\n\t\t\tthis.trigger('set_theme', { 'theme' : theme_name });\r\n\t\t},\r\n\t\t/**\r\n\t\t * gets the name of the currently applied theme name\r\n\t\t * @name get_theme()\r\n\t\t * @return {String}\r\n\t\t */\r\n\t\tget_theme : function () { return this._data.core.themes.name; },\r\n\t\t/**\r\n\t\t * changes the theme variant (if the theme has variants)\r\n\t\t * @name set_theme_variant(variant_name)\r\n\t\t * @param {String|Boolean} variant_name the variant to apply (if `false` is used the current variant is removed)\r\n\t\t */\r\n\t\tset_theme_variant : function (variant_name) {\r\n\t\t\tif(this._data.core.themes.variant) {\r\n\t\t\t\tthis.element.removeClass('jstree-' + this._data.core.themes.name + '-' + this._data.core.themes.variant);\r\n\t\t\t}\r\n\t\t\tthis._data.core.themes.variant = variant_name;\r\n\t\t\tif(variant_name) {\r\n\t\t\t\tthis.element.addClass('jstree-' + this._data.core.themes.name + '-' + this._data.core.themes.variant);\r\n\t\t\t}\r\n\t\t},\r\n\t\t/**\r\n\t\t * gets the name of the currently applied theme variant\r\n\t\t * @name get_theme()\r\n\t\t * @return {String}\r\n\t\t */\r\n\t\tget_theme_variant : function () { return this._data.core.themes.variant; },\r\n\t\t/**\r\n\t\t * shows a striped background on the container (if the theme supports it)\r\n\t\t * @name show_stripes()\r\n\t\t */\r\n\t\tshow_stripes : function () {\r\n\t\t\tthis._data.core.themes.stripes = true;\r\n\t\t\tthis.get_container_ul().addClass(\"jstree-striped\");\r\n\t\t\t/**\r\n\t\t\t * triggered when stripes are shown\r\n\t\t\t * @event\r\n\t\t\t * @name show_stripes.jstree\r\n\t\t\t */\r\n\t\t\tthis.trigger('show_stripes');\r\n\t\t},\r\n\t\t/**\r\n\t\t * hides the striped background on the container\r\n\t\t * @name hide_stripes()\r\n\t\t */\r\n\t\thide_stripes : function () {\r\n\t\t\tthis._data.core.themes.stripes = false;\r\n\t\t\tthis.get_container_ul().removeClass(\"jstree-striped\");\r\n\t\t\t/**\r\n\t\t\t * triggered when stripes are hidden\r\n\t\t\t * @event\r\n\t\t\t * @name hide_stripes.jstree\r\n\t\t\t */\r\n\t\t\tthis.trigger('hide_stripes');\r\n\t\t},\r\n\t\t/**\r\n\t\t * toggles the striped background on the container\r\n\t\t * @name toggle_stripes()\r\n\t\t */\r\n\t\ttoggle_stripes : function () { if(this._data.core.themes.stripes) { this.hide_stripes(); } else { this.show_stripes(); } },\r\n\t\t/**\r\n\t\t * shows the connecting dots (if the theme supports it)\r\n\t\t * @name show_dots()\r\n\t\t */\r\n\t\tshow_dots : function () {\r\n\t\t\tthis._data.core.themes.dots = true;\r\n\t\t\tthis.get_container_ul().removeClass(\"jstree-no-dots\");\r\n\t\t\t/**\r\n\t\t\t * triggered when dots are shown\r\n\t\t\t * @event\r\n\t\t\t * @name show_dots.jstree\r\n\t\t\t */\r\n\t\t\tthis.trigger('show_dots');\r\n\t\t},\r\n\t\t/**\r\n\t\t * hides the connecting dots\r\n\t\t * @name hide_dots()\r\n\t\t */\r\n\t\thide_dots : function () {\r\n\t\t\tthis._data.core.themes.dots = false;\r\n\t\t\tthis.get_container_ul().addClass(\"jstree-no-dots\");\r\n\t\t\t/**\r\n\t\t\t * triggered when dots are hidden\r\n\t\t\t * @event\r\n\t\t\t * @name hide_dots.jstree\r\n\t\t\t */\r\n\t\t\tthis.trigger('hide_dots');\r\n\t\t},\r\n\t\t/**\r\n\t\t * toggles the connecting dots\r\n\t\t * @name toggle_dots()\r\n\t\t */\r\n\t\ttoggle_dots : function () { if(this._data.core.themes.dots) { this.hide_dots(); } else { this.show_dots(); } },\r\n\t\t/**\r\n\t\t * show the node icons\r\n\t\t * @name show_icons()\r\n\t\t */\r\n\t\tshow_icons : function () {\r\n\t\t\tthis._data.core.themes.icons = true;\r\n\t\t\tthis.get_container_ul().removeClass(\"jstree-no-icons\");\r\n\t\t\t/**\r\n\t\t\t * triggered when icons are shown\r\n\t\t\t * @event\r\n\t\t\t * @name show_icons.jstree\r\n\t\t\t */\r\n\t\t\tthis.trigger('show_icons');\r\n\t\t},\r\n\t\t/**\r\n\t\t * hide the node icons\r\n\t\t * @name hide_icons()\r\n\t\t */\r\n\t\thide_icons : function () {\r\n\t\t\tthis._data.core.themes.icons = false;\r\n\t\t\tthis.get_container_ul().addClass(\"jstree-no-icons\");\r\n\t\t\t/**\r\n\t\t\t * triggered when icons are hidden\r\n\t\t\t * @event\r\n\t\t\t * @name hide_icons.jstree\r\n\t\t\t */\r\n\t\t\tthis.trigger('hide_icons');\r\n\t\t},\r\n\t\t/**\r\n\t\t * toggle the node icons\r\n\t\t * @name toggle_icons()\r\n\t\t */\r\n\t\ttoggle_icons : function () { if(this._data.core.themes.icons) { this.hide_icons(); } else { this.show_icons(); } },\r\n\t\t/**\r\n\t\t * show the node ellipsis\r\n\t\t * @name show_icons()\r\n\t\t */\r\n\t\tshow_ellipsis : function () {\r\n\t\t\tthis._data.core.themes.ellipsis = true;\r\n\t\t\tthis.get_container_ul().addClass(\"jstree-ellipsis\");\r\n\t\t\t/**\r\n\t\t\t * triggered when ellisis is shown\r\n\t\t\t * @event\r\n\t\t\t * @name show_ellipsis.jstree\r\n\t\t\t */\r\n\t\t\tthis.trigger('show_ellipsis');\r\n\t\t},\r\n\t\t/**\r\n\t\t * hide the node ellipsis\r\n\t\t * @name hide_ellipsis()\r\n\t\t */\r\n\t\thide_ellipsis : function () {\r\n\t\t\tthis._data.core.themes.ellipsis = false;\r\n\t\t\tthis.get_container_ul().removeClass(\"jstree-ellipsis\");\r\n\t\t\t/**\r\n\t\t\t * triggered when ellisis is hidden\r\n\t\t\t * @event\r\n\t\t\t * @name hide_ellipsis.jstree\r\n\t\t\t */\r\n\t\t\tthis.trigger('hide_ellipsis');\r\n\t\t},\r\n\t\t/**\r\n\t\t * toggle the node ellipsis\r\n\t\t * @name toggle_icons()\r\n\t\t */\r\n\t\ttoggle_ellipsis : function () { if(this._data.core.themes.ellipsis) { this.hide_ellipsis(); } else { this.show_ellipsis(); } },\r\n\t\t/**\r\n\t\t * set the node icon for a node\r\n\t\t * @name set_icon(obj, icon)\r\n\t\t * @param {mixed} obj\r\n\t\t * @param {String} icon the new icon - can be a path to an icon or a className, if using an image that is in the current directory use a `./` prefix, otherwise it will be detected as a class\r\n\t\t */\r\n\t\tset_icon : function (obj, icon) {\r\n\t\t\tvar t1, t2, dom, old;\r\n\t\t\tif($.isArray(obj)) {\r\n\t\t\t\tobj = obj.slice();\r\n\t\t\t\tfor(t1 = 0, t2 = obj.length; t1 < t2; t1++) {\r\n\t\t\t\t\tthis.set_icon(obj[t1], icon);\r\n\t\t\t\t}\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\tobj = this.get_node(obj);\r\n\t\t\tif(!obj || obj.id === $.jstree.root) { return false; }\r\n\t\t\told = obj.icon;\r\n\t\t\tobj.icon = icon === true || icon === null || icon === undefined || icon === '' ? true : icon;\r\n\t\t\tdom = this.get_node(obj, true).children(\".jstree-anchor\").children(\".jstree-themeicon\");\r\n\t\t\tif(icon === false) {\r\n\t\t\t\tdom.removeClass('jstree-themeicon-custom ' + old).css(\"background\",\"\").removeAttr(\"rel\");\r\n\t\t\t\tthis.hide_icon(obj);\r\n\t\t\t}\r\n\t\t\telse if(icon === true || icon === null || icon === undefined || icon === '') {\r\n\t\t\t\tdom.removeClass('jstree-themeicon-custom ' + old).css(\"background\",\"\").removeAttr(\"rel\");\r\n\t\t\t\tif(old === false) { this.show_icon(obj); }\r\n\t\t\t}\r\n\t\t\telse if(icon.indexOf(\"/\") === -1 && icon.indexOf(\".\") === -1) {\r\n\t\t\t\tdom.removeClass(old).css(\"background\",\"\");\r\n\t\t\t\tdom.addClass(icon + ' jstree-themeicon-custom').attr(\"rel\",icon);\r\n\t\t\t\tif(old === false) { this.show_icon(obj); }\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tdom.removeClass(old).css(\"background\",\"\");\r\n\t\t\t\tdom.addClass('jstree-themeicon-custom').css(\"background\", \"url('\" + icon + \"') center center no-repeat\").attr(\"rel\",icon);\r\n\t\t\t\tif(old === false) { this.show_icon(obj); }\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t},\r\n\t\t/**\r\n\t\t * get the node icon for a node\r\n\t\t * @name get_icon(obj)\r\n\t\t * @param {mixed} obj\r\n\t\t * @return {String}\r\n\t\t */\r\n\t\tget_icon : function (obj) {\r\n\t\t\tobj = this.get_node(obj);\r\n\t\t\treturn (!obj || obj.id === $.jstree.root) ? false : obj.icon;\r\n\t\t},\r\n\t\t/**\r\n\t\t * hide the icon on an individual node\r\n\t\t * @name hide_icon(obj)\r\n\t\t * @param {mixed} obj\r\n\t\t */\r\n\t\thide_icon : function (obj) {\r\n\t\t\tvar t1, t2;\r\n\t\t\tif($.isArray(obj)) {\r\n\t\t\t\tobj = obj.slice();\r\n\t\t\t\tfor(t1 = 0, t2 = obj.length; t1 < t2; t1++) {\r\n\t\t\t\t\tthis.hide_icon(obj[t1]);\r\n\t\t\t\t}\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\tobj = this.get_node(obj);\r\n\t\t\tif(!obj || obj === $.jstree.root) { return false; }\r\n\t\t\tobj.icon = false;\r\n\t\t\tthis.get_node(obj, true).children(\".jstree-anchor\").children(\".jstree-themeicon\").addClass('jstree-themeicon-hidden');\r\n\t\t\treturn true;\r\n\t\t},\r\n\t\t/**\r\n\t\t * show the icon on an individual node\r\n\t\t * @name show_icon(obj)\r\n\t\t * @param {mixed} obj\r\n\t\t */\r\n\t\tshow_icon : function (obj) {\r\n\t\t\tvar t1, t2, dom;\r\n\t\t\tif($.isArray(obj)) {\r\n\t\t\t\tobj = obj.slice();\r\n\t\t\t\tfor(t1 = 0, t2 = obj.length; t1 < t2; t1++) {\r\n\t\t\t\t\tthis.show_icon(obj[t1]);\r\n\t\t\t\t}\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\tobj = this.get_node(obj);\r\n\t\t\tif(!obj || obj === $.jstree.root) { return false; }\r\n\t\t\tdom = this.get_node(obj, true);\r\n\t\t\tobj.icon = dom.length ? dom.children(\".jstree-anchor\").children(\".jstree-themeicon\").attr('rel') : true;\r\n\t\t\tif(!obj.icon) { obj.icon = true; }\r\n\t\t\tdom.children(\".jstree-anchor\").children(\".jstree-themeicon\").removeClass('jstree-themeicon-hidden');\r\n\t\t\treturn true;\r\n\t\t}\r\n\t});\r\n\r\n\t// helpers\r\n\t$.vakata = {};\r\n\r\n\t$.vakata.search = function(pattern, txt, options) {\r\n\t\toptions = options || {};\r\n\t\tif(options.fuzzy !== false) {\r\n\t\t\toptions.fuzzy = true;\r\n\t\t}\r\n\t\tpattern = options.caseSensitive ? pattern : pattern.toLowerCase();\r\n\t\tvar MATCH_LOCATION\t= options.location || 0,\r\n\t\t\tMATCH_DISTANCE\t= options.distance || 100,\r\n\t\t\tMATCH_THRESHOLD\t= options.threshold || 0.6,\r\n\t\t\tpatternLen = pattern.length;\r\n\t\tif(patternLen > 32) {\r\n\t\t\toptions.fuzzy = false;\r\n\t\t}\r\n\t\tif(options.fuzzy) {\r\n\t\t\tvar matchmask = 1 << (patternLen - 1);\r\n\t\t\tvar pattern_alphabet = (function () {\r\n\t\t\t\tvar mask = {},\r\n\t\t\t\t\ti = 0;\r\n\t\t\t\tfor (i = 0; i < patternLen; i++) {\r\n\t\t\t\t\tmask[pattern.charAt(i)] = 0;\r\n\t\t\t\t}\r\n\t\t\t\tfor (i = 0; i < patternLen; i++) {\r\n\t\t\t\t\tmask[pattern.charAt(i)] |= 1 << (patternLen - i - 1);\r\n\t\t\t\t}\r\n\t\t\t\treturn mask;\r\n\t\t\t})();\r\n\t\t\tvar match_bitapScore = function (e, x) {\r\n\t\t\t\tvar accuracy = e / patternLen,\r\n\t\t\t\t\tproximity = Math.abs(MATCH_LOCATION - x);\r\n\t\t\t\tif(!MATCH_DISTANCE) {\r\n\t\t\t\t\treturn proximity ? 1.0 : accuracy;\r\n\t\t\t\t}\r\n\t\t\t\treturn accuracy + (proximity / MATCH_DISTANCE);\r\n\t\t\t};\r\n\t\t}\r\n\t\tvar search = function (text) {\r\n\t\t\ttext = options.caseSensitive ? text : text.toLowerCase();\r\n\t\t\tif(pattern === text || text.indexOf(pattern) !== -1) {\r\n\t\t\t\treturn {\r\n\t\t\t\t\tisMatch: true,\r\n\t\t\t\t\tscore: 0\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t\tif(!options.fuzzy) {\r\n\t\t\t\treturn {\r\n\t\t\t\t\tisMatch: false,\r\n\t\t\t\t\tscore: 1\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t\tvar i, j,\r\n\t\t\t\ttextLen = text.length,\r\n\t\t\t\tscoreThreshold = MATCH_THRESHOLD,\r\n\t\t\t\tbestLoc = text.indexOf(pattern, MATCH_LOCATION),\r\n\t\t\t\tbinMin, binMid,\r\n\t\t\t\tbinMax = patternLen + textLen,\r\n\t\t\t\tlastRd, start, finish, rd, charMatch,\r\n\t\t\t\tscore = 1,\r\n\t\t\t\tlocations = [];\r\n\t\t\tif (bestLoc != -1) {\r\n\t\t\t\tscoreThreshold = Math.min(match_bitapScore(0, bestLoc), scoreThreshold);\r\n\t\t\t\tbestLoc = text.lastIndexOf(pattern, MATCH_LOCATION + patternLen);\r\n\t\t\t\tif (bestLoc != -1) {\r\n\t\t\t\t\tscoreThreshold = Math.min(match_bitapScore(0, bestLoc), scoreThreshold);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tbestLoc = -1;\r\n\t\t\tfor (i = 0; i < patternLen; i++) {\r\n\t\t\t\tbinMin = 0;\r\n\t\t\t\tbinMid = binMax;\r\n\t\t\t\twhile (binMin < binMid) {\r\n\t\t\t\t\tif (match_bitapScore(i, MATCH_LOCATION + binMid) <= scoreThreshold) {\r\n\t\t\t\t\t\tbinMin = binMid;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tbinMax = binMid;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbinMid = Math.floor((binMax - binMin) / 2 + binMin);\r\n\t\t\t\t}\r\n\t\t\t\tbinMax = binMid;\r\n\t\t\t\tstart = Math.max(1, MATCH_LOCATION - binMid + 1);\r\n\t\t\t\tfinish = Math.min(MATCH_LOCATION + binMid, textLen) + patternLen;\r\n\t\t\t\trd = Array(finish + 2);\r\n\t\t\t\trd[finish + 1] = (1 << i) - 1;\r\n\t\t\t\tfor (j = finish; j >= start; j--) {\r\n\t\t\t\t\tcharMatch = pattern_alphabet[text.charAt(j - 1)];\r\n\t\t\t\t\tif (i === 0) {\r\n\t\t\t\t\t\trd[j] = ((rd[j + 1] << 1) | 1) & charMatch;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\trd[j] = ((rd[j + 1] << 1) | 1) & charMatch | (((lastRd[j + 1] | lastRd[j]) << 1) | 1) | lastRd[j + 1];\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (rd[j] & matchmask) {\r\n\t\t\t\t\t\tscore = match_bitapScore(i, j - 1);\r\n\t\t\t\t\t\tif (score <= scoreThreshold) {\r\n\t\t\t\t\t\t\tscoreThreshold = score;\r\n\t\t\t\t\t\t\tbestLoc = j - 1;\r\n\t\t\t\t\t\t\tlocations.push(bestLoc);\r\n\t\t\t\t\t\t\tif (bestLoc > MATCH_LOCATION) {\r\n\t\t\t\t\t\t\t\tstart = Math.max(1, 2 * MATCH_LOCATION - bestLoc);\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (match_bitapScore(i + 1, MATCH_LOCATION) > scoreThreshold) {\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tlastRd = rd;\r\n\t\t\t}\r\n\t\t\treturn {\r\n\t\t\t\tisMatch: bestLoc >= 0,\r\n\t\t\t\tscore: score\r\n\t\t\t};\r\n\t\t};\r\n\t\treturn txt === true ? { 'search' : search } : search(txt);\r\n\t};\r\n\r\n\t// collect attributes\r\n\t$.vakata.attributes = function(node, with_values) {\r\n\t\tnode = $(node)[0];\r\n\t\tvar attr = with_values ? {} : [];\r\n\t\tif(node && node.attributes) {\r\n\t\t\t$.each(node.attributes, function (i, v) {\r\n\t\t\t\tif($.inArray(v.name.toLowerCase(),['style','contenteditable','hasfocus','tabindex']) !== -1) { return; }\r\n\t\t\t\tif(v.value !== null && $.trim(v.value) !== '') {\r\n\t\t\t\t\tif(with_values) { attr[v.name] = v.value; }\r\n\t\t\t\t\telse { attr.push(v.name); }\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t\treturn attr;\r\n\t};\r\n\t$.vakata.array_unique = function(array) {\r\n\t\tvar a = [], i, j, l, o = {};\r\n\t\tfor(i = 0, l = array.length; i < l; i++) {\r\n\t\t\tif(o[array[i]] === undefined) {\r\n\t\t\t\ta.push(array[i]);\r\n\t\t\t\to[array[i]] = true;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn a;\r\n\t};\r\n\t// remove item from array\r\n\t$.vakata.array_remove = function(array, from) {\r\n\t\tarray.splice(from, 1);\r\n\t\treturn array;\r\n\t\t//var rest = array.slice((to || from) + 1 || array.length);\r\n\t\t//array.length = from < 0 ? array.length + from : from;\r\n\t\t//array.push.apply(array, rest);\r\n\t\t//return array;\r\n\t};\r\n\t// remove item from array\r\n\t$.vakata.array_remove_item = function(array, item) {\r\n\t\tvar tmp = $.inArray(item, array);\r\n\t\treturn tmp !== -1 ? $.vakata.array_remove(array, tmp) : array;\r\n\t};\r\n\t$.vakata.array_filter = function(c,a,b,d,e) {\r\n\t\tif (c.filter) {\r\n\t\t\treturn c.filter(a, b);\r\n\t\t}\r\n\t\td=[];\r\n\t\tfor (e in c) {\r\n\t\t\tif (~~e+''===e+'' && e>=0 && a.call(b,c[e],+e,c)) {\r\n\t\t\t\td.push(c[e]);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn d;\r\n\t};\r\n\r\n\r\n\treturn Tree;\r\n\r\n});\r\n\ndefine('skylark-jstree/plugin/changed',[\r\n  \"skylark-langx/langx\",\r\n  \"skylark-utils-dom/browser\",\r\n  \"skylark-utils-dom/eventer\",\r\n  \"skylark-utils-dom/noder\",\r\n  \"skylark-utils-dom/geom\",\r\n  \"skylark-utils-dom/query\",\r\n  \"../tree\"\r\n],function(langx,browser,eventer,noder,geom,$,jstree){\r\n\t\"use strict\";\r\n\r\n\tif($.jstree.plugins.changed) { return; }\r\n\r\n\t$.jstree.plugins.changed = function (options, parent) {\r\n\t\tvar last = [];\r\n\t\tthis.trigger = function (ev, data) {\r\n\t\t\tvar i, j;\r\n\t\t\tif(!data) {\r\n\t\t\t\tdata = {};\r\n\t\t\t}\r\n\t\t\tif(ev.replace('.jstree','') === 'changed') {\r\n\t\t\t\tdata.changed = { selected : [], deselected : [] };\r\n\t\t\t\tvar tmp = {};\r\n\t\t\t\tfor(i = 0, j = last.length; i < j; i++) {\r\n\t\t\t\t\ttmp[last[i]] = 1;\r\n\t\t\t\t}\r\n\t\t\t\tfor(i = 0, j = data.selected.length; i < j; i++) {\r\n\t\t\t\t\tif(!tmp[data.selected[i]]) {\r\n\t\t\t\t\t\tdata.changed.selected.push(data.selected[i]);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\ttmp[data.selected[i]] = 2;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tfor(i = 0, j = last.length; i < j; i++) {\r\n\t\t\t\t\tif(tmp[last[i]] === 1) {\r\n\t\t\t\t\t\tdata.changed.deselected.push(last[i]);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tlast = data.selected.slice();\r\n\t\t\t}\r\n\t\t\t/**\r\n\t\t\t * triggered when selection changes (the \"changed\" plugin enhances the original event with more data)\r\n\t\t\t * @event\r\n\t\t\t * @name changed.jstree\r\n\t\t\t * @param {Object} node\r\n\t\t\t * @param {Object} action the action that caused the selection to change\r\n\t\t\t * @param {Array} selected the current selection\r\n\t\t\t * @param {Object} changed an object containing two properties `selected` and `deselected` - both arrays of node IDs, which were selected or deselected since the last changed event\r\n\t\t\t * @param {Object} event the event (if any) that triggered this changed event\r\n\t\t\t * @plugin changed\r\n\t\t\t */\r\n\t\t\tparent.trigger.call(this, ev, data);\r\n\t\t};\r\n\t\tthis.refresh = function (skip_loading, forget_state) {\r\n\t\t\tlast = [];\r\n\t\t\treturn parent.refresh.apply(this, arguments);\r\n\t\t};\r\n\t};\r\n\r\n\treturn $;\r\n});\ndefine('skylark-jstree/plugin/checkbox',[\r\n  \"skylark-langx/langx\",\r\n  \"skylark-utils-dom/browser\",\r\n  \"skylark-utils-dom/eventer\",\r\n  \"skylark-utils-dom/noder\",\r\n  \"skylark-utils-dom/geom\",\r\n  \"skylark-utils-dom/query\",\r\n  \"../tree\"\r\n],function(langx,browser,eventer,noder,geom,$,jstree){\r\n\t\"use strict\";\r\n\r\n\tif($.jstree.plugins.checkbox) { return; }\r\n\r\n\tvar _i = document.createElement('I');\r\n\t_i.className = 'jstree-icon jstree-checkbox';\r\n\t_i.setAttribute('role', 'presentation');\r\n\t/**\r\n\t * stores all defaults for the checkbox plugin\r\n\t * @name $.jstree.defaults.checkbox\r\n\t * @plugin checkbox\r\n\t */\r\n\t$.jstree.defaults.checkbox = {\r\n\t\t/**\r\n\t\t * a boolean indicating if checkboxes should be visible (can be changed at a later time using `show_checkboxes()` and `hide_checkboxes`). Defaults to `true`.\r\n\t\t * @name $.jstree.defaults.checkbox.visible\r\n\t\t * @plugin checkbox\r\n\t\t */\r\n\t\tvisible\t\t\t\t: true,\r\n\t\t/**\r\n\t\t * a boolean indicating if checkboxes should cascade down and have an undetermined state. Defaults to `true`.\r\n\t\t * @name $.jstree.defaults.checkbox.three_state\r\n\t\t * @plugin checkbox\r\n\t\t */\r\n\t\tthree_state\t\t\t: true,\r\n\t\t/**\r\n\t\t * a boolean indicating if clicking anywhere on the node should act as clicking on the checkbox. Defaults to `true`.\r\n\t\t * @name $.jstree.defaults.checkbox.whole_node\r\n\t\t * @plugin checkbox\r\n\t\t */\r\n\t\twhole_node\t\t\t: true,\r\n\t\t/**\r\n\t\t * a boolean indicating if the selected style of a node should be kept, or removed. Defaults to `true`.\r\n\t\t * @name $.jstree.defaults.checkbox.keep_selected_style\r\n\t\t * @plugin checkbox\r\n\t\t */\r\n\t\tkeep_selected_style\t: true,\r\n\t\t/**\r\n\t\t * This setting controls how cascading and undetermined nodes are applied.\r\n\t\t * If 'up' is in the string - cascading up is enabled, if 'down' is in the string - cascading down is enabled, if 'undetermined' is in the string - undetermined nodes will be used.\r\n\t\t * If `three_state` is set to `true` this setting is automatically set to 'up+down+undetermined'. Defaults to ''.\r\n\t\t * @name $.jstree.defaults.checkbox.cascade\r\n\t\t * @plugin checkbox\r\n\t\t */\r\n\t\tcascade\t\t\t\t: '',\r\n\t\t/**\r\n\t\t * This setting controls if checkbox are bound to the general tree selection or to an internal array maintained by the checkbox plugin. Defaults to `true`, only set to `false` if you know exactly what you are doing.\r\n\t\t * @name $.jstree.defaults.checkbox.tie_selection\r\n\t\t * @plugin checkbox\r\n\t\t */\r\n\t\ttie_selection\t\t: true,\r\n\r\n\t\t/**\r\n\t\t * This setting controls if cascading down affects disabled checkboxes\r\n\t\t * @name $.jstree.defaults.checkbox.cascade_to_disabled\r\n\t\t * @plugin checkbox\r\n\t\t */\r\n\t\tcascade_to_disabled : true,\r\n\r\n\t\t/**\r\n\t\t * This setting controls if cascading down affects hidden checkboxes\r\n\t\t * @name $.jstree.defaults.checkbox.cascade_to_hidden\r\n\t\t * @plugin checkbox\r\n\t\t */\r\n\t\tcascade_to_hidden : true\r\n\t};\r\n\t$.jstree.plugins.checkbox = function (options, parent) {\r\n\t\tthis.bind = function () {\r\n\t\t\tparent.bind.call(this);\r\n\t\t\tthis._data.checkbox.uto = false;\r\n\t\t\tthis._data.checkbox.selected = [];\r\n\t\t\tif(this.settings.checkbox.three_state) {\r\n\t\t\t\tthis.settings.checkbox.cascade = 'up+down+undetermined';\r\n\t\t\t}\r\n\t\t\tthis.element\r\n\t\t\t\t.on(\"init.jstree\", $.proxy(function () {\r\n\t\t\t\t\t\tthis._data.checkbox.visible = this.settings.checkbox.visible;\r\n\t\t\t\t\t\tif(!this.settings.checkbox.keep_selected_style) {\r\n\t\t\t\t\t\t\tthis.element.addClass('jstree-checkbox-no-clicked');\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif(this.settings.checkbox.tie_selection) {\r\n\t\t\t\t\t\t\tthis.element.addClass('jstree-checkbox-selection');\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}, this))\r\n\t\t\t\t.on(\"loading.jstree\", $.proxy(function () {\r\n\t\t\t\t\t\tthis[ this._data.checkbox.visible ? 'show_checkboxes' : 'hide_checkboxes' ]();\r\n\t\t\t\t\t}, this));\r\n\t\t\tif(this.settings.checkbox.cascade.indexOf('undetermined') !== -1) {\r\n\t\t\t\tthis.element\r\n\t\t\t\t\t.on('changed.jstree uncheck_node.jstree check_node.jstree uncheck_all.jstree check_all.jstree move_node.jstree copy_node.jstree redraw.jstree open_node.jstree', $.proxy(function () {\r\n\t\t\t\t\t\t\t// only if undetermined is in setting\r\n\t\t\t\t\t\t\tif(this._data.checkbox.uto) { clearTimeout(this._data.checkbox.uto); }\r\n\t\t\t\t\t\t\tthis._data.checkbox.uto = setTimeout($.proxy(this._undetermined, this), 50);\r\n\t\t\t\t\t\t}, this));\r\n\t\t\t}\r\n\t\t\tif(!this.settings.checkbox.tie_selection) {\r\n\t\t\t\tthis.element\r\n\t\t\t\t\t.on('model.jstree', $.proxy(function (e, data) {\r\n\t\t\t\t\t\tvar m = this._model.data,\r\n\t\t\t\t\t\t\tp = m[data.parent],\r\n\t\t\t\t\t\t\tdpc = data.nodes,\r\n\t\t\t\t\t\t\ti, j;\r\n\t\t\t\t\t\tfor(i = 0, j = dpc.length; i < j; i++) {\r\n\t\t\t\t\t\t\tm[dpc[i]].state.checked = m[dpc[i]].state.checked || (m[dpc[i]].original && m[dpc[i]].original.state && m[dpc[i]].original.state.checked);\r\n\t\t\t\t\t\t\tif(m[dpc[i]].state.checked) {\r\n\t\t\t\t\t\t\t\tthis._data.checkbox.selected.push(dpc[i]);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}, this));\r\n\t\t\t}\r\n\t\t\tif(this.settings.checkbox.cascade.indexOf('up') !== -1 || this.settings.checkbox.cascade.indexOf('down') !== -1) {\r\n\t\t\t\tthis.element\r\n\t\t\t\t\t.on('model.jstree', $.proxy(function (e, data) {\r\n\t\t\t\t\t\t\tvar m = this._model.data,\r\n\t\t\t\t\t\t\t\tp = m[data.parent],\r\n\t\t\t\t\t\t\t\tdpc = data.nodes,\r\n\t\t\t\t\t\t\t\tchd = [],\r\n\t\t\t\t\t\t\t\tc, i, j, k, l, tmp, s = this.settings.checkbox.cascade, t = this.settings.checkbox.tie_selection;\r\n\r\n\t\t\t\t\t\t\tif(s.indexOf('down') !== -1) {\r\n\t\t\t\t\t\t\t\t// apply down\r\n\t\t\t\t\t\t\t\tif(p.state[ t ? 'selected' : 'checked' ]) {\r\n\t\t\t\t\t\t\t\t\tfor(i = 0, j = dpc.length; i < j; i++) {\r\n\t\t\t\t\t\t\t\t\t\tm[dpc[i]].state[ t ? 'selected' : 'checked' ] = true;\r\n\t\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\t\tthis._data[ t ? 'core' : 'checkbox' ].selected = this._data[ t ? 'core' : 'checkbox' ].selected.concat(dpc);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\tfor(i = 0, j = dpc.length; i < j; i++) {\r\n\t\t\t\t\t\t\t\t\t\tif(m[dpc[i]].state[ t ? 'selected' : 'checked' ]) {\r\n\t\t\t\t\t\t\t\t\t\t\tfor(k = 0, l = m[dpc[i]].children_d.length; k < l; k++) {\r\n\t\t\t\t\t\t\t\t\t\t\t\tm[m[dpc[i]].children_d[k]].state[ t ? 'selected' : 'checked' ] = true;\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\tthis._data[ t ? 'core' : 'checkbox' ].selected = this._data[ t ? 'core' : 'checkbox' ].selected.concat(m[dpc[i]].children_d);\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tif(s.indexOf('up') !== -1) {\r\n\t\t\t\t\t\t\t\t// apply up\r\n\t\t\t\t\t\t\t\tfor(i = 0, j = p.children_d.length; i < j; i++) {\r\n\t\t\t\t\t\t\t\t\tif(!m[p.children_d[i]].children.length) {\r\n\t\t\t\t\t\t\t\t\t\tchd.push(m[p.children_d[i]].parent);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tchd = $.vakata.array_unique(chd);\r\n\t\t\t\t\t\t\t\tfor(k = 0, l = chd.length; k < l; k++) {\r\n\t\t\t\t\t\t\t\t\tp = m[chd[k]];\r\n\t\t\t\t\t\t\t\t\twhile(p && p.id !== $.jstree.root) {\r\n\t\t\t\t\t\t\t\t\t\tc = 0;\r\n\t\t\t\t\t\t\t\t\t\tfor(i = 0, j = p.children.length; i < j; i++) {\r\n\t\t\t\t\t\t\t\t\t\t\tc += m[p.children[i]].state[ t ? 'selected' : 'checked' ];\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\tif(c === j) {\r\n\t\t\t\t\t\t\t\t\t\t\tp.state[ t ? 'selected' : 'checked' ] = true;\r\n\t\t\t\t\t\t\t\t\t\t\tthis._data[ t ? 'core' : 'checkbox' ].selected.push(p.id);\r\n\t\t\t\t\t\t\t\t\t\t\ttmp = this.get_node(p, true);\r\n\t\t\t\t\t\t\t\t\t\t\tif(tmp && tmp.length) {\r\n\t\t\t\t\t\t\t\t\t\t\t\ttmp.attr('aria-selected', true).children('.jstree-anchor').addClass( t ? 'jstree-clicked' : 'jstree-checked');\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\tp = this.get_node(p.parent);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tthis._data[ t ? 'core' : 'checkbox' ].selected = $.vakata.array_unique(this._data[ t ? 'core' : 'checkbox' ].selected);\r\n\t\t\t\t\t\t}, this))\r\n\t\t\t\t\t.on(this.settings.checkbox.tie_selection ? 'select_node.jstree' : 'check_node.jstree', $.proxy(function (e, data) {\r\n\t\t\t\t\t\t\tvar self = this,\r\n\t\t\t\t\t\t\t\tobj = data.node,\r\n\t\t\t\t\t\t\t\tm = this._model.data,\r\n\t\t\t\t\t\t\t\tpar = this.get_node(obj.parent),\r\n\t\t\t\t\t\t\t\ti, j, c, tmp, s = this.settings.checkbox.cascade, t = this.settings.checkbox.tie_selection,\r\n\t\t\t\t\t\t\t\tsel = {}, cur = this._data[ t ? 'core' : 'checkbox' ].selected;\r\n\r\n\t\t\t\t\t\t\tfor (i = 0, j = cur.length; i < j; i++) {\r\n\t\t\t\t\t\t\t\tsel[cur[i]] = true;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t// apply down\r\n\t\t\t\t\t\t\tif(s.indexOf('down') !== -1) {\r\n\t\t\t\t\t\t\t\t//this._data[ t ? 'core' : 'checkbox' ].selected = $.vakata.array_unique(this._data[ t ? 'core' : 'checkbox' ].selected.concat(obj.children_d));\r\n\t\t\t\t\t\t\t\tvar selectedIds = this._cascade_new_checked_state(obj.id, true);\r\n\t\t\t\t\t\t\t\tvar temp = obj.children_d.concat(obj.id);\r\n\t\t\t\t\t\t\t\tfor (i = 0, j = temp.length; i < j; i++) {\r\n\t\t\t\t\t\t\t\t\tif (selectedIds.indexOf(temp[i]) > -1) {\r\n\t\t\t\t\t\t\t\t\t\tsel[temp[i]] = true;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\t\tdelete sel[temp[i]];\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t// apply up\r\n\t\t\t\t\t\t\tif(s.indexOf('up') !== -1) {\r\n\t\t\t\t\t\t\t\twhile(par && par.id !== $.jstree.root) {\r\n\t\t\t\t\t\t\t\t\tc = 0;\r\n\t\t\t\t\t\t\t\t\tfor(i = 0, j = par.children.length; i < j; i++) {\r\n\t\t\t\t\t\t\t\t\t\tc += m[par.children[i]].state[ t ? 'selected' : 'checked' ];\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\tif(c === j) {\r\n\t\t\t\t\t\t\t\t\t\tpar.state[ t ? 'selected' : 'checked' ] = true;\r\n\t\t\t\t\t\t\t\t\t\tsel[par.id] = true;\r\n\t\t\t\t\t\t\t\t\t\t//this._data[ t ? 'core' : 'checkbox' ].selected.push(par.id);\r\n\t\t\t\t\t\t\t\t\t\ttmp = this.get_node(par, true);\r\n\t\t\t\t\t\t\t\t\t\tif(tmp && tmp.length) {\r\n\t\t\t\t\t\t\t\t\t\t\ttmp.attr('aria-selected', true).children('.jstree-anchor').addClass(t ? 'jstree-clicked' : 'jstree-checked');\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\tpar = this.get_node(par.parent);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tcur = [];\r\n\t\t\t\t\t\t\tfor (i in sel) {\r\n\t\t\t\t\t\t\t\tif (sel.hasOwnProperty(i)) {\r\n\t\t\t\t\t\t\t\t\tcur.push(i);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tthis._data[ t ? 'core' : 'checkbox' ].selected = cur;\r\n\t\t\t\t\t\t}, this))\r\n\t\t\t\t\t.on(this.settings.checkbox.tie_selection ? 'deselect_all.jstree' : 'uncheck_all.jstree', $.proxy(function (e, data) {\r\n\t\t\t\t\t\t\tvar obj = this.get_node($.jstree.root),\r\n\t\t\t\t\t\t\t\tm = this._model.data,\r\n\t\t\t\t\t\t\t\ti, j, tmp;\r\n\t\t\t\t\t\t\tfor(i = 0, j = obj.children_d.length; i < j; i++) {\r\n\t\t\t\t\t\t\t\ttmp = m[obj.children_d[i]];\r\n\t\t\t\t\t\t\t\tif(tmp && tmp.original && tmp.original.state && tmp.original.state.undetermined) {\r\n\t\t\t\t\t\t\t\t\ttmp.original.state.undetermined = false;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}, this))\r\n\t\t\t\t\t.on(this.settings.checkbox.tie_selection ? 'deselect_node.jstree' : 'uncheck_node.jstree', $.proxy(function (e, data) {\r\n\t\t\t\t\t\t\tvar self = this,\r\n\t\t\t\t\t\t\t\tobj = data.node,\r\n\t\t\t\t\t\t\t\tdom = this.get_node(obj, true),\r\n\t\t\t\t\t\t\t\ti, j, tmp, s = this.settings.checkbox.cascade, t = this.settings.checkbox.tie_selection,\r\n\t\t\t\t\t\t\t\tcur = this._data[ t ? 'core' : 'checkbox' ].selected, sel = {},\r\n\t\t\t\t\t\t\t\tstillSelectedIds = [],\r\n\t\t\t\t\t\t\t\tallIds = obj.children_d.concat(obj.id);\r\n\r\n\t\t\t\t\t\t\t// apply down\r\n\t\t\t\t\t\t\tif(s.indexOf('down') !== -1) {\r\n\t\t\t\t\t\t\t\tvar selectedIds = this._cascade_new_checked_state(obj.id, false);\r\n\r\n\t\t\t\t\t\t\t\tcur = cur.filter(function(id) {\r\n\t\t\t\t\t\t\t\t\treturn allIds.indexOf(id) === -1 || selectedIds.indexOf(id) > -1;\r\n\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t// only apply up if cascade up is enabled and if this node is not selected\r\n\t\t\t\t\t\t\t// (if all child nodes are disabled and cascade_to_disabled === false then this node will till be selected).\r\n\t\t\t\t\t\t\tif(s.indexOf('up') !== -1 && cur.indexOf(obj.id) === -1) {\r\n\t\t\t\t\t\t\t\tfor(i = 0, j = obj.parents.length; i < j; i++) {\r\n\t\t\t\t\t\t\t\t\ttmp = this._model.data[obj.parents[i]];\r\n\t\t\t\t\t\t\t\t\ttmp.state[ t ? 'selected' : 'checked' ] = false;\r\n\t\t\t\t\t\t\t\t\tif(tmp && tmp.original && tmp.original.state && tmp.original.state.undetermined) {\r\n\t\t\t\t\t\t\t\t\t\ttmp.original.state.undetermined = false;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\ttmp = this.get_node(obj.parents[i], true);\r\n\t\t\t\t\t\t\t\t\tif(tmp && tmp.length) {\r\n\t\t\t\t\t\t\t\t\t\ttmp.attr('aria-selected', false).children('.jstree-anchor').removeClass(t ? 'jstree-clicked' : 'jstree-checked');\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t\tcur = cur.filter(function(id) {\r\n\t\t\t\t\t\t\t\t\treturn obj.parents.indexOf(id) === -1;\r\n\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tthis._data[ t ? 'core' : 'checkbox' ].selected = cur;\r\n\t\t\t\t\t\t}, this));\r\n\t\t\t}\r\n\t\t\tif(this.settings.checkbox.cascade.indexOf('up') !== -1) {\r\n\t\t\t\tthis.element\r\n\t\t\t\t\t.on('delete_node.jstree', $.proxy(function (e, data) {\r\n\t\t\t\t\t\t\t// apply up (whole handler)\r\n\t\t\t\t\t\t\tvar p = this.get_node(data.parent),\r\n\t\t\t\t\t\t\t\tm = this._model.data,\r\n\t\t\t\t\t\t\t\ti, j, c, tmp, t = this.settings.checkbox.tie_selection;\r\n\t\t\t\t\t\t\twhile(p && p.id !== $.jstree.root && !p.state[ t ? 'selected' : 'checked' ]) {\r\n\t\t\t\t\t\t\t\tc = 0;\r\n\t\t\t\t\t\t\t\tfor(i = 0, j = p.children.length; i < j; i++) {\r\n\t\t\t\t\t\t\t\t\tc += m[p.children[i]].state[ t ? 'selected' : 'checked' ];\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tif(j > 0 && c === j) {\r\n\t\t\t\t\t\t\t\t\tp.state[ t ? 'selected' : 'checked' ] = true;\r\n\t\t\t\t\t\t\t\t\tthis._data[ t ? 'core' : 'checkbox' ].selected.push(p.id);\r\n\t\t\t\t\t\t\t\t\ttmp = this.get_node(p, true);\r\n\t\t\t\t\t\t\t\t\tif(tmp && tmp.length) {\r\n\t\t\t\t\t\t\t\t\t\ttmp.attr('aria-selected', true).children('.jstree-anchor').addClass(t ? 'jstree-clicked' : 'jstree-checked');\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tp = this.get_node(p.parent);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}, this))\r\n\t\t\t\t\t.on('move_node.jstree', $.proxy(function (e, data) {\r\n\t\t\t\t\t\t\t// apply up (whole handler)\r\n\t\t\t\t\t\t\tvar is_multi = data.is_multi,\r\n\t\t\t\t\t\t\t\told_par = data.old_parent,\r\n\t\t\t\t\t\t\t\tnew_par = this.get_node(data.parent),\r\n\t\t\t\t\t\t\t\tm = this._model.data,\r\n\t\t\t\t\t\t\t\tp, c, i, j, tmp, t = this.settings.checkbox.tie_selection;\r\n\t\t\t\t\t\t\tif(!is_multi) {\r\n\t\t\t\t\t\t\t\tp = this.get_node(old_par);\r\n\t\t\t\t\t\t\t\twhile(p && p.id !== $.jstree.root && !p.state[ t ? 'selected' : 'checked' ]) {\r\n\t\t\t\t\t\t\t\t\tc = 0;\r\n\t\t\t\t\t\t\t\t\tfor(i = 0, j = p.children.length; i < j; i++) {\r\n\t\t\t\t\t\t\t\t\t\tc += m[p.children[i]].state[ t ? 'selected' : 'checked' ];\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\tif(j > 0 && c === j) {\r\n\t\t\t\t\t\t\t\t\t\tp.state[ t ? 'selected' : 'checked' ] = true;\r\n\t\t\t\t\t\t\t\t\t\tthis._data[ t ? 'core' : 'checkbox' ].selected.push(p.id);\r\n\t\t\t\t\t\t\t\t\t\ttmp = this.get_node(p, true);\r\n\t\t\t\t\t\t\t\t\t\tif(tmp && tmp.length) {\r\n\t\t\t\t\t\t\t\t\t\t\ttmp.attr('aria-selected', true).children('.jstree-anchor').addClass(t ? 'jstree-clicked' : 'jstree-checked');\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\tp = this.get_node(p.parent);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tp = new_par;\r\n\t\t\t\t\t\t\twhile(p && p.id !== $.jstree.root) {\r\n\t\t\t\t\t\t\t\tc = 0;\r\n\t\t\t\t\t\t\t\tfor(i = 0, j = p.children.length; i < j; i++) {\r\n\t\t\t\t\t\t\t\t\tc += m[p.children[i]].state[ t ? 'selected' : 'checked' ];\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tif(c === j) {\r\n\t\t\t\t\t\t\t\t\tif(!p.state[ t ? 'selected' : 'checked' ]) {\r\n\t\t\t\t\t\t\t\t\t\tp.state[ t ? 'selected' : 'checked' ] = true;\r\n\t\t\t\t\t\t\t\t\t\tthis._data[ t ? 'core' : 'checkbox' ].selected.push(p.id);\r\n\t\t\t\t\t\t\t\t\t\ttmp = this.get_node(p, true);\r\n\t\t\t\t\t\t\t\t\t\tif(tmp && tmp.length) {\r\n\t\t\t\t\t\t\t\t\t\t\ttmp.attr('aria-selected', true).children('.jstree-anchor').addClass(t ? 'jstree-clicked' : 'jstree-checked');\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\tif(p.state[ t ? 'selected' : 'checked' ]) {\r\n\t\t\t\t\t\t\t\t\t\tp.state[ t ? 'selected' : 'checked' ] = false;\r\n\t\t\t\t\t\t\t\t\t\tthis._data[ t ? 'core' : 'checkbox' ].selected = $.vakata.array_remove_item(this._data[ t ? 'core' : 'checkbox' ].selected, p.id);\r\n\t\t\t\t\t\t\t\t\t\ttmp = this.get_node(p, true);\r\n\t\t\t\t\t\t\t\t\t\tif(tmp && tmp.length) {\r\n\t\t\t\t\t\t\t\t\t\t\ttmp.attr('aria-selected', false).children('.jstree-anchor').removeClass(t ? 'jstree-clicked' : 'jstree-checked');\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tp = this.get_node(p.parent);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}, this));\r\n\t\t\t}\r\n\t\t};\r\n\t\t/**\r\n\t\t * get an array of all nodes whose state is \"undetermined\"\r\n\t\t * @name get_undetermined([full])\r\n\t\t * @param  {boolean} full: if set to `true` the returned array will consist of the full node objects, otherwise - only IDs will be returned\r\n\t\t * @return {Array}\r\n\t\t * @plugin checkbox\r\n\t\t */\r\n\t\tthis.get_undetermined = function (full) {\r\n\t\t\tif (this.settings.checkbox.cascade.indexOf('undetermined') === -1) {\r\n\t\t\t\treturn [];\r\n\t\t\t}\r\n\t\t\tvar i, j, k, l, o = {}, m = this._model.data, t = this.settings.checkbox.tie_selection, s = this._data[ t ? 'core' : 'checkbox' ].selected, p = [], tt = this, r = [];\r\n\t\t\tfor(i = 0, j = s.length; i < j; i++) {\r\n\t\t\t\tif(m[s[i]] && m[s[i]].parents) {\r\n\t\t\t\t\tfor(k = 0, l = m[s[i]].parents.length; k < l; k++) {\r\n\t\t\t\t\t\tif(o[m[s[i]].parents[k]] !== undefined) {\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif(m[s[i]].parents[k] !== $.jstree.root) {\r\n\t\t\t\t\t\t\to[m[s[i]].parents[k]] = true;\r\n\t\t\t\t\t\t\tp.push(m[s[i]].parents[k]);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// attempt for server side undetermined state\r\n\t\t\tthis.element.find('.jstree-closed').not(':has(.jstree-children)')\r\n\t\t\t\t.each(function () {\r\n\t\t\t\t\tvar tmp = tt.get_node(this), tmp2;\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(!tmp) { return; }\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(!tmp.state.loaded) {\r\n\t\t\t\t\t\tif(tmp.original && tmp.original.state && tmp.original.state.undetermined && tmp.original.state.undetermined === true) {\r\n\t\t\t\t\t\t\tif(o[tmp.id] === undefined && tmp.id !== $.jstree.root) {\r\n\t\t\t\t\t\t\t\to[tmp.id] = true;\r\n\t\t\t\t\t\t\t\tp.push(tmp.id);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tfor(k = 0, l = tmp.parents.length; k < l; k++) {\r\n\t\t\t\t\t\t\t\tif(o[tmp.parents[k]] === undefined && tmp.parents[k] !== $.jstree.root) {\r\n\t\t\t\t\t\t\t\t\to[tmp.parents[k]] = true;\r\n\t\t\t\t\t\t\t\t\tp.push(tmp.parents[k]);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tfor(i = 0, j = tmp.children_d.length; i < j; i++) {\r\n\t\t\t\t\t\t\ttmp2 = m[tmp.children_d[i]];\r\n\t\t\t\t\t\t\tif(!tmp2.state.loaded && tmp2.original && tmp2.original.state && tmp2.original.state.undetermined && tmp2.original.state.undetermined === true) {\r\n\t\t\t\t\t\t\t\tif(o[tmp2.id] === undefined && tmp2.id !== $.jstree.root) {\r\n\t\t\t\t\t\t\t\t\to[tmp2.id] = true;\r\n\t\t\t\t\t\t\t\t\tp.push(tmp2.id);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tfor(k = 0, l = tmp2.parents.length; k < l; k++) {\r\n\t\t\t\t\t\t\t\t\tif(o[tmp2.parents[k]] === undefined && tmp2.parents[k] !== $.jstree.root) {\r\n\t\t\t\t\t\t\t\t\t\to[tmp2.parents[k]] = true;\r\n\t\t\t\t\t\t\t\t\t\tp.push(tmp2.parents[k]);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\tfor (i = 0, j = p.length; i < j; i++) {\r\n\t\t\t\tif(!m[p[i]].state[ t ? 'selected' : 'checked' ]) {\r\n\t\t\t\t\tr.push(full ? m[p[i]] : p[i]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn r;\r\n\t\t};\r\n\t\t/**\r\n\t\t * set the undetermined state where and if necessary. Used internally.\r\n\t\t * @private\r\n\t\t * @name _undetermined()\r\n\t\t * @plugin checkbox\r\n\t\t */\r\n\t\tthis._undetermined = function () {\r\n\t\t\tif(this.element === null) { return; }\r\n\t\t\tvar p = this.get_undetermined(false), i, j, s;\r\n\r\n\t\t\tthis.element.find('.jstree-undetermined').removeClass('jstree-undetermined');\r\n\t\t\tfor (i = 0, j = p.length; i < j; i++) {\r\n\t\t\t\ts = this.get_node(p[i], true);\r\n\t\t\t\tif(s && s.length) {\r\n\t\t\t\t\ts.children('.jstree-anchor').children('.jstree-checkbox').addClass('jstree-undetermined');\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t\tthis.redraw_node = function(obj, deep, is_callback, force_render) {\r\n\t\t\tobj = parent.redraw_node.apply(this, arguments);\r\n\t\t\tif(obj) {\r\n\t\t\t\tvar i, j, tmp = null, icon = null;\r\n\t\t\t\tfor(i = 0, j = obj.childNodes.length; i < j; i++) {\r\n\t\t\t\t\tif(obj.childNodes[i] && obj.childNodes[i].className && obj.childNodes[i].className.indexOf(\"jstree-anchor\") !== -1) {\r\n\t\t\t\t\t\ttmp = obj.childNodes[i];\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif(tmp) {\r\n\t\t\t\t\tif(!this.settings.checkbox.tie_selection && this._model.data[obj.id].state.checked) { tmp.className += ' jstree-checked'; }\r\n\t\t\t\t\ticon = _i.cloneNode(false);\r\n\t\t\t\t\tif(this._model.data[obj.id].state.checkbox_disabled) { icon.className += ' jstree-checkbox-disabled'; }\r\n\t\t\t\t\ttmp.insertBefore(icon, tmp.childNodes[0]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(!is_callback && this.settings.checkbox.cascade.indexOf('undetermined') !== -1) {\r\n\t\t\t\tif(this._data.checkbox.uto) { clearTimeout(this._data.checkbox.uto); }\r\n\t\t\t\tthis._data.checkbox.uto = setTimeout($.proxy(this._undetermined, this), 50);\r\n\t\t\t}\r\n\t\t\treturn obj;\r\n\t\t};\r\n\t\t/**\r\n\t\t * show the node checkbox icons\r\n\t\t * @name show_checkboxes()\r\n\t\t * @plugin checkbox\r\n\t\t */\r\n\t\tthis.show_checkboxes = function () { this._data.core.themes.checkboxes = true; this.get_container_ul().removeClass(\"jstree-no-checkboxes\"); };\r\n\t\t/**\r\n\t\t * hide the node checkbox icons\r\n\t\t * @name hide_checkboxes()\r\n\t\t * @plugin checkbox\r\n\t\t */\r\n\t\tthis.hide_checkboxes = function () { this._data.core.themes.checkboxes = false; this.get_container_ul().addClass(\"jstree-no-checkboxes\"); };\r\n\t\t/**\r\n\t\t * toggle the node icons\r\n\t\t * @name toggle_checkboxes()\r\n\t\t * @plugin checkbox\r\n\t\t */\r\n\t\tthis.toggle_checkboxes = function () { if(this._data.core.themes.checkboxes) { this.hide_checkboxes(); } else { this.show_checkboxes(); } };\r\n\t\t/**\r\n\t\t * checks if a node is in an undetermined state\r\n\t\t * @name is_undetermined(obj)\r\n\t\t * @param  {mixed} obj\r\n\t\t * @return {Boolean}\r\n\t\t */\r\n\t\tthis.is_undetermined = function (obj) {\r\n\t\t\tobj = this.get_node(obj);\r\n\t\t\tvar s = this.settings.checkbox.cascade, i, j, t = this.settings.checkbox.tie_selection, d = this._data[ t ? 'core' : 'checkbox' ].selected, m = this._model.data;\r\n\t\t\tif(!obj || obj.state[ t ? 'selected' : 'checked' ] === true || s.indexOf('undetermined') === -1 || (s.indexOf('down') === -1 && s.indexOf('up') === -1)) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tif(!obj.state.loaded && obj.original.state.undetermined === true) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\tfor(i = 0, j = obj.children_d.length; i < j; i++) {\r\n\t\t\t\tif($.inArray(obj.children_d[i], d) !== -1 || (!m[obj.children_d[i]].state.loaded && m[obj.children_d[i]].original.state.undetermined)) {\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn false;\r\n\t\t};\r\n\t\t/**\r\n\t\t * disable a node's checkbox\r\n\t\t * @name disable_checkbox(obj)\r\n\t\t * @param {mixed} obj an array can be used too\r\n\t\t * @trigger disable_checkbox.jstree\r\n\t\t * @plugin checkbox\r\n\t\t */\r\n\t\tthis.disable_checkbox = function (obj) {\r\n\t\t\tvar t1, t2, dom;\r\n\t\t\tif($.isArray(obj)) {\r\n\t\t\t\tobj = obj.slice();\r\n\t\t\t\tfor(t1 = 0, t2 = obj.length; t1 < t2; t1++) {\r\n\t\t\t\t\tthis.disable_checkbox(obj[t1]);\r\n\t\t\t\t}\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\tobj = this.get_node(obj);\r\n\t\t\tif(!obj || obj.id === $.jstree.root) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tdom = this.get_node(obj, true);\r\n\t\t\tif(!obj.state.checkbox_disabled) {\r\n\t\t\t\tobj.state.checkbox_disabled = true;\r\n\t\t\t\tif(dom && dom.length) {\r\n\t\t\t\t\tdom.children('.jstree-anchor').children('.jstree-checkbox').addClass('jstree-checkbox-disabled');\r\n\t\t\t\t}\r\n\t\t\t\t/**\r\n\t\t\t\t * triggered when an node's checkbox is disabled\r\n\t\t\t\t * @event\r\n\t\t\t\t * @name disable_checkbox.jstree\r\n\t\t\t\t * @param {Object} node\r\n\t\t\t\t * @plugin checkbox\r\n\t\t\t\t */\r\n\t\t\t\tthis.trigger('disable_checkbox', { 'node' : obj });\r\n\t\t\t}\r\n\t\t};\r\n\t\t/**\r\n\t\t * enable a node's checkbox\r\n\t\t * @name disable_checkbox(obj)\r\n\t\t * @param {mixed} obj an array can be used too\r\n\t\t * @trigger enable_checkbox.jstree\r\n\t\t * @plugin checkbox\r\n\t\t */\r\n\t\tthis.enable_checkbox = function (obj) {\r\n\t\t\tvar t1, t2, dom;\r\n\t\t\tif($.isArray(obj)) {\r\n\t\t\t\tobj = obj.slice();\r\n\t\t\t\tfor(t1 = 0, t2 = obj.length; t1 < t2; t1++) {\r\n\t\t\t\t\tthis.enable_checkbox(obj[t1]);\r\n\t\t\t\t}\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\tobj = this.get_node(obj);\r\n\t\t\tif(!obj || obj.id === $.jstree.root) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tdom = this.get_node(obj, true);\r\n\t\t\tif(obj.state.checkbox_disabled) {\r\n\t\t\t\tobj.state.checkbox_disabled = false;\r\n\t\t\t\tif(dom && dom.length) {\r\n\t\t\t\t\tdom.children('.jstree-anchor').children('.jstree-checkbox').removeClass('jstree-checkbox-disabled');\r\n\t\t\t\t}\r\n\t\t\t\t/**\r\n\t\t\t\t * triggered when an node's checkbox is enabled\r\n\t\t\t\t * @event\r\n\t\t\t\t * @name enable_checkbox.jstree\r\n\t\t\t\t * @param {Object} node\r\n\t\t\t\t * @plugin checkbox\r\n\t\t\t\t */\r\n\t\t\t\tthis.trigger('enable_checkbox', { 'node' : obj });\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tthis.activate_node = function (obj, e) {\r\n\t\t\tif($(e.target).hasClass('jstree-checkbox-disabled')) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tif(this.settings.checkbox.tie_selection && (this.settings.checkbox.whole_node || $(e.target).hasClass('jstree-checkbox'))) {\r\n\t\t\t\te.ctrlKey = true;\r\n\t\t\t}\r\n\t\t\tif(this.settings.checkbox.tie_selection || (!this.settings.checkbox.whole_node && !$(e.target).hasClass('jstree-checkbox'))) {\r\n\t\t\t\treturn parent.activate_node.call(this, obj, e);\r\n\t\t\t}\r\n\t\t\tif(this.is_disabled(obj)) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tif(this.is_checked(obj)) {\r\n\t\t\t\tthis.uncheck_node(obj, e);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tthis.check_node(obj, e);\r\n\t\t\t}\r\n\t\t\tthis.trigger('activate_node', { 'node' : this.get_node(obj) });\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Cascades checked state to a node and all its descendants. This function does NOT affect hidden and disabled nodes (or their descendants).\r\n\t\t * However if these unaffected nodes are already selected their ids will be included in the returned array.\r\n\t\t * @private\r\n\t\t * @param {string} id the node ID\r\n\t\t * @param {bool} checkedState should the nodes be checked or not\r\n\t\t * @returns {Array} Array of all node id's (in this tree branch) that are checked.\r\n\t\t */\r\n\t\tthis._cascade_new_checked_state = function (id, checkedState) {\r\n\t\t\tvar self = this;\r\n\t\t\tvar t = this.settings.checkbox.tie_selection;\r\n\t\t\tvar node = this._model.data[id];\r\n\t\t\tvar selectedNodeIds = [];\r\n\t\t\tvar selectedChildrenIds = [], i, j, selectedChildIds;\r\n\r\n\t\t\tif (\r\n\t\t\t\t(this.settings.checkbox.cascade_to_disabled || !node.state.disabled) &&\r\n\t\t\t\t(this.settings.checkbox.cascade_to_hidden || !node.state.hidden)\r\n\t\t\t) {\r\n\t\t\t\t//First try and check/uncheck the children\r\n\t\t\t\tif (node.children) {\r\n\t\t\t\t\tfor (i = 0, j = node.children.length; i < j; i++) {\r\n\t\t\t\t\t\tvar childId = node.children[i];\r\n\t\t\t\t\t\tselectedChildIds = self._cascade_new_checked_state(childId, checkedState);\r\n\t\t\t\t\t\tselectedNodeIds = selectedNodeIds.concat(selectedChildIds);\r\n\t\t\t\t\t\tif (selectedChildIds.indexOf(childId) > -1) {\r\n\t\t\t\t\t\t\tselectedChildrenIds.push(childId);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar dom = self.get_node(node, true);\r\n\r\n\t\t\t\t//A node's state is undetermined if some but not all of it's children are checked/selected .\r\n\t\t\t\tvar undetermined = selectedChildrenIds.length > 0 && selectedChildrenIds.length < node.children.length;\r\n\r\n\t\t\t\tif(node.original && node.original.state && node.original.state.undetermined) {\r\n\t\t\t\t\tnode.original.state.undetermined = undetermined;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t//If a node is undetermined then remove selected class\r\n\t\t\t\tif (undetermined) {\r\n\t\t\t\t\tnode.state[ t ? 'selected' : 'checked' ] = false;\r\n\t\t\t\t\tdom.attr('aria-selected', false).children('.jstree-anchor').removeClass(t ? 'jstree-clicked' : 'jstree-checked');\r\n\t\t\t\t}\r\n\t\t\t\t//Otherwise, if the checkedState === true (i.e. the node is being checked now) and all of the node's children are checked (if it has any children),\r\n\t\t\t\t//check the node and style it correctly.\r\n\t\t\t\telse if (checkedState && selectedChildrenIds.length === node.children.length) {\r\n\t\t\t\t\tnode.state[ t ? 'selected' : 'checked' ] = checkedState;\r\n\t\t\t\t\tselectedNodeIds.push(node.id);\r\n\r\n\t\t\t\t\tdom.attr('aria-selected', true).children('.jstree-anchor').addClass(t ? 'jstree-clicked' : 'jstree-checked');\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tnode.state[ t ? 'selected' : 'checked' ] = false;\r\n\t\t\t\t\tdom.attr('aria-selected', false).children('.jstree-anchor').removeClass(t ? 'jstree-clicked' : 'jstree-checked');\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tselectedChildIds = this.get_checked_descendants(id);\r\n\r\n\t\t\t\tif (node.state[ t ? 'selected' : 'checked' ]) {\r\n\t\t\t\t\tselectedChildIds.push(node.id);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tselectedNodeIds = selectedNodeIds.concat(selectedChildIds);\r\n\t\t\t}\r\n\r\n\t\t\treturn selectedNodeIds;\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * Gets ids of nodes selected in branch (of tree) specified by id (does not include the node specified by id)\r\n\t\t * @name get_checked_descendants(obj)\r\n\t\t * @param {string} id the node ID\r\n\t\t * @return {Array} array of IDs\r\n\t\t * @plugin checkbox\r\n\t\t */\r\n\t\tthis.get_checked_descendants = function (id) {\r\n\t\t\tvar self = this;\r\n\t\t\tvar t = self.settings.checkbox.tie_selection;\r\n\t\t\tvar node = self._model.data[id];\r\n\r\n\t\t\treturn node.children_d.filter(function(_id) {\r\n\t\t\t\treturn self._model.data[_id].state[ t ? 'selected' : 'checked' ];\r\n\t\t\t});\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * check a node (only if tie_selection in checkbox settings is false, otherwise select_node will be called internally)\r\n\t\t * @name check_node(obj)\r\n\t\t * @param {mixed} obj an array can be used to check multiple nodes\r\n\t\t * @trigger check_node.jstree\r\n\t\t * @plugin checkbox\r\n\t\t */\r\n\t\tthis.check_node = function (obj, e) {\r\n\t\t\tif(this.settings.checkbox.tie_selection) { return this.select_node(obj, false, true, e); }\r\n\t\t\tvar dom, t1, t2, th;\r\n\t\t\tif($.isArray(obj)) {\r\n\t\t\t\tobj = obj.slice();\r\n\t\t\t\tfor(t1 = 0, t2 = obj.length; t1 < t2; t1++) {\r\n\t\t\t\t\tthis.check_node(obj[t1], e);\r\n\t\t\t\t}\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\tobj = this.get_node(obj);\r\n\t\t\tif(!obj || obj.id === $.jstree.root) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tdom = this.get_node(obj, true);\r\n\t\t\tif(!obj.state.checked) {\r\n\t\t\t\tobj.state.checked = true;\r\n\t\t\t\tthis._data.checkbox.selected.push(obj.id);\r\n\t\t\t\tif(dom && dom.length) {\r\n\t\t\t\t\tdom.children('.jstree-anchor').addClass('jstree-checked');\r\n\t\t\t\t}\r\n\t\t\t\t/**\r\n\t\t\t\t * triggered when an node is checked (only if tie_selection in checkbox settings is false)\r\n\t\t\t\t * @event\r\n\t\t\t\t * @name check_node.jstree\r\n\t\t\t\t * @param {Object} node\r\n\t\t\t\t * @param {Array} selected the current selection\r\n\t\t\t\t * @param {Object} event the event (if any) that triggered this check_node\r\n\t\t\t\t * @plugin checkbox\r\n\t\t\t\t */\r\n\t\t\t\tthis.trigger('check_node', { 'node' : obj, 'selected' : this._data.checkbox.selected, 'event' : e });\r\n\t\t\t}\r\n\t\t};\r\n\t\t/**\r\n\t\t * uncheck a node (only if tie_selection in checkbox settings is false, otherwise deselect_node will be called internally)\r\n\t\t * @name uncheck_node(obj)\r\n\t\t * @param {mixed} obj an array can be used to uncheck multiple nodes\r\n\t\t * @trigger uncheck_node.jstree\r\n\t\t * @plugin checkbox\r\n\t\t */\r\n\t\tthis.uncheck_node = function (obj, e) {\r\n\t\t\tif(this.settings.checkbox.tie_selection) { return this.deselect_node(obj, false, e); }\r\n\t\t\tvar t1, t2, dom;\r\n\t\t\tif($.isArray(obj)) {\r\n\t\t\t\tobj = obj.slice();\r\n\t\t\t\tfor(t1 = 0, t2 = obj.length; t1 < t2; t1++) {\r\n\t\t\t\t\tthis.uncheck_node(obj[t1], e);\r\n\t\t\t\t}\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\tobj = this.get_node(obj);\r\n\t\t\tif(!obj || obj.id === $.jstree.root) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tdom = this.get_node(obj, true);\r\n\t\t\tif(obj.state.checked) {\r\n\t\t\t\tobj.state.checked = false;\r\n\t\t\t\tthis._data.checkbox.selected = $.vakata.array_remove_item(this._data.checkbox.selected, obj.id);\r\n\t\t\t\tif(dom.length) {\r\n\t\t\t\t\tdom.children('.jstree-anchor').removeClass('jstree-checked');\r\n\t\t\t\t}\r\n\t\t\t\t/**\r\n\t\t\t\t * triggered when an node is unchecked (only if tie_selection in checkbox settings is false)\r\n\t\t\t\t * @event\r\n\t\t\t\t * @name uncheck_node.jstree\r\n\t\t\t\t * @param {Object} node\r\n\t\t\t\t * @param {Array} selected the current selection\r\n\t\t\t\t * @param {Object} event the event (if any) that triggered this uncheck_node\r\n\t\t\t\t * @plugin checkbox\r\n\t\t\t\t */\r\n\t\t\t\tthis.trigger('uncheck_node', { 'node' : obj, 'selected' : this._data.checkbox.selected, 'event' : e });\r\n\t\t\t}\r\n\t\t};\r\n\t\t\r\n\t\t/**\r\n\t\t * checks all nodes in the tree (only if tie_selection in checkbox settings is false, otherwise select_all will be called internally)\r\n\t\t * @name check_all()\r\n\t\t * @trigger check_all.jstree, changed.jstree\r\n\t\t * @plugin checkbox\r\n\t\t */\r\n\t\tthis.check_all = function () {\r\n\t\t\tif(this.settings.checkbox.tie_selection) { return this.select_all(); }\r\n\t\t\tvar tmp = this._data.checkbox.selected.concat([]), i, j;\r\n\t\t\tthis._data.checkbox.selected = this._model.data[$.jstree.root].children_d.concat();\r\n\t\t\tfor(i = 0, j = this._data.checkbox.selected.length; i < j; i++) {\r\n\t\t\t\tif(this._model.data[this._data.checkbox.selected[i]]) {\r\n\t\t\t\t\tthis._model.data[this._data.checkbox.selected[i]].state.checked = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthis.redraw(true);\r\n\t\t\t/**\r\n\t\t\t * triggered when all nodes are checked (only if tie_selection in checkbox settings is false)\r\n\t\t\t * @event\r\n\t\t\t * @name check_all.jstree\r\n\t\t\t * @param {Array} selected the current selection\r\n\t\t\t * @plugin checkbox\r\n\t\t\t */\r\n\t\t\tthis.trigger('check_all', { 'selected' : this._data.checkbox.selected });\r\n\t\t};\r\n\t\t/**\r\n\t\t * uncheck all checked nodes (only if tie_selection in checkbox settings is false, otherwise deselect_all will be called internally)\r\n\t\t * @name uncheck_all()\r\n\t\t * @trigger uncheck_all.jstree\r\n\t\t * @plugin checkbox\r\n\t\t */\r\n\t\tthis.uncheck_all = function () {\r\n\t\t\tif(this.settings.checkbox.tie_selection) { return this.deselect_all(); }\r\n\t\t\tvar tmp = this._data.checkbox.selected.concat([]), i, j;\r\n\t\t\tfor(i = 0, j = this._data.checkbox.selected.length; i < j; i++) {\r\n\t\t\t\tif(this._model.data[this._data.checkbox.selected[i]]) {\r\n\t\t\t\t\tthis._model.data[this._data.checkbox.selected[i]].state.checked = false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthis._data.checkbox.selected = [];\r\n\t\t\tthis.element.find('.jstree-checked').removeClass('jstree-checked');\r\n\t\t\t/**\r\n\t\t\t * triggered when all nodes are unchecked (only if tie_selection in checkbox settings is false)\r\n\t\t\t * @event\r\n\t\t\t * @name uncheck_all.jstree\r\n\t\t\t * @param {Object} node the previous selection\r\n\t\t\t * @param {Array} selected the current selection\r\n\t\t\t * @plugin checkbox\r\n\t\t\t */\r\n\t\t\tthis.trigger('uncheck_all', { 'selected' : this._data.checkbox.selected, 'node' : tmp });\r\n\t\t};\r\n\t\t/**\r\n\t\t * checks if a node is checked (if tie_selection is on in the settings this function will return the same as is_selected)\r\n\t\t * @name is_checked(obj)\r\n\t\t * @param  {mixed}  obj\r\n\t\t * @return {Boolean}\r\n\t\t * @plugin checkbox\r\n\t\t */\r\n\t\tthis.is_checked = function (obj) {\r\n\t\t\tif(this.settings.checkbox.tie_selection) { return this.is_selected(obj); }\r\n\t\t\tobj = this.get_node(obj);\r\n\t\t\tif(!obj || obj.id === $.jstree.root) { return false; }\r\n\t\t\treturn obj.state.checked;\r\n\t\t};\r\n\t\t/**\r\n\t\t * get an array of all checked nodes (if tie_selection is on in the settings this function will return the same as get_selected)\r\n\t\t * @name get_checked([full])\r\n\t\t * @param  {mixed}  full if set to `true` the returned array will consist of the full node objects, otherwise - only IDs will be returned\r\n\t\t * @return {Array}\r\n\t\t * @plugin checkbox\r\n\t\t */\r\n\t\tthis.get_checked = function (full) {\r\n\t\t\tif(this.settings.checkbox.tie_selection) { return this.get_selected(full); }\r\n\t\t\treturn full ? $.map(this._data.checkbox.selected, $.proxy(function (i) { return this.get_node(i); }, this)) : this._data.checkbox.selected;\r\n\t\t};\r\n\t\t/**\r\n\t\t * get an array of all top level checked nodes (ignoring children of checked nodes) (if tie_selection is on in the settings this function will return the same as get_top_selected)\r\n\t\t * @name get_top_checked([full])\r\n\t\t * @param  {mixed}  full if set to `true` the returned array will consist of the full node objects, otherwise - only IDs will be returned\r\n\t\t * @return {Array}\r\n\t\t * @plugin checkbox\r\n\t\t */\r\n\t\tthis.get_top_checked = function (full) {\r\n\t\t\tif(this.settings.checkbox.tie_selection) { return this.get_top_selected(full); }\r\n\t\t\tvar tmp = this.get_checked(true),\r\n\t\t\t\tobj = {}, i, j, k, l;\r\n\t\t\tfor(i = 0, j = tmp.length; i < j; i++) {\r\n\t\t\t\tobj[tmp[i].id] = tmp[i];\r\n\t\t\t}\r\n\t\t\tfor(i = 0, j = tmp.length; i < j; i++) {\r\n\t\t\t\tfor(k = 0, l = tmp[i].children_d.length; k < l; k++) {\r\n\t\t\t\t\tif(obj[tmp[i].children_d[k]]) {\r\n\t\t\t\t\t\tdelete obj[tmp[i].children_d[k]];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\ttmp = [];\r\n\t\t\tfor(i in obj) {\r\n\t\t\t\tif(obj.hasOwnProperty(i)) {\r\n\t\t\t\t\ttmp.push(i);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn full ? $.map(tmp, $.proxy(function (i) { return this.get_node(i); }, this)) : tmp;\r\n\t\t};\r\n\t\t/**\r\n\t\t * get an array of all bottom level checked nodes (ignoring selected parents) (if tie_selection is on in the settings this function will return the same as get_bottom_selected)\r\n\t\t * @name get_bottom_checked([full])\r\n\t\t * @param  {mixed}  full if set to `true` the returned array will consist of the full node objects, otherwise - only IDs will be returned\r\n\t\t * @return {Array}\r\n\t\t * @plugin checkbox\r\n\t\t */\r\n\t\tthis.get_bottom_checked = function (full) {\r\n\t\t\tif(this.settings.checkbox.tie_selection) { return this.get_bottom_selected(full); }\r\n\t\t\tvar tmp = this.get_checked(true),\r\n\t\t\t\tobj = [], i, j;\r\n\t\t\tfor(i = 0, j = tmp.length; i < j; i++) {\r\n\t\t\t\tif(!tmp[i].children.length) {\r\n\t\t\t\t\tobj.push(tmp[i].id);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn full ? $.map(obj, $.proxy(function (i) { return this.get_node(i); }, this)) : obj;\r\n\t\t};\r\n\t\tthis.load_node = function (obj, callback) {\r\n\t\t\tvar k, l, i, j, c, tmp;\r\n\t\t\tif(!$.isArray(obj) && !this.settings.checkbox.tie_selection) {\r\n\t\t\t\ttmp = this.get_node(obj);\r\n\t\t\t\tif(tmp && tmp.state.loaded) {\r\n\t\t\t\t\tfor(k = 0, l = tmp.children_d.length; k < l; k++) {\r\n\t\t\t\t\t\tif(this._model.data[tmp.children_d[k]].state.checked) {\r\n\t\t\t\t\t\t\tc = true;\r\n\t\t\t\t\t\t\tthis._data.checkbox.selected = $.vakata.array_remove_item(this._data.checkbox.selected, tmp.children_d[k]);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn parent.load_node.apply(this, arguments);\r\n\t\t};\r\n\t\tthis.get_state = function () {\r\n\t\t\tvar state = parent.get_state.apply(this, arguments);\r\n\t\t\tif(this.settings.checkbox.tie_selection) { return state; }\r\n\t\t\tstate.checkbox = this._data.checkbox.selected.slice();\r\n\t\t\treturn state;\r\n\t\t};\r\n\t\tthis.set_state = function (state, callback) {\r\n\t\t\tvar res = parent.set_state.apply(this, arguments);\r\n\t\t\tif(res && state.checkbox) {\r\n\t\t\t\tif(!this.settings.checkbox.tie_selection) {\r\n\t\t\t\t\tthis.uncheck_all();\r\n\t\t\t\t\tvar _this = this;\r\n\t\t\t\t\t$.each(state.checkbox, function (i, v) {\r\n\t\t\t\t\t\t_this.check_node(v);\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\tdelete state.checkbox;\r\n\t\t\t\tthis.set_state(state, callback);\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\treturn res;\r\n\t\t};\r\n\t\tthis.refresh = function (skip_loading, forget_state) {\r\n\t\t\tif(!this.settings.checkbox.tie_selection) {\r\n\t\t\t\tthis._data.checkbox.selected = [];\r\n\t\t\t}\r\n\t\t\treturn parent.refresh.apply(this, arguments);\r\n\t\t};\r\n\t};\r\n\r\n\t// include the checkbox plugin by default\r\n\t// $.jstree.defaults.plugins.push(\"checkbox\");\r\n\r\n\treturn $;\r\n});\r\n\ndefine('skylark-jstree/plugin/conditionalselect',[\r\n  \"skylark-langx/langx\",\r\n  \"skylark-utils-dom/browser\",\r\n  \"skylark-utils-dom/eventer\",\r\n  \"skylark-utils-dom/noder\",\r\n  \"skylark-utils-dom/geom\",\r\n  \"skylark-utils-dom/query\",\r\n  \"../tree\"\r\n],function(langx,browser,eventer,noder,geom,$,jstree){\r\n\t\"use strict\";\r\n\r\n\tif($.jstree.plugins.conditionalselect) { return; }\r\n\r\n\t/**\r\n\t * a callback (function) which is invoked in the instance's scope and receives two arguments - the node and the event that triggered the `activate_node` call. Returning false prevents working with the node, returning true allows invoking activate_node. Defaults to returning `true`.\r\n\t * @name $.jstree.defaults.checkbox.visible\r\n\t * @plugin checkbox\r\n\t */\r\n\t$.jstree.defaults.conditionalselect = function () { return true; };\r\n\t$.jstree.plugins.conditionalselect = function (options, parent) {\r\n\t\t// own function\r\n\t\tthis.activate_node = function (obj, e) {\r\n\t\t\tif(this.settings.conditionalselect.call(this, this.get_node(obj), e)) {\r\n\t\t\t\treturn parent.activate_node.call(this, obj, e);\r\n\t\t\t}\r\n\t\t};\r\n\t};\r\n\treturn $;\r\n});\ndefine('skylark-jstree/plugin/menu',[\r\n  \"skylark-langx/langx\",\r\n  \"skylark-utils-dom/browser\",\r\n  \"skylark-utils-dom/eventer\",\r\n  \"skylark-utils-dom/noder\",\r\n  \"skylark-utils-dom/geom\",\r\n  \"skylark-utils-dom/query\"\r\n],function(langx,browser,eventer,noder,geom,$){\r\n\r\n\tvar popup = null;\r\n\tvar right_to_left ;\r\n\r\n\tvar Menu = langx.Evented.inherit({\r\n        klassName: \"Menu\",\r\n\r\n        init : function(elm,options) {\r\n        \tif (!options) {\r\n        \t\toptions = elm;\r\n        \t\telm = null;\r\n        \t}\r\n\t\t\tvar self = this,$el;\r\n\r\n\t\t\tthis._options = langx.mixin({\r\n\t\t\t\t\thide_onmouseleave\t: 0,\r\n\t\t\t\t\ticons\t\t\t\t: true\r\n\r\n\t\t\t},options);\r\n\r\n\t\t\tif (!elm) {\r\n\t\t\t\t$el = this.$el = $(\"<ul class='vakata-context'></ul>\");\r\n\t\t\t} else {\r\n\t\t\t\t$el = this.$el = $(elm);\r\n\t\t\t}\r\n\r\n\t\t\tvar to = false;\r\n\t\t\t$el.on(\"mouseenter\", \"li\", function (e) {\r\n\t\t\t\t\te.stopImmediatePropagation();\r\n\r\n\t\t\t\t\tif(noder.contains(this, e.relatedTarget)) {\r\n\t\t\t\t\t\t// премахнато заради delegate mouseleave по-долу\r\n\t\t\t\t\t\t// $(this).find(\".vakata-context-hover\").removeClass(\"vakata-context-hover\");\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif(to) { clearTimeout(to); }\r\n\t\t\t\t\t$el.find(\".vakata-context-hover\").removeClass(\"vakata-context-hover\").end();\r\n\r\n\t\t\t\t\t$(this)\r\n\t\t\t\t\t\t.siblings().find(\"ul\").hide().end().end()\r\n\t\t\t\t\t\t.parentsUntil(\".vakata-context\", \"li\").addBack().addClass(\"vakata-context-hover\");\r\n\t\t\t\t\tself._show_submenu(this);\r\n\t\t\t\t})\r\n\t\t\t\t// тестово - дали не натоварва?\r\n\t\t\t\t.on(\"mouseleave\", \"li\", function (e) {\r\n\t\t\t\t\tif(noder.contains(this, e.relatedTarget)) { return; }\r\n\t\t\t\t\t$(this).find(\".vakata-context-hover\").addBack().removeClass(\"vakata-context-hover\");\r\n\t\t\t\t})\r\n\t\t\t\t.on(\"mouseleave\", function (e) {\r\n\t\t\t\t\t$(this).find(\".vakata-context-hover\").removeClass(\"vakata-context-hover\");\r\n\t\t\t\t\tif(self._options.hide_onmouseleave) {\r\n\t\t\t\t\t\tto = setTimeout(\r\n\t\t\t\t\t\t\t(function (t) {\r\n\t\t\t\t\t\t\t\treturn function () { self.hide(); };\r\n\t\t\t\t\t\t\t}(this)), self._options.hide_onmouseleave);\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t\t\t.on(\"click\", \"a\", function (e) {\r\n\t\t\t\t\te.preventDefault();\r\n\t\t\t\t//})\r\n\t\t\t\t//.on(\"mouseup\", \"a\", function (e) {\r\n\t\t\t\t\tif(!$(this).blur().parent().hasClass(\"vakata-context-disabled\") && self._execute($(this).attr(\"rel\")) !== false) {\r\n\t\t\t\t\t\tself.hide();\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t\t\t.on('keydown', 'a', function (e) {\r\n\t\t\t\t\t\tvar o = null;\r\n\t\t\t\t\t\tswitch(e.which) {\r\n\t\t\t\t\t\t\tcase 13:\r\n\t\t\t\t\t\t\tcase 32:\r\n\t\t\t\t\t\t\t\te.type = \"click\";\r\n\t\t\t\t\t\t\t\te.preventDefault();\r\n\t\t\t\t\t\t\t\t$(e.currentTarget).trigger(e);\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\tcase 37:\r\n\t\t\t\t\t\t\t\tself.$el.find(\".vakata-context-hover\").last().closest(\"li\").first().find(\"ul\").hide().find(\".vakata-context-hover\").removeClass(\"vakata-context-hover\").end().end().children('a').focus();\r\n\t\t\t\t\t\t\t\te.stopImmediatePropagation();\r\n\t\t\t\t\t\t\t\te.preventDefault();\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\tcase 38:\r\n\t\t\t\t\t\t\t\to = self.$el.find(\"ul:visible\").addBack().last().children(\".vakata-context-hover\").removeClass(\"vakata-context-hover\").prevAll(\"li:not(.vakata-context-separator)\").first();\r\n\t\t\t\t\t\t\t\tif(!o.length) { o = self.$el.find(\"ul:visible\").addBack().last().children(\"li:not(.vakata-context-separator)\").last(); }\r\n\t\t\t\t\t\t\t\to.addClass(\"vakata-context-hover\").children('a').focus();\r\n\t\t\t\t\t\t\t\te.stopImmediatePropagation();\r\n\t\t\t\t\t\t\t\te.preventDefault();\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\tcase 39:\r\n\t\t\t\t\t\t\t\tself.$el.find(\".vakata-context-hover\").last().children(\"ul\").show().children(\"li:not(.vakata-context-separator)\").removeClass(\"vakata-context-hover\").first().addClass(\"vakata-context-hover\").children('a').focus();\r\n\t\t\t\t\t\t\t\te.stopImmediatePropagation();\r\n\t\t\t\t\t\t\t\te.preventDefault();\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\tcase 40:\r\n\t\t\t\t\t\t\t\to = self.$el.find(\"ul:visible\").addBack().last().children(\".vakata-context-hover\").removeClass(\"vakata-context-hover\").nextAll(\"li:not(.vakata-context-separator)\").first();\r\n\t\t\t\t\t\t\t\tif(!o.length) { o = self.$el.find(\"ul:visible\").addBack().last().children(\"li:not(.vakata-context-separator)\").first(); }\r\n\t\t\t\t\t\t\t\to.addClass(\"vakata-context-hover\").children('a').focus();\r\n\t\t\t\t\t\t\t\te.stopImmediatePropagation();\r\n\t\t\t\t\t\t\t\te.preventDefault();\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\tcase 27:\r\n\t\t\t\t\t\t\t\tself.hide();\r\n\t\t\t\t\t\t\t\te.preventDefault();\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\t\t//console.log(e.which);\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t})\r\n\t\t\t\t.on('keydown', function (e) {\r\n\t\t\t\t\te.preventDefault();\r\n\t\t\t\t\tvar a = self.$el.find('.vakata-contextmenu-shortcut-' + e.which).parent();\r\n\t\t\t\t\tif(a.parent().not('.vakata-context-disabled')) {\r\n\t\t\t\t\t\ta.click();\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\r\n\t\t\tthis.render();\r\n        },\r\n\r\n        render : function() {\r\n        \tvar items = this._options.items;\r\n\t\t\tif(this._parse(items)) {\r\n\t\t\t\tthis.$el.html(this.html);\r\n\t\t\t}\r\n\t\t\tthis.$el.width('');\r\n        },\r\n\r\n\t\t_trigger : function (event_name) {\r\n\t\t\t$(document).trigger(\"context_\" + event_name + \".sbswt\", {\r\n\t\t\t\t\"reference\"\t: this.reference,\r\n\t\t\t\t\"element\"\t: this.$el,\r\n\t\t\t\t\"position\"\t: {\r\n\t\t\t\t\t\"x\" : this.position_x,\r\n\t\t\t\t\t\"y\" : this.position_y\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t},        \r\n\r\n\t\t_execute : function (i) {\r\n\t\t\ti = this.items[i];\r\n\t\t\treturn i && (!i._disabled || (langx.isFunction(i._disabled) && !i._disabled({ \"item\" : i, \"reference\" : this.reference, \"element\" : this.$el }))) && i.action ? i.action.call(null, {\r\n\t\t\t\t\t\t\"item\"\t\t: i,\r\n\t\t\t\t\t\t\"reference\"\t: this.reference,\r\n\t\t\t\t\t\t\"element\"\t: this.$el,\r\n\t\t\t\t\t\t\"position\"\t: {\r\n\t\t\t\t\t\t\t\"x\" : this.position_x,\r\n\t\t\t\t\t\t\t\"y\" : this.position_y\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}) : false;\r\n\t\t},\r\n\t\t_parse : function (o, is_callback) {\r\n\t\t\tvar self = this,\r\n\t\t\t\treference = self._options.reference;\r\n\r\n\t\t\tif(!o) { return false; }\r\n\t\t\tif(!is_callback) {\r\n\t\t\t\tself.html\t\t= \"\";\r\n\t\t\t\tself.items\t= [];\r\n\t\t\t}\r\n\t\t\tvar str = \"\",\r\n\t\t\t\tsep = false,\r\n\t\t\t\ttmp;\r\n\r\n\t\t\tif(is_callback) { str += \"<\"+\"ul>\"; }\r\n\t\t\tlangx.each(o, function (i, val) {\r\n\t\t\t\tif(!val) { return true; }\r\n\t\t\t\tself.items.push(val);\r\n\t\t\t\tif(!sep && val.separator_before) {\r\n\t\t\t\t\tstr += \"<\"+\"li class='vakata-context-separator'><\"+\"a href='#' \" + (self._options.icons ? '' : 'style=\"margin-left:0px;\"') + \">&#160;<\"+\"/a><\"+\"/li>\";\r\n\t\t\t\t}\r\n\t\t\t\tsep = false;\r\n\t\t\t\tstr += \"<\"+\"li class='\" + (val._class || \"\") + (val._disabled === true || (langx.isFunction(val._disabled) && val._disabled({ \"item\" : val, \"reference\" : reference, \"element\" : self.$el })) ? \" vakata-contextmenu-disabled \" : \"\") + \"' \"+(val.shortcut?\" data-shortcut='\"+val.shortcut+\"' \":'')+\">\";\r\n\t\t\t\tstr += \"<\"+\"a href='#' rel='\" + (self.items.length - 1) + \"' \" + (val.title ? \"title='\" + val.title + \"'\" : \"\") + \">\";\r\n\t\t\t\tif(self._options.icons) {\r\n\t\t\t\t\tstr += \"<\"+\"i \";\r\n\t\t\t\t\tif(val.icon) {\r\n\t\t\t\t\t\tif(val.icon.indexOf(\"/\") !== -1 || val.icon.indexOf(\".\") !== -1) { str += \" style='background:url(\\\"\" + val.icon + \"\\\") center center no-repeat' \"; }\r\n\t\t\t\t\t\telse { str += \" class='\" + val.icon + \"' \"; }\r\n\t\t\t\t\t}\r\n\t\t\t\t\tstr += \"><\"+\"/i><\"+\"span class='vakata-contextmenu-sep'>&#160;<\"+\"/span>\";\r\n\t\t\t\t}\r\n\t\t\t\tstr += (langx.isFunction(val.label) ? val.label({ \"item\" : i, \"reference\" : reference, \"element\" : self.$el }) : val.label) + (val.shortcut?' <span class=\"vakata-contextmenu-shortcut vakata-contextmenu-shortcut-'+val.shortcut+'\">'+ (val.shortcut_label || '') +'</span>':'') + \"<\"+\"/a>\";\r\n\t\t\t\tif(val.submenu) {\r\n\t\t\t\t\ttmp = self._parse(val.submenu, true);\r\n\t\t\t\t\tif(tmp) { str += tmp; }\r\n\t\t\t\t}\r\n\t\t\t\tstr += \"<\"+\"/li>\";\r\n\t\t\t\tif(val.separator_after) {\r\n\t\t\t\t\tstr += \"<\"+\"li class='vakata-context-separator'><\"+\"a href='#' \" + (self._options.icons ? '' : 'style=\"margin-left:0px;\"') + \">&#160;<\"+\"/a><\"+\"/li>\";\r\n\t\t\t\t\tsep = true;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\tstr  = str.replace(/<li class\\='vakata-context-separator'\\><\\/li\\>$/,\"\");\r\n\t\t\tif(is_callback) { str += \"</ul>\"; }\r\n\t\t\t/**\r\n\t\t\t * triggered on the document when the contextmenu is parsed (HTML is built)\r\n\t\t\t * @event\r\n\t\t\t * @plugin contextmenu\r\n\t\t\t * @name context_parse.vakata\r\n\t\t\t * @param {jQuery} reference the element that was right clicked\r\n\t\t\t * @param {jQuery} element the DOM element of the menu itself\r\n\t\t\t * @param {Object} position the x & y coordinates of the menu\r\n\t\t\t */\r\n\t\t\tif(!is_callback) { self.html = str; self._trigger(\"parse\"); }\r\n\t\t\treturn str.length > 10 ? str : false;\r\n\t\t},\r\n\t\t_show_submenu : function (o) {\r\n\t\t\to = $(o);\r\n\t\t\tif(!o.length || !o.children(\"ul\").length) { return; }\r\n\t\t\tvar e = o.children(\"ul\"),\r\n\t\t\t\txl = o.offset().left,\r\n\t\t\t\tx = xl + o.outerWidth(),\r\n\t\t\t\ty = o.offset().top,\r\n\t\t\t\tw = e.width(),\r\n\t\t\t\th = e.height(),\r\n\t\t\t\tdw = $(window).width() + $(window).scrollLeft(),\r\n\t\t\t\tdh = $(window).height() + $(window).scrollTop();\r\n\t\t\t// може да се спести е една проверка - дали няма някой от класовете вече нагоре\r\n\t\t\tif(right_to_left) {\r\n\t\t\t\to[x - (w + 10 + o.outerWidth()) < 0 ? \"addClass\" : \"removeClass\"](\"vakata-context-left\");\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\to[x + w > dw  && xl > dw - x ? \"addClass\" : \"removeClass\"](\"vakata-context-right\");\r\n\t\t\t}\r\n\t\t\tif(y + h + 10 > dh) {\r\n\t\t\t\te.css(\"bottom\",\"-1px\");\r\n\t\t\t}\r\n\r\n\t\t\t//if does not fit - stick it to the side\r\n\t\t\tif (o.hasClass('vakata-context-right')) {\r\n\t\t\t\tif (xl < w) {\r\n\t\t\t\t\te.css(\"margin-right\", xl - w);\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tif (dw - x < w) {\r\n\t\t\t\t\te.css(\"margin-left\", dw - x - w);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\te.show();\r\n\t\t},\r\n\t\tshow : function (reference, position, data) {\r\n\t\t\tvar o, e, x, y, w, h, dw, dh, cond = true;\r\n\t\t\tswitch(cond) {\r\n\t\t\t\tcase (!position && !reference):\r\n\t\t\t\t\treturn false;\r\n\t\t\t\tcase (!!position && !!reference):\r\n\t\t\t\t\tthis.reference\t= reference;\r\n\t\t\t\t\tthis.position_x\t= position.x;\r\n\t\t\t\t\tthis.position_y\t= position.y;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase (!position && !!reference):\r\n\t\t\t\t\tthis.reference\t= reference;\r\n\t\t\t\t\to = reference.offset();\r\n\t\t\t\t\tthis.position_x\t= o.left + reference.outerHeight();\r\n\t\t\t\t\tthis.position_y\t= o.top;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase (!!position && !reference):\r\n\t\t\t\t\tthis.position_x\t= position.x;\r\n\t\t\t\t\tthis.position_y\t= position.y;\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tif(!!reference && !data && $(reference).data('vakata_contextmenu')) {\r\n\t\t\t\tdata = $(reference).data('vakata_contextmenu');\r\n\t\t\t}\r\n\r\n\t\t\tif(this.items.length) {\r\n\t\t\t\tthis.$el.appendTo(document.body);\r\n\t\t\t\te = this.$el;\r\n\t\t\t\tx = this.position_x;\r\n\t\t\t\ty = this.position_y;\r\n\t\t\t\tw = e.width();\r\n\t\t\t\th = e.height();\r\n\t\t\t\tdw = $(window).width() + $(window).scrollLeft();\r\n\t\t\t\tdh = $(window).height() + $(window).scrollTop();\r\n\t\t\t\tif(right_to_left) {\r\n\t\t\t\t\tx -= (e.outerWidth() - $(reference).outerWidth());\r\n\t\t\t\t\tif(x < $(window).scrollLeft() + 20) {\r\n\t\t\t\t\t\tx = $(window).scrollLeft() + 20;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif(x + w + 20 > dw) {\r\n\t\t\t\t\tx = dw - (w + 20);\r\n\t\t\t\t}\r\n\t\t\t\tif(y + h + 20 > dh) {\r\n\t\t\t\t\ty = dh - (h + 20);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.$el\r\n\t\t\t\t\t.css({ \"left\" : x, \"top\" : y })\r\n\t\t\t\t\t.show()\r\n\t\t\t\t\t.find('a').first().focus().parent().addClass(\"vakata-context-hover\");\r\n\t\t\t\tthis.is_visible = true;\r\n\r\n\t\t\t\tpopup = this;\r\n\r\n\t\t\t\t/**\r\n\t\t\t\t * triggered on the document when the contextmenu is shown\r\n\t\t\t\t * @event\r\n\t\t\t\t * @plugin contextmenu\r\n\t\t\t\t * @name context_show.vakata\r\n\t\t\t\t * @param {jQuery} reference the element that was right clicked\r\n\t\t\t\t * @param {jQuery} element the DOM element of the menu itself\r\n\t\t\t\t * @param {Object} position the x & y coordinates of the menu\r\n\t\t\t\t */\r\n\t\t\t\tthis._trigger(\"show\");\r\n\t\t\t}\r\n\t\t},\r\n\t\thide : function () {\r\n\t\t\tif(this.is_visible) {\r\n\t\t\t\tthis.$el.hide().find(\"ul\").hide().end().find(':focus').blur().end().detach();\r\n\t\t\t\tthis.is_visible = false;\r\n\t\t\t\tpopup = null;\r\n\t\t\t\t/**\r\n\t\t\t\t * triggered on the document when the contextmenu is hidden\r\n\t\t\t\t * @event\r\n\t\t\t\t * @plugin contextmenu\r\n\t\t\t\t * @name context_hide.vakata\r\n\t\t\t\t * @param {jQuery} reference the element that was right clicked\r\n\t\t\t\t * @param {jQuery} element the DOM element of the menu itself\r\n\t\t\t\t * @param {Object} position the x & y coordinates of the menu\r\n\t\t\t\t */\r\n\t\t\t\tthis._trigger(\"hide\");\r\n\t\t\t}\r\n\t\t}\r\n\r\n    });\t\r\n\r\n\t$(function () {\r\n\t\tright_to_left = $(document.body).css(\"direction\") === \"rtl\";\r\n\r\n\t\t$(document)\r\n\t\t\t.on(\"mousedown.sbswt.popup\", function (e) {\r\n\t\t\t\tif(popup && popup.$el[0] !== e.target  && !noder.contains(popup.$el[0], e.target)) {\r\n\t\t\t\t\tpopup.hide();\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\t.on(\"context_show.sbswt.popup\", function (e, data) {\r\n\t\t\t\tpopup.$el.find(\"li:has(ul)\").children(\"a\").addClass(\"vakata-context-parent\");\r\n\t\t\t\tif(right_to_left) {\r\n\t\t\t\t\tpopup.$el.addClass(\"vakata-context-rtl\").css(\"direction\", \"rtl\");\r\n\t\t\t\t}\r\n\t\t\t\t// also apply a RTL class?\r\n\t\t\t\tpopup.$el.find(\"ul\").hide().end();\r\n\t\t\t});\r\n\t});\r\n\r\n\tMenu.popup = function (reference, position, data) {\r\n\t\tvar m = new Menu({\r\n\t\t\treference : reference,\r\n\t\t\titems : data\r\n\t\t});\r\n\t\tm.show(reference,position);\r\n\t};\r\n\r\n\tMenu.hide = function() {\r\n\t\tif (popup) {\r\n\t\t\tpopup.hide();\r\n\t\t}\r\n\t}\r\n\r\n\treturn Menu;\r\n\r\n});\ndefine('skylark-jstree/plugin/contextmenu',[\r\n  \"skylark-langx/langx\",\r\n  \"skylark-utils-dom/browser\",\r\n  \"skylark-utils-dom/eventer\",\r\n  \"skylark-utils-dom/noder\",\r\n  \"skylark-utils-dom/geom\",\r\n  \"skylark-utils-dom/query\",\r\n  \"./menu\",\r\n  \"../tree\"\r\n],function(langx,browser,eventer,noder,geom,$, menu,jstree){\r\n\r\n\t\"use strict\";\r\n\r\n\tif($.jstree.plugins.contextmenu) { return; }\r\n\r\n\t/**\r\n\t * stores all defaults for the contextmenu plugin\r\n\t * @name $.jstree.defaults.contextmenu\r\n\t * @plugin contextmenu\r\n\t */\r\n\t$.jstree.defaults.contextmenu = {\r\n\t\t/**\r\n\t\t * a boolean indicating if the node should be selected when the context menu is invoked on it. Defaults to `true`.\r\n\t\t * @name $.jstree.defaults.contextmenu.select_node\r\n\t\t * @plugin contextmenu\r\n\t\t */\r\n\t\tselect_node : true,\r\n\t\t/**\r\n\t\t * a boolean indicating if the menu should be shown aligned with the node. Defaults to `true`, otherwise the mouse coordinates are used.\r\n\t\t * @name $.jstree.defaults.contextmenu.show_at_node\r\n\t\t * @plugin contextmenu\r\n\t\t */\r\n\t\tshow_at_node : true,\r\n\t\t/**\r\n\t\t * an object of actions, or a function that accepts a node and a callback function and calls the callback function with an object of actions available for that node (you can also return the items too).\r\n\t\t *\r\n\t\t * Each action consists of a key (a unique name) and a value which is an object with the following properties (only label and action are required). Once a menu item is activated the `action` function will be invoked with an object containing the following keys: item - the contextmenu item definition as seen below, reference - the DOM node that was used (the tree node), element - the contextmenu DOM element, position - an object with x/y properties indicating the position of the menu.\r\n\t\t *\r\n\t\t * * `separator_before` - a boolean indicating if there should be a separator before this item\r\n\t\t * * `separator_after` - a boolean indicating if there should be a separator after this item\r\n\t\t * * `_disabled` - a boolean indicating if this action should be disabled\r\n\t\t * * `label` - a string - the name of the action (could be a function returning a string)\r\n\t\t * * `title` - a string - an optional tooltip for the item\r\n\t\t * * `action` - a function to be executed if this item is chosen, the function will receive \r\n\t\t * * `icon` - a string, can be a path to an icon or a className, if using an image that is in the current directory use a `./` prefix, otherwise it will be detected as a class\r\n\t\t * * `shortcut` - keyCode which will trigger the action if the menu is open (for example `113` for rename, which equals F2)\r\n\t\t * * `shortcut_label` - shortcut label (like for example `F2` for rename)\r\n\t\t * * `submenu` - an object with the same structure as $.jstree.defaults.contextmenu.items which can be used to create a submenu - each key will be rendered as a separate option in a submenu that will appear once the current item is hovered\r\n\t\t *\r\n\t\t * @name $.jstree.defaults.contextmenu.items\r\n\t\t * @plugin contextmenu\r\n\t\t */\r\n\t\titems : function (o, cb) { // Could be an object directly\r\n\t\t\treturn {\r\n\t\t\t\t\"create\" : {\r\n\t\t\t\t\t\"separator_before\"\t: false,\r\n\t\t\t\t\t\"separator_after\"\t: true,\r\n\t\t\t\t\t\"_disabled\"\t\t\t: false, //(this.check(\"create_node\", data.reference, {}, \"last\")),\r\n\t\t\t\t\t\"label\"\t\t\t\t: \"Create\",\r\n\t\t\t\t\t\"action\"\t\t\t: function (data) {\r\n\t\t\t\t\t\tvar inst = $.jstree.reference(data.reference),\r\n\t\t\t\t\t\t\tobj = inst.get_node(data.reference);\r\n\t\t\t\t\t\tinst.create_node(obj, {}, \"last\", function (new_node) {\r\n\t\t\t\t\t\t\ttry {\r\n\t\t\t\t\t\t\t\tinst.edit(new_node);\r\n\t\t\t\t\t\t\t} catch (ex) {\r\n\t\t\t\t\t\t\t\tsetTimeout(function () { inst.edit(new_node); },0);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t\t\"rename\" : {\r\n\t\t\t\t\t\"separator_before\"\t: false,\r\n\t\t\t\t\t\"separator_after\"\t: false,\r\n\t\t\t\t\t\"_disabled\"\t\t\t: false, //(this.check(\"rename_node\", data.reference, this.get_parent(data.reference), \"\")),\r\n\t\t\t\t\t\"label\"\t\t\t\t: \"Rename\",\r\n\t\t\t\t\t/*!\r\n\t\t\t\t\t\"shortcut\"\t\t\t: 113,\r\n\t\t\t\t\t\"shortcut_label\"\t: 'F2',\r\n\t\t\t\t\t\"icon\"\t\t\t\t: \"glyphicon glyphicon-leaf\",\r\n\t\t\t\t\t*/\r\n\t\t\t\t\t\"action\"\t\t\t: function (data) {\r\n\t\t\t\t\t\tvar inst = $.jstree.reference(data.reference),\r\n\t\t\t\t\t\t\tobj = inst.get_node(data.reference);\r\n\t\t\t\t\t\tinst.edit(obj);\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t\t\"remove\" : {\r\n\t\t\t\t\t\"separator_before\"\t: false,\r\n\t\t\t\t\t\"icon\"\t\t\t\t: false,\r\n\t\t\t\t\t\"separator_after\"\t: false,\r\n\t\t\t\t\t\"_disabled\"\t\t\t: false, //(this.check(\"delete_node\", data.reference, this.get_parent(data.reference), \"\")),\r\n\t\t\t\t\t\"label\"\t\t\t\t: \"Delete\",\r\n\t\t\t\t\t\"action\"\t\t\t: function (data) {\r\n\t\t\t\t\t\tvar inst = $.jstree.reference(data.reference),\r\n\t\t\t\t\t\t\tobj = inst.get_node(data.reference);\r\n\t\t\t\t\t\tif(inst.is_selected(obj)) {\r\n\t\t\t\t\t\t\tinst.delete_node(inst.get_selected());\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tinst.delete_node(obj);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t\t\"ccp\" : {\r\n\t\t\t\t\t\"separator_before\"\t: true,\r\n\t\t\t\t\t\"icon\"\t\t\t\t: false,\r\n\t\t\t\t\t\"separator_after\"\t: false,\r\n\t\t\t\t\t\"label\"\t\t\t\t: \"Edit\",\r\n\t\t\t\t\t\"action\"\t\t\t: false,\r\n\t\t\t\t\t\"submenu\" : {\r\n\t\t\t\t\t\t\"cut\" : {\r\n\t\t\t\t\t\t\t\"separator_before\"\t: false,\r\n\t\t\t\t\t\t\t\"separator_after\"\t: false,\r\n\t\t\t\t\t\t\t\"label\"\t\t\t\t: \"Cut\",\r\n\t\t\t\t\t\t\t\"action\"\t\t\t: function (data) {\r\n\t\t\t\t\t\t\t\tvar inst = $.jstree.reference(data.reference),\r\n\t\t\t\t\t\t\t\t\tobj = inst.get_node(data.reference);\r\n\t\t\t\t\t\t\t\tif(inst.is_selected(obj)) {\r\n\t\t\t\t\t\t\t\t\tinst.cut(inst.get_top_selected());\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\tinst.cut(obj);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\"copy\" : {\r\n\t\t\t\t\t\t\t\"separator_before\"\t: false,\r\n\t\t\t\t\t\t\t\"icon\"\t\t\t\t: false,\r\n\t\t\t\t\t\t\t\"separator_after\"\t: false,\r\n\t\t\t\t\t\t\t\"label\"\t\t\t\t: \"Copy\",\r\n\t\t\t\t\t\t\t\"action\"\t\t\t: function (data) {\r\n\t\t\t\t\t\t\t\tvar inst = $.jstree.reference(data.reference),\r\n\t\t\t\t\t\t\t\t\tobj = inst.get_node(data.reference);\r\n\t\t\t\t\t\t\t\tif(inst.is_selected(obj)) {\r\n\t\t\t\t\t\t\t\t\tinst.copy(inst.get_top_selected());\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\tinst.copy(obj);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\"paste\" : {\r\n\t\t\t\t\t\t\t\"separator_before\"\t: false,\r\n\t\t\t\t\t\t\t\"icon\"\t\t\t\t: false,\r\n\t\t\t\t\t\t\t\"_disabled\"\t\t\t: function (data) {\r\n\t\t\t\t\t\t\t\treturn !$.jstree.reference(data.reference).can_paste();\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\"separator_after\"\t: false,\r\n\t\t\t\t\t\t\t\"label\"\t\t\t\t: \"Paste\",\r\n\t\t\t\t\t\t\t\"action\"\t\t\t: function (data) {\r\n\t\t\t\t\t\t\t\tvar inst = $.jstree.reference(data.reference),\r\n\t\t\t\t\t\t\t\t\tobj = inst.get_node(data.reference);\r\n\t\t\t\t\t\t\t\tinst.paste(obj);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t}\r\n\t};\r\n\r\n\t$.jstree.plugins.contextmenu = function (options, parent) {\r\n\t\tthis.bind = function () {\r\n\t\t\tparent.bind.call(this);\r\n\r\n\t\t\tvar last_ts = 0, cto = null, ex, ey;\r\n\t\t\tthis.element\r\n\t\t\t\t.on(\"init.jstree loading.jstree ready.jstree\", $.proxy(function () {\r\n\t\t\t\t\t\tthis.get_container_ul().addClass('jstree-contextmenu');\r\n\t\t\t\t\t}, this))\r\n\t\t\t\t.on(\"contextmenu.jstree\", \".jstree-anchor\", $.proxy(function (e, data) {\r\n\t\t\t\t\t\tif (e.target.tagName.toLowerCase() === 'input') {\r\n\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\te.preventDefault();\r\n\t\t\t\t\t\tlast_ts = e.ctrlKey ? +new Date() : 0;\r\n\t\t\t\t\t\tif(data || cto) {\r\n\t\t\t\t\t\t\tlast_ts = (+new Date()) + 10000;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif(cto) {\r\n\t\t\t\t\t\t\tclearTimeout(cto);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif(!this.is_loading(e.currentTarget)) {\r\n\t\t\t\t\t\t\tthis.show_contextmenu(e.currentTarget, e.pageX, e.pageY, e);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}, this))\r\n\t\t\t\t.on(\"click.jstree\", \".jstree-anchor\", $.proxy(function (e) {\r\n\t\t\t\t\t\tif(this._data.contextmenu.visible && (!last_ts || (+new Date()) - last_ts > 250)) { // work around safari & macOS ctrl+click\r\n\t\t\t\t\t\t\tmenu.hide();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tlast_ts = 0;\r\n\t\t\t\t\t}, this))\r\n\t\t\t\t.on(\"touchstart.jstree\", \".jstree-anchor\", function (e) {\r\n\t\t\t\t\t\tif(!e.originalEvent || !e.originalEvent.changedTouches || !e.originalEvent.changedTouches[0]) {\r\n\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tex = e.originalEvent.changedTouches[0].clientX;\r\n\t\t\t\t\t\tey = e.originalEvent.changedTouches[0].clientY;\r\n\t\t\t\t\t\tcto = setTimeout(function () {\r\n\t\t\t\t\t\t\t$(e.currentTarget).trigger('contextmenu', true);\r\n\t\t\t\t\t\t}, 750);\r\n\t\t\t\t\t})\r\n\t\t\t\t.on('touchmove.vakata.jstree', function (e) {\r\n\t\t\t\t\t\tif(cto && e.originalEvent && e.originalEvent.changedTouches && e.originalEvent.changedTouches[0] && (Math.abs(ex - e.originalEvent.changedTouches[0].clientX) > 10 || Math.abs(ey - e.originalEvent.changedTouches[0].clientY) > 10)) {\r\n\t\t\t\t\t\t\tclearTimeout(cto);\r\n\t\t\t\t\t\t\tmenu.hide();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t})\r\n\t\t\t\t.on('touchend.vakata.jstree', function (e) {\r\n\t\t\t\t\t\tif(cto) {\r\n\t\t\t\t\t\t\tclearTimeout(cto);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\r\n\t\t\t/*!\r\n\t\t\tif(!('oncontextmenu' in document.body) && ('ontouchstart' in document.body)) {\r\n\t\t\t\tvar el = null, tm = null;\r\n\t\t\t\tthis.element\r\n\t\t\t\t\t.on(\"touchstart\", \".jstree-anchor\", function (e) {\r\n\t\t\t\t\t\tel = e.currentTarget;\r\n\t\t\t\t\t\ttm = +new Date();\r\n\t\t\t\t\t\t$(document).one(\"touchend\", function (e) {\r\n\t\t\t\t\t\t\te.target = document.elementFromPoint(e.originalEvent.targetTouches[0].pageX - window.pageXOffset, e.originalEvent.targetTouches[0].pageY - window.pageYOffset);\r\n\t\t\t\t\t\t\te.currentTarget = e.target;\r\n\t\t\t\t\t\t\ttm = ((+(new Date())) - tm);\r\n\t\t\t\t\t\t\tif(e.target === el && tm > 600 && tm < 1000) {\r\n\t\t\t\t\t\t\t\te.preventDefault();\r\n\t\t\t\t\t\t\t\t$(el).trigger('contextmenu', e);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tel = null;\r\n\t\t\t\t\t\t\ttm = null;\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t});\r\n\t\t\t}\r\n\t\t\t*/\r\n\t\t\t$(document).on(\"context_hide.sbswt.popup\", $.proxy(function (e, data) {\r\n\t\t\t\tthis._data.contextmenu.visible = false;\r\n\t\t\t\t$(data.reference).removeClass('jstree-context');\r\n\t\t\t}, this));\r\n\t\t};\r\n\t\tthis.teardown = function () {\r\n\t\t\tif(this._data.contextmenu.visible) {\r\n\t\t\t\tmenu.hide();\r\n\t\t\t}\r\n\t\t\tparent.teardown.call(this);\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * prepare and show the context menu for a node\r\n\t\t * @name show_contextmenu(obj [, x, y])\r\n\t\t * @param {mixed} obj the node\r\n\t\t * @param {Number} x the x-coordinate relative to the document to show the menu at\r\n\t\t * @param {Number} y the y-coordinate relative to the document to show the menu at\r\n\t\t * @param {Object} e the event if available that triggered the contextmenu\r\n\t\t * @plugin contextmenu\r\n\t\t * @trigger show_contextmenu.jstree\r\n\t\t */\r\n\t\tthis.show_contextmenu = function (obj, x, y, e) {\r\n\t\t\tobj = this.get_node(obj);\r\n\t\t\tif(!obj || obj.id === $.jstree.root) { return false; }\r\n\t\t\tvar s = this.settings.contextmenu,\r\n\t\t\t\td = this.get_node(obj, true),\r\n\t\t\t\ta = d.children(\".jstree-anchor\"),\r\n\t\t\t\to = false,\r\n\t\t\t\ti = false;\r\n\t\t\tif(s.show_at_node || x === undefined || y === undefined) {\r\n\t\t\t\to = a.offset();\r\n\t\t\t\tx = o.left;\r\n\t\t\t\ty = o.top + this._data.core.li_height;\r\n\t\t\t}\r\n\t\t\tif(this.settings.contextmenu.select_node && !this.is_selected(obj)) {\r\n\t\t\t\tthis.activate_node(obj, e);\r\n\t\t\t}\r\n\r\n\t\t\ti = s.items;\r\n\t\t\tif($.isFunction(i)) {\r\n\t\t\t\ti = i.call(this, obj, $.proxy(function (i) {\r\n\t\t\t\t\tthis._show_contextmenu(obj, x, y, i);\r\n\t\t\t\t}, this));\r\n\t\t\t}\r\n\t\t\tif($.isPlainObject(i)) {\r\n\t\t\t\tthis._show_contextmenu(obj, x, y, i);\r\n\t\t\t}\r\n\t\t};\r\n\t\t/**\r\n\t\t * show the prepared context menu for a node\r\n\t\t * @name _show_contextmenu(obj, x, y, i)\r\n\t\t * @param {mixed} obj the node\r\n\t\t * @param {Number} x the x-coordinate relative to the document to show the menu at\r\n\t\t * @param {Number} y the y-coordinate relative to the document to show the menu at\r\n\t\t * @param {Number} i the object of items to show\r\n\t\t * @plugin contextmenu\r\n\t\t * @trigger show_contextmenu.jstree\r\n\t\t * @private\r\n\t\t */\r\n\t\tthis._show_contextmenu = function (obj, x, y, i) {\r\n\t\t\tvar d = this.get_node(obj, true),\r\n\t\t\t\ta = d.children(\".jstree-anchor\");\r\n\t\t\t$(document).one(\"context_show.sbswt.popup\", $.proxy(function (e, data) {\r\n\t\t\t\tvar cls = 'jstree-contextmenu jstree-' + this.get_theme() + '-contextmenu';\r\n\t\t\t\t$(data.element).addClass(cls);\r\n\t\t\t\ta.addClass('jstree-context');\r\n\t\t\t}, this));\r\n\t\t\tthis._data.contextmenu.visible = true;\r\n\t\t\tmenu.popup(a, { 'x' : x, 'y' : y }, i);\r\n\t\t\t/**\r\n\t\t\t * triggered when the contextmenu is shown for a node\r\n\t\t\t * @event\r\n\t\t\t * @name show_contextmenu.jstree\r\n\t\t\t * @param {Object} node the node\r\n\t\t\t * @param {Number} x the x-coordinate of the menu relative to the document\r\n\t\t\t * @param {Number} y the y-coordinate of the menu relative to the document\r\n\t\t\t * @plugin contextmenu\r\n\t\t\t */\r\n\t\t\tthis.trigger('show_contextmenu', { \"node\" : obj, \"x\" : x, \"y\" : y });\r\n\t\t};\r\n\t};\r\n\r\n\t// $.jstree.defaults.plugins.push(\"contextmenu\");\r\n\r\n\treturn $;\r\n\t\r\n});\r\n\ndefine('skylark-jstree/plugin/dnd',[\r\n  \"skylark-langx/langx\",\r\n  \"skylark-utils-dom/browser\",\r\n  \"skylark-utils-dom/eventer\",\r\n  \"skylark-utils-dom/noder\",\r\n  \"skylark-utils-dom/geom\",\r\n  \"skylark-utils-dom/query\",\r\n  \"../tree\"\r\n],function(langx,browser,eventer,noder,geom,$,jstree){\r\n\r\n\t\"use strict\";\r\n\r\n\tif($.jstree.plugins.dnd) { return; }\r\n\r\n\t/**\r\n\t * stores all defaults for the drag'n'drop plugin\r\n\t * @name $.jstree.defaults.dnd\r\n\t * @plugin dnd\r\n\t */\r\n\t$.jstree.defaults.dnd = {\r\n\t\t/**\r\n\t\t * a boolean indicating if a copy should be possible while dragging (by pressint the meta key or Ctrl). Defaults to `true`.\r\n\t\t * @name $.jstree.defaults.dnd.copy\r\n\t\t * @plugin dnd\r\n\t\t */\r\n\t\tcopy : true,\r\n\t\t/**\r\n\t\t * a number indicating how long a node should remain hovered while dragging to be opened. Defaults to `500`.\r\n\t\t * @name $.jstree.defaults.dnd.open_timeout\r\n\t\t * @plugin dnd\r\n\t\t */\r\n\t\topen_timeout : 500,\r\n\t\t/**\r\n\t\t * a function invoked each time a node is about to be dragged, invoked in the tree's scope and receives the nodes about to be dragged as an argument (array) and the event that started the drag - return `false` to prevent dragging\r\n\t\t * @name $.jstree.defaults.dnd.is_draggable\r\n\t\t * @plugin dnd\r\n\t\t */\r\n\t\tis_draggable : true,\r\n\t\t/**\r\n\t\t * a boolean indicating if checks should constantly be made while the user is dragging the node (as opposed to checking only on drop), default is `true`\r\n\t\t * @name $.jstree.defaults.dnd.check_while_dragging\r\n\t\t * @plugin dnd\r\n\t\t */\r\n\t\tcheck_while_dragging : true,\r\n\t\t/**\r\n\t\t * a boolean indicating if nodes from this tree should only be copied with dnd (as opposed to moved), default is `false`\r\n\t\t * @name $.jstree.defaults.dnd.always_copy\r\n\t\t * @plugin dnd\r\n\t\t */\r\n\t\talways_copy : false,\r\n\t\t/**\r\n\t\t * when dropping a node \"inside\", this setting indicates the position the node should go to - it can be an integer or a string: \"first\" (same as 0) or \"last\", default is `0`\r\n\t\t * @name $.jstree.defaults.dnd.inside_pos\r\n\t\t * @plugin dnd\r\n\t\t */\r\n\t\tinside_pos : 0,\r\n\t\t/**\r\n\t\t * when starting the drag on a node that is selected this setting controls if all selected nodes are dragged or only the single node, default is `true`, which means all selected nodes are dragged when the drag is started on a selected node\r\n\t\t * @name $.jstree.defaults.dnd.drag_selection\r\n\t\t * @plugin dnd\r\n\t\t */\r\n\t\tdrag_selection : true,\r\n\t\t/**\r\n\t\t * controls whether dnd works on touch devices. If left as boolean true dnd will work the same as in desktop browsers, which in some cases may impair scrolling. If set to boolean false dnd will not work on touch devices. There is a special third option - string \"selected\" which means only selected nodes can be dragged on touch devices.\r\n\t\t * @name $.jstree.defaults.dnd.touch\r\n\t\t * @plugin dnd\r\n\t\t */\r\n\t\ttouch : true,\r\n\t\t/**\r\n\t\t * controls whether items can be dropped anywhere on the node, not just on the anchor, by default only the node anchor is a valid drop target. Works best with the wholerow plugin. If enabled on mobile depending on the interface it might be hard for the user to cancel the drop, since the whole tree container will be a valid drop target.\r\n\t\t * @name $.jstree.defaults.dnd.large_drop_target\r\n\t\t * @plugin dnd\r\n\t\t */\r\n\t\tlarge_drop_target : false,\r\n\t\t/**\r\n\t\t * controls whether a drag can be initiated from any part of the node and not just the text/icon part, works best with the wholerow plugin. Keep in mind it can cause problems with tree scrolling on mobile depending on the interface - in that case set the touch option to \"selected\".\r\n\t\t * @name $.jstree.defaults.dnd.large_drag_target\r\n\t\t * @plugin dnd\r\n\t\t */\r\n\t\tlarge_drag_target : false,\r\n\t\t/**\r\n\t\t * controls whether use HTML5 dnd api instead of classical. That will allow better integration of dnd events with other HTML5 controls.\r\n\t\t * @reference http://caniuse.com/#feat=dragndrop\r\n\t\t * @name $.jstree.defaults.dnd.use_html5\r\n\t\t * @plugin dnd\r\n\t\t */\r\n\t\tuse_html5: false\r\n\t};\r\n\tvar drg, elm;\r\n\t// TODO: now check works by checking for each node individually, how about max_children, unique, etc?\r\n\t$.jstree.plugins.dnd = function (options, parent) {\r\n\t\tthis.init = function (el, options) {\r\n\t\t\tparent.init.call(this, el, options);\r\n\t\t\tthis.settings.dnd.use_html5 = this.settings.dnd.use_html5 && ('draggable' in document.createElement('span'));\r\n\t\t};\r\n\t\tthis.bind = function () {\r\n\t\t\tparent.bind.call(this);\r\n\r\n\t\t\tthis.element\r\n\t\t\t\t.on(this.settings.dnd.use_html5 ? 'dragstart.jstree' : 'mousedown.jstree touchstart.jstree', this.settings.dnd.large_drag_target ? '.jstree-node' : '.jstree-anchor', $.proxy(function (e) {\r\n\t\t\t\t\t\tif(this.settings.dnd.large_drag_target && $(e.target).closest('.jstree-node')[0] !== e.currentTarget) {\r\n\t\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif(e.type === \"touchstart\" && (!this.settings.dnd.touch || (this.settings.dnd.touch === 'selected' && !$(e.currentTarget).closest('.jstree-node').children('.jstree-anchor').hasClass('jstree-clicked')))) {\r\n\t\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tvar obj = this.get_node(e.target),\r\n\t\t\t\t\t\t\tmlt = this.is_selected(obj) && this.settings.dnd.drag_selection ? this.get_top_selected().length : 1,\r\n\t\t\t\t\t\t\ttxt = (mlt > 1 ? mlt + ' ' + this.get_string('nodes') : this.get_text(e.currentTarget));\r\n\t\t\t\t\t\tif(this.settings.core.force_text) {\r\n\t\t\t\t\t\t\ttxt = $.vakata.html.escape(txt);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif(obj && obj.id && obj.id !== $.jstree.root && (e.which === 1 || e.type === \"touchstart\" || e.type === \"dragstart\") &&\r\n\t\t\t\t\t\t\t(this.settings.dnd.is_draggable === true || ($.isFunction(this.settings.dnd.is_draggable) && this.settings.dnd.is_draggable.call(this, (mlt > 1 ? this.get_top_selected(true) : [obj]), e)))\r\n\t\t\t\t\t\t) {\r\n\t\t\t\t\t\t\tdrg = { 'jstree' : true, 'origin' : this, 'obj' : this.get_node(obj,true), 'nodes' : mlt > 1 ? this.get_top_selected() : [obj.id] };\r\n\t\t\t\t\t\t\telm = e.currentTarget;\r\n\t\t\t\t\t\t\tif (this.settings.dnd.use_html5) {\r\n\t\t\t\t\t\t\t\t$.vakata.dnd._trigger('start', e, { 'helper': $(), 'element': elm, 'data': drg });\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tthis.element.trigger('mousedown.jstree');\r\n\t\t\t\t\t\t\t\treturn $.vakata.dnd.start(e, drg, '<div id=\"jstree-dnd\" class=\"jstree-' + this.get_theme() + ' jstree-' + this.get_theme() + '-' + this.get_theme_variant() + ' ' + ( this.settings.core.themes.responsive ? ' jstree-dnd-responsive' : '' ) + '\"><i class=\"jstree-icon jstree-er\"></i>' + txt + '<ins class=\"jstree-copy\" style=\"display:none;\">+</ins></div>');\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}, this));\r\n\t\t\tif (this.settings.dnd.use_html5) {\r\n\t\t\t\tthis.element\r\n\t\t\t\t\t.on('dragover.jstree', function (e) {\r\n\t\t\t\t\t\t\te.preventDefault();\r\n\t\t\t\t\t\t\t$.vakata.dnd._trigger('move', e, { 'helper': $(), 'element': elm, 'data': drg });\r\n\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t//.on('dragenter.jstree', this.settings.dnd.large_drop_target ? '.jstree-node' : '.jstree-anchor', $.proxy(function (e) {\r\n\t\t\t\t\t//\t\te.preventDefault();\r\n\t\t\t\t\t//\t\t$.vakata.dnd._trigger('move', e, { 'helper': $(), 'element': elm, 'data': drg });\r\n\t\t\t\t\t//\t\treturn false;\r\n\t\t\t\t\t//\t}, this))\r\n\t\t\t\t\t.on('drop.jstree', $.proxy(function (e) {\r\n\t\t\t\t\t\t\te.preventDefault();\r\n\t\t\t\t\t\t\t$.vakata.dnd._trigger('stop', e, { 'helper': $(), 'element': elm, 'data': drg });\r\n\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t}, this));\r\n\t\t\t}\r\n\t\t};\r\n\t\tthis.redraw_node = function(obj, deep, callback, force_render) {\r\n\t\t\tobj = parent.redraw_node.apply(this, arguments);\r\n\t\t\tif (obj && this.settings.dnd.use_html5) {\r\n\t\t\t\tif (this.settings.dnd.large_drag_target) {\r\n\t\t\t\t\tobj.setAttribute('draggable', true);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tvar i, j, tmp = null;\r\n\t\t\t\t\tfor(i = 0, j = obj.childNodes.length; i < j; i++) {\r\n\t\t\t\t\t\tif(obj.childNodes[i] && obj.childNodes[i].className && obj.childNodes[i].className.indexOf(\"jstree-anchor\") !== -1) {\r\n\t\t\t\t\t\t\ttmp = obj.childNodes[i];\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(tmp) {\r\n\t\t\t\t\t\ttmp.setAttribute('draggable', true);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn obj;\r\n\t\t};\r\n\t};\r\n\r\n\t$(function() {\r\n\t\t// bind only once for all instances\r\n\t\tvar lastmv = false,\r\n\t\t\tlaster = false,\r\n\t\t\tlastev = false,\r\n\t\t\topento = false,\r\n\t\t\tmarker = $('<div id=\"jstree-marker\">&#160;</div>').hide(); //.appendTo('body');\r\n\r\n\t\t$(document)\r\n\t\t\t.on('dnd_start.vakata.jstree', function (e, data) {\r\n\t\t\t\tlastmv = false;\r\n\t\t\t\tlastev = false;\r\n\t\t\t\tif(!data || !data.data || !data.data.jstree) { return; }\r\n\t\t\t\tmarker.appendTo(document.body); //.show();\r\n\t\t\t})\r\n\t\t\t.on('dnd_move.vakata.jstree', function (e, data) {\r\n\t\t\t\tvar isDifferentNode = data.event.target !== lastev.target;\r\n\t\t\t\tif(opento) {\r\n\t\t\t\t\tif (!data.event || data.event.type !== 'dragover' || isDifferentNode) {\r\n\t\t\t\t\t\tclearTimeout(opento);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif(!data || !data.data || !data.data.jstree) { return; }\r\n\r\n\t\t\t\t// if we are hovering the marker image do nothing (can happen on \"inside\" drags)\r\n\t\t\t\tif(data.event.target.id && data.event.target.id === 'jstree-marker') {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\tlastev = data.event;\r\n\r\n\t\t\t\tvar ins = $.jstree.reference(data.event.target),\r\n\t\t\t\t\tref = false,\r\n\t\t\t\t\toff = false,\r\n\t\t\t\t\trel = false,\r\n\t\t\t\t\ttmp, l, t, h, p, i, o, ok, t1, t2, op, ps, pr, ip, tm, is_copy, pn;\r\n\t\t\t\t// if we are over an instance\r\n\t\t\t\tif(ins && ins._data && ins._data.dnd) {\r\n\t\t\t\t\tmarker.attr('class', 'jstree-' + ins.get_theme() + ( ins.settings.core.themes.responsive ? ' jstree-dnd-responsive' : '' ));\r\n\t\t\t\t\tis_copy = data.data.origin && (data.data.origin.settings.dnd.always_copy || (data.data.origin.settings.dnd.copy && (data.event.metaKey || data.event.ctrlKey)));\r\n\t\t\t\t\tdata.helper\r\n\t\t\t\t\t\t.children().attr('class', 'jstree-' + ins.get_theme() + ' jstree-' + ins.get_theme() + '-' + ins.get_theme_variant() + ' ' + ( ins.settings.core.themes.responsive ? ' jstree-dnd-responsive' : '' ))\r\n\t\t\t\t\t\t.find('.jstree-copy').first()[ is_copy ? 'show' : 'hide' ]();\r\n\r\n\t\t\t\t\t// if are hovering the container itself add a new root node\r\n\t\t\t\t\t//console.log(data.event);\r\n\t\t\t\t\tif( (data.event.target === ins.element[0] || data.event.target === ins.get_container_ul()[0]) && ins.get_container_ul().children().length === 0) {\r\n\t\t\t\t\t\tok = true;\r\n\t\t\t\t\t\tfor(t1 = 0, t2 = data.data.nodes.length; t1 < t2; t1++) {\r\n\t\t\t\t\t\t\tok = ok && ins.check( (data.data.origin && (data.data.origin.settings.dnd.always_copy || (data.data.origin.settings.dnd.copy && (data.event.metaKey || data.event.ctrlKey)) ) ? \"copy_node\" : \"move_node\"), (data.data.origin && data.data.origin !== ins ? data.data.origin.get_node(data.data.nodes[t1]) : data.data.nodes[t1]), $.jstree.root, 'last', { 'dnd' : true, 'ref' : ins.get_node($.jstree.root), 'pos' : 'i', 'origin' : data.data.origin, 'is_multi' : (data.data.origin && data.data.origin !== ins), 'is_foreign' : (!data.data.origin) });\r\n\t\t\t\t\t\t\tif(!ok) { break; }\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif(ok) {\r\n\t\t\t\t\t\t\tlastmv = { 'ins' : ins, 'par' : $.jstree.root, 'pos' : 'last' };\r\n\t\t\t\t\t\t\tmarker.hide();\r\n\t\t\t\t\t\t\tdata.helper.find('.jstree-icon').first().removeClass('jstree-er').addClass('jstree-ok');\r\n\t\t\t\t\t\t\tif (data.event.originalEvent && data.event.originalEvent.dataTransfer) {\r\n\t\t\t\t\t\t\t\tdata.event.originalEvent.dataTransfer.dropEffect = is_copy ? 'copy' : 'move';\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\t// if we are hovering a tree node\r\n\t\t\t\t\t\tref = ins.settings.dnd.large_drop_target ? $(data.event.target).closest('.jstree-node').children('.jstree-anchor') : $(data.event.target).closest('.jstree-anchor');\r\n\t\t\t\t\t\tif(ref && ref.length && ref.parent().is('.jstree-closed, .jstree-open, .jstree-leaf')) {\r\n\t\t\t\t\t\t\toff = ref.offset();\r\n\t\t\t\t\t\t\trel = (data.event.pageY !== undefined ? data.event.pageY : data.event.originalEvent.pageY) - off.top;\r\n\t\t\t\t\t\t\th = ref.outerHeight();\r\n\t\t\t\t\t\t\tif(rel < h / 3) {\r\n\t\t\t\t\t\t\t\to = ['b', 'i', 'a'];\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse if(rel > h - h / 3) {\r\n\t\t\t\t\t\t\t\to = ['a', 'i', 'b'];\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\to = rel > h / 2 ? ['i', 'a', 'b'] : ['i', 'b', 'a'];\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t$.each(o, function (j, v) {\r\n\t\t\t\t\t\t\t\tswitch(v) {\r\n\t\t\t\t\t\t\t\t\tcase 'b':\r\n\t\t\t\t\t\t\t\t\t\tl = off.left - 6;\r\n\t\t\t\t\t\t\t\t\t\tt = off.top;\r\n\t\t\t\t\t\t\t\t\t\tp = ins.get_parent(ref);\r\n\t\t\t\t\t\t\t\t\t\ti = ref.parent().index();\r\n\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\tcase 'i':\r\n\t\t\t\t\t\t\t\t\t\tip = ins.settings.dnd.inside_pos;\r\n\t\t\t\t\t\t\t\t\t\ttm = ins.get_node(ref.parent());\r\n\t\t\t\t\t\t\t\t\t\tl = off.left - 2;\r\n\t\t\t\t\t\t\t\t\t\tt = off.top + h / 2 + 1;\r\n\t\t\t\t\t\t\t\t\t\tp = tm.id;\r\n\t\t\t\t\t\t\t\t\t\ti = ip === 'first' ? 0 : (ip === 'last' ? tm.children.length : Math.min(ip, tm.children.length));\r\n\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\tcase 'a':\r\n\t\t\t\t\t\t\t\t\t\tl = off.left - 6;\r\n\t\t\t\t\t\t\t\t\t\tt = off.top + h;\r\n\t\t\t\t\t\t\t\t\t\tp = ins.get_parent(ref);\r\n\t\t\t\t\t\t\t\t\t\ti = ref.parent().index() + 1;\r\n\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tok = true;\r\n\t\t\t\t\t\t\t\tfor(t1 = 0, t2 = data.data.nodes.length; t1 < t2; t1++) {\r\n\t\t\t\t\t\t\t\t\top = data.data.origin && (data.data.origin.settings.dnd.always_copy || (data.data.origin.settings.dnd.copy && (data.event.metaKey || data.event.ctrlKey))) ? \"copy_node\" : \"move_node\";\r\n\t\t\t\t\t\t\t\t\tps = i;\r\n\t\t\t\t\t\t\t\t\tif(op === \"move_node\" && v === 'a' && (data.data.origin && data.data.origin === ins) && p === ins.get_parent(data.data.nodes[t1])) {\r\n\t\t\t\t\t\t\t\t\t\tpr = ins.get_node(p);\r\n\t\t\t\t\t\t\t\t\t\tif(ps > $.inArray(data.data.nodes[t1], pr.children)) {\r\n\t\t\t\t\t\t\t\t\t\t\tps -= 1;\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\tok = ok && ( (ins && ins.settings && ins.settings.dnd && ins.settings.dnd.check_while_dragging === false) || ins.check(op, (data.data.origin && data.data.origin !== ins ? data.data.origin.get_node(data.data.nodes[t1]) : data.data.nodes[t1]), p, ps, { 'dnd' : true, 'ref' : ins.get_node(ref.parent()), 'pos' : v, 'origin' : data.data.origin, 'is_multi' : (data.data.origin && data.data.origin !== ins), 'is_foreign' : (!data.data.origin) }) );\r\n\t\t\t\t\t\t\t\t\tif(!ok) {\r\n\t\t\t\t\t\t\t\t\t\tif(ins && ins.last_error) { laster = ins.last_error(); }\r\n\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tif(v === 'i' && ref.parent().is('.jstree-closed') && ins.settings.dnd.open_timeout) {\r\n\t\t\t\t\t\t\t\t\tif (!data.event || data.event.type !== 'dragover' || isDifferentNode) {\r\n\t\t\t\t\t\t\t\t\t\tif (opento) { clearTimeout(opento); }\r\n\t\t\t\t\t\t\t\t\t\topento = setTimeout((function (x, z) { return function () { x.open_node(z); }; }(ins, ref)), ins.settings.dnd.open_timeout);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tif(ok) {\r\n\t\t\t\t\t\t\t\t\tpn = ins.get_node(p, true);\r\n\t\t\t\t\t\t\t\t\tif (!pn.hasClass('.jstree-dnd-parent')) {\r\n\t\t\t\t\t\t\t\t\t\t$('.jstree-dnd-parent').removeClass('jstree-dnd-parent');\r\n\t\t\t\t\t\t\t\t\t\tpn.addClass('jstree-dnd-parent');\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\tlastmv = { 'ins' : ins, 'par' : p, 'pos' : v === 'i' && ip === 'last' && i === 0 && !ins.is_loaded(tm) ? 'last' : i };\r\n\t\t\t\t\t\t\t\t\tmarker.css({ 'left' : l + 'px', 'top' : t + 'px' }).show();\r\n\t\t\t\t\t\t\t\t\tdata.helper.find('.jstree-icon').first().removeClass('jstree-er').addClass('jstree-ok');\r\n\t\t\t\t\t\t\t\t\tif (data.event.originalEvent && data.event.originalEvent.dataTransfer) {\r\n\t\t\t\t\t\t\t\t\t\tdata.event.originalEvent.dataTransfer.dropEffect = is_copy ? 'copy' : 'move';\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\tlaster = {};\r\n\t\t\t\t\t\t\t\t\to = true;\r\n\t\t\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\tif(o === true) { return; }\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t$('.jstree-dnd-parent').removeClass('jstree-dnd-parent');\r\n\t\t\t\tlastmv = false;\r\n\t\t\t\tdata.helper.find('.jstree-icon').removeClass('jstree-ok').addClass('jstree-er');\r\n\t\t\t\tif (data.event.originalEvent && data.event.originalEvent.dataTransfer) {\r\n\t\t\t\t\tdata.event.originalEvent.dataTransfer.dropEffect = 'none';\r\n\t\t\t\t}\r\n\t\t\t\tmarker.hide();\r\n\t\t\t})\r\n\t\t\t.on('dnd_scroll.vakata.jstree', function (e, data) {\r\n\t\t\t\tif(!data || !data.data || !data.data.jstree) { return; }\r\n\t\t\t\tmarker.hide();\r\n\t\t\t\tlastmv = false;\r\n\t\t\t\tlastev = false;\r\n\t\t\t\tdata.helper.find('.jstree-icon').first().removeClass('jstree-ok').addClass('jstree-er');\r\n\t\t\t})\r\n\t\t\t.on('dnd_stop.vakata.jstree', function (e, data) {\r\n\t\t\t\t$('.jstree-dnd-parent').removeClass('jstree-dnd-parent');\r\n\t\t\t\tif(opento) { clearTimeout(opento); }\r\n\t\t\t\tif(!data || !data.data || !data.data.jstree) { return; }\r\n\t\t\t\tmarker.hide().detach();\r\n\t\t\t\tvar i, j, nodes = [];\r\n\t\t\t\tif(lastmv) {\r\n\t\t\t\t\tfor(i = 0, j = data.data.nodes.length; i < j; i++) {\r\n\t\t\t\t\t\tnodes[i] = data.data.origin ? data.data.origin.get_node(data.data.nodes[i]) : data.data.nodes[i];\r\n\t\t\t\t\t}\r\n\t\t\t\t\tlastmv.ins[ data.data.origin && (data.data.origin.settings.dnd.always_copy || (data.data.origin.settings.dnd.copy && (data.event.metaKey || data.event.ctrlKey))) ? 'copy_node' : 'move_node' ](nodes, lastmv.par, lastmv.pos, false, false, false, data.data.origin);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\ti = $(data.event.target).closest('.jstree');\r\n\t\t\t\t\tif(i.length && laster && laster.error && laster.error === 'check') {\r\n\t\t\t\t\t\ti = i.jstree(true);\r\n\t\t\t\t\t\tif(i) {\r\n\t\t\t\t\t\t\ti.settings.core.error.call(this, laster);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tlastev = false;\r\n\t\t\t\tlastmv = false;\r\n\t\t\t})\r\n\t\t\t.on('keyup.jstree keydown.jstree', function (e, data) {\r\n\t\t\t\tdata = $.vakata.dnd._get();\r\n\t\t\t\tif(data && data.data && data.data.jstree) {\r\n\t\t\t\t\tif (e.type === \"keyup\" && e.which === 27) {\r\n\t\t\t\t\t\tif (opento) { clearTimeout(opento); }\r\n\t\t\t\t\t\tlastmv = false;\r\n\t\t\t\t\t\tlaster = false;\r\n\t\t\t\t\t\tlastev = false;\r\n\t\t\t\t\t\topento = false;\r\n\t\t\t\t\t\tmarker.hide().detach();\r\n\t\t\t\t\t\t$.vakata.dnd._clean();\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tdata.helper.find('.jstree-copy').first()[ data.data.origin && (data.data.origin.settings.dnd.always_copy || (data.data.origin.settings.dnd.copy && (e.metaKey || e.ctrlKey))) ? 'show' : 'hide' ]();\r\n\t\t\t\t\t\tif(lastev) {\r\n\t\t\t\t\t\t\tlastev.metaKey = e.metaKey;\r\n\t\t\t\t\t\t\tlastev.ctrlKey = e.ctrlKey;\r\n\t\t\t\t\t\t\t$.vakata.dnd._trigger('move', lastev);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t});\r\n\r\n\t// helpers\r\n\t(function ($) {\r\n\t\t$.vakata.html = {\r\n\t\t\tdiv : $('<div />'),\r\n\t\t\tescape : function (str) {\r\n\t\t\t\treturn $.vakata.html.div.text(str).html();\r\n\t\t\t},\r\n\t\t\tstrip : function (str) {\r\n\t\t\t\treturn $.vakata.html.div.empty().append($.parseHTML(str)).text();\r\n\t\t\t}\r\n\t\t};\r\n\t\t// private variable\r\n\t\tvar vakata_dnd = {\r\n\t\t\telement\t: false,\r\n\t\t\ttarget\t: false,\r\n\t\t\tis_down\t: false,\r\n\t\t\tis_drag\t: false,\r\n\t\t\thelper\t: false,\r\n\t\t\thelper_w: 0,\r\n\t\t\tdata\t: false,\r\n\t\t\tinit_x\t: 0,\r\n\t\t\tinit_y\t: 0,\r\n\t\t\tscroll_l: 0,\r\n\t\t\tscroll_t: 0,\r\n\t\t\tscroll_e: false,\r\n\t\t\tscroll_i: false,\r\n\t\t\tis_touch: false\r\n\t\t};\r\n\t\t$.vakata.dnd = {\r\n\t\t\tsettings : {\r\n\t\t\t\tscroll_speed\t\t: 10,\r\n\t\t\t\tscroll_proximity\t: 20,\r\n\t\t\t\thelper_left\t\t\t: 5,\r\n\t\t\t\thelper_top\t\t\t: 10,\r\n\t\t\t\tthreshold\t\t\t: 5,\r\n\t\t\t\tthreshold_touch\t\t: 10\r\n\t\t\t},\r\n\t\t\t_trigger : function (event_name, e, data) {\r\n\t\t\t\tif (data === undefined) {\r\n\t\t\t\t\tdata = $.vakata.dnd._get();\r\n\t\t\t\t}\r\n\t\t\t\tdata.event = e;\r\n\t\t\t\t$(document).trigger(\"dnd_\" + event_name + \".vakata\", data);\r\n\t\t\t},\r\n\t\t\t_get : function () {\r\n\t\t\t\treturn {\r\n\t\t\t\t\t\"data\"\t\t: vakata_dnd.data,\r\n\t\t\t\t\t\"element\"\t: vakata_dnd.element,\r\n\t\t\t\t\t\"helper\"\t: vakata_dnd.helper\r\n\t\t\t\t};\r\n\t\t\t},\r\n\t\t\t_clean : function () {\r\n\t\t\t\tif(vakata_dnd.helper) { vakata_dnd.helper.remove(); }\r\n\t\t\t\tif(vakata_dnd.scroll_i) { clearInterval(vakata_dnd.scroll_i); vakata_dnd.scroll_i = false; }\r\n\t\t\t\tvakata_dnd = {\r\n\t\t\t\t\telement\t: false,\r\n\t\t\t\t\ttarget\t: false,\r\n\t\t\t\t\tis_down\t: false,\r\n\t\t\t\t\tis_drag\t: false,\r\n\t\t\t\t\thelper\t: false,\r\n\t\t\t\t\thelper_w: 0,\r\n\t\t\t\t\tdata\t: false,\r\n\t\t\t\t\tinit_x\t: 0,\r\n\t\t\t\t\tinit_y\t: 0,\r\n\t\t\t\t\tscroll_l: 0,\r\n\t\t\t\t\tscroll_t: 0,\r\n\t\t\t\t\tscroll_e: false,\r\n\t\t\t\t\tscroll_i: false,\r\n\t\t\t\t\tis_touch: false\r\n\t\t\t\t};\r\n\t\t\t\t$(document).off(\"mousemove.vakata.jstree touchmove.vakata.jstree\", $.vakata.dnd.drag);\r\n\t\t\t\t$(document).off(\"mouseup.vakata.jstree touchend.vakata.jstree\", $.vakata.dnd.stop);\r\n\t\t\t},\r\n\t\t\t_scroll : function (init_only) {\r\n\t\t\t\tif(!vakata_dnd.scroll_e || (!vakata_dnd.scroll_l && !vakata_dnd.scroll_t)) {\r\n\t\t\t\t\tif(vakata_dnd.scroll_i) { clearInterval(vakata_dnd.scroll_i); vakata_dnd.scroll_i = false; }\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\tif(!vakata_dnd.scroll_i) {\r\n\t\t\t\t\tvakata_dnd.scroll_i = setInterval($.vakata.dnd._scroll, 100);\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\tif(init_only === true) { return false; }\r\n\r\n\t\t\t\tvar i = vakata_dnd.scroll_e.scrollTop(),\r\n\t\t\t\t\tj = vakata_dnd.scroll_e.scrollLeft();\r\n\t\t\t\tvakata_dnd.scroll_e.scrollTop(i + vakata_dnd.scroll_t * $.vakata.dnd.settings.scroll_speed);\r\n\t\t\t\tvakata_dnd.scroll_e.scrollLeft(j + vakata_dnd.scroll_l * $.vakata.dnd.settings.scroll_speed);\r\n\t\t\t\tif(i !== vakata_dnd.scroll_e.scrollTop() || j !== vakata_dnd.scroll_e.scrollLeft()) {\r\n\t\t\t\t\t/**\r\n\t\t\t\t\t * triggered on the document when a drag causes an element to scroll\r\n\t\t\t\t\t * @event\r\n\t\t\t\t\t * @plugin dnd\r\n\t\t\t\t\t * @name dnd_scroll.vakata\r\n\t\t\t\t\t * @param {Mixed} data any data supplied with the call to $.vakata.dnd.start\r\n\t\t\t\t\t * @param {DOM} element the DOM element being dragged\r\n\t\t\t\t\t * @param {jQuery} helper the helper shown next to the mouse\r\n\t\t\t\t\t * @param {jQuery} event the element that is scrolling\r\n\t\t\t\t\t */\r\n\t\t\t\t\t$.vakata.dnd._trigger(\"scroll\", vakata_dnd.scroll_e);\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\tstart : function (e, data, html) {\r\n\t\t\t\tif(e.type === \"touchstart\" && e.originalEvent && e.originalEvent.changedTouches && e.originalEvent.changedTouches[0]) {\r\n\t\t\t\t\te.pageX = e.originalEvent.changedTouches[0].pageX;\r\n\t\t\t\t\te.pageY = e.originalEvent.changedTouches[0].pageY;\r\n\t\t\t\t\te.target = document.elementFromPoint(e.originalEvent.changedTouches[0].pageX - window.pageXOffset, e.originalEvent.changedTouches[0].pageY - window.pageYOffset);\r\n\t\t\t\t}\r\n\t\t\t\tif(vakata_dnd.is_drag) { $.vakata.dnd.stop({}); }\r\n\t\t\t\ttry {\r\n\t\t\t\t\te.currentTarget.unselectable = \"on\";\r\n\t\t\t\t\te.currentTarget.onselectstart = function() { return false; };\r\n\t\t\t\t\tif(e.currentTarget.style) {\r\n\t\t\t\t\t\te.currentTarget.style.touchAction = \"none\";\r\n\t\t\t\t\t\te.currentTarget.style.msTouchAction = \"none\";\r\n\t\t\t\t\t\te.currentTarget.style.MozUserSelect = \"none\";\r\n\t\t\t\t\t}\r\n\t\t\t\t} catch(ignore) { }\r\n\t\t\t\tvakata_dnd.init_x\t= e.pageX;\r\n\t\t\t\tvakata_dnd.init_y\t= e.pageY;\r\n\t\t\t\tvakata_dnd.data\t\t= data;\r\n\t\t\t\tvakata_dnd.is_down\t= true;\r\n\t\t\t\tvakata_dnd.element\t= e.currentTarget;\r\n\t\t\t\tvakata_dnd.target\t= e.target;\r\n\t\t\t\tvakata_dnd.is_touch\t= e.type === \"touchstart\";\r\n\t\t\t\tif(html !== false) {\r\n\t\t\t\t\tvakata_dnd.helper = $(\"<div id='vakata-dnd'></div>\").html(html).css({\r\n\t\t\t\t\t\t\"display\"\t\t: \"block\",\r\n\t\t\t\t\t\t\"margin\"\t\t: \"0\",\r\n\t\t\t\t\t\t\"padding\"\t\t: \"0\",\r\n\t\t\t\t\t\t\"position\"\t\t: \"absolute\",\r\n\t\t\t\t\t\t\"top\"\t\t\t: \"-2000px\",\r\n\t\t\t\t\t\t\"lineHeight\"\t: \"16px\",\r\n\t\t\t\t\t\t\"zIndex\"\t\t: \"10000\"\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\t$(document).on(\"mousemove.vakata.jstree touchmove.vakata.jstree\", $.vakata.dnd.drag);\r\n\t\t\t\t$(document).on(\"mouseup.vakata.jstree touchend.vakata.jstree\", $.vakata.dnd.stop);\r\n\t\t\t\treturn false;\r\n\t\t\t},\r\n\t\t\tdrag : function (e) {\r\n\t\t\t\tif(e.type === \"touchmove\" && e.originalEvent && e.originalEvent.changedTouches && e.originalEvent.changedTouches[0]) {\r\n\t\t\t\t\te.pageX = e.originalEvent.changedTouches[0].pageX;\r\n\t\t\t\t\te.pageY = e.originalEvent.changedTouches[0].pageY;\r\n\t\t\t\t\te.target = document.elementFromPoint(e.originalEvent.changedTouches[0].pageX - window.pageXOffset, e.originalEvent.changedTouches[0].pageY - window.pageYOffset);\r\n\t\t\t\t}\r\n\t\t\t\tif(!vakata_dnd.is_down) { return; }\r\n\t\t\t\tif(!vakata_dnd.is_drag) {\r\n\t\t\t\t\tif(\r\n\t\t\t\t\t\tMath.abs(e.pageX - vakata_dnd.init_x) > (vakata_dnd.is_touch ? $.vakata.dnd.settings.threshold_touch : $.vakata.dnd.settings.threshold) ||\r\n\t\t\t\t\t\tMath.abs(e.pageY - vakata_dnd.init_y) > (vakata_dnd.is_touch ? $.vakata.dnd.settings.threshold_touch : $.vakata.dnd.settings.threshold)\r\n\t\t\t\t\t) {\r\n\t\t\t\t\t\tif(vakata_dnd.helper) {\r\n\t\t\t\t\t\t\tvakata_dnd.helper.appendTo(document.body);\r\n\t\t\t\t\t\t\tvakata_dnd.helper_w = vakata_dnd.helper.outerWidth();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tvakata_dnd.is_drag = true;\r\n\t\t\t\t\t\t$(vakata_dnd.target).one('click.vakata', false);\r\n\t\t\t\t\t\t/**\r\n\t\t\t\t\t\t * triggered on the document when a drag starts\r\n\t\t\t\t\t\t * @event\r\n\t\t\t\t\t\t * @plugin dnd\r\n\t\t\t\t\t\t * @name dnd_start.vakata\r\n\t\t\t\t\t\t * @param {Mixed} data any data supplied with the call to $.vakata.dnd.start\r\n\t\t\t\t\t\t * @param {DOM} element the DOM element being dragged\r\n\t\t\t\t\t\t * @param {jQuery} helper the helper shown next to the mouse\r\n\t\t\t\t\t\t * @param {Object} event the event that caused the start (probably mousemove)\r\n\t\t\t\t\t\t */\r\n\t\t\t\t\t\t$.vakata.dnd._trigger(\"start\", e);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse { return; }\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar d  = false, w  = false,\r\n\t\t\t\t\tdh = false, wh = false,\r\n\t\t\t\t\tdw = false, ww = false,\r\n\t\t\t\t\tdt = false, dl = false,\r\n\t\t\t\t\tht = false, hl = false;\r\n\r\n\t\t\t\tvakata_dnd.scroll_t = 0;\r\n\t\t\t\tvakata_dnd.scroll_l = 0;\r\n\t\t\t\tvakata_dnd.scroll_e = false;\r\n\t\t\t\t$($(e.target).parentsUntil(\"body\").addBack().get().reverse())\r\n\t\t\t\t\t.filter(function () {\r\n\t\t\t\t\t\treturn\t(/^auto|scroll$/).test($(this).css(\"overflow\")) &&\r\n\t\t\t\t\t\t\t\t(this.scrollHeight > this.offsetHeight || this.scrollWidth > this.offsetWidth);\r\n\t\t\t\t\t})\r\n\t\t\t\t\t.each(function () {\r\n\t\t\t\t\t\tvar t = $(this), o = t.offset();\r\n\t\t\t\t\t\tif(this.scrollHeight > this.offsetHeight) {\r\n\t\t\t\t\t\t\tif(o.top + t.height() - e.pageY < $.vakata.dnd.settings.scroll_proximity)\t{ vakata_dnd.scroll_t = 1; }\r\n\t\t\t\t\t\t\tif(e.pageY - o.top < $.vakata.dnd.settings.scroll_proximity)\t\t\t\t{ vakata_dnd.scroll_t = -1; }\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif(this.scrollWidth > this.offsetWidth) {\r\n\t\t\t\t\t\t\tif(o.left + t.width() - e.pageX < $.vakata.dnd.settings.scroll_proximity)\t{ vakata_dnd.scroll_l = 1; }\r\n\t\t\t\t\t\t\tif(e.pageX - o.left < $.vakata.dnd.settings.scroll_proximity)\t\t\t\t{ vakata_dnd.scroll_l = -1; }\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif(vakata_dnd.scroll_t || vakata_dnd.scroll_l) {\r\n\t\t\t\t\t\t\tvakata_dnd.scroll_e = $(this);\r\n\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\tif(!vakata_dnd.scroll_e) {\r\n\t\t\t\t\td  = $(document); w = $(window);\r\n\t\t\t\t\tdh = d.height(); wh = w.height();\r\n\t\t\t\t\tdw = d.width(); ww = w.width();\r\n\t\t\t\t\tdt = d.scrollTop(); dl = d.scrollLeft();\r\n\t\t\t\t\tif(dh > wh && e.pageY - dt < $.vakata.dnd.settings.scroll_proximity)\t\t{ vakata_dnd.scroll_t = -1;  }\r\n\t\t\t\t\tif(dh > wh && wh - (e.pageY - dt) < $.vakata.dnd.settings.scroll_proximity)\t{ vakata_dnd.scroll_t = 1; }\r\n\t\t\t\t\tif(dw > ww && e.pageX - dl < $.vakata.dnd.settings.scroll_proximity)\t\t{ vakata_dnd.scroll_l = -1; }\r\n\t\t\t\t\tif(dw > ww && ww - (e.pageX - dl) < $.vakata.dnd.settings.scroll_proximity)\t{ vakata_dnd.scroll_l = 1; }\r\n\t\t\t\t\tif(vakata_dnd.scroll_t || vakata_dnd.scroll_l) {\r\n\t\t\t\t\t\tvakata_dnd.scroll_e = d;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif(vakata_dnd.scroll_e) { $.vakata.dnd._scroll(true); }\r\n\r\n\t\t\t\tif(vakata_dnd.helper) {\r\n\t\t\t\t\tht = parseInt(e.pageY + $.vakata.dnd.settings.helper_top, 10);\r\n\t\t\t\t\thl = parseInt(e.pageX + $.vakata.dnd.settings.helper_left, 10);\r\n\t\t\t\t\tif(dh && ht + 25 > dh) { ht = dh - 50; }\r\n\t\t\t\t\tif(dw && hl + vakata_dnd.helper_w > dw) { hl = dw - (vakata_dnd.helper_w + 2); }\r\n\t\t\t\t\tvakata_dnd.helper.css({\r\n\t\t\t\t\t\tleft\t: hl + \"px\",\r\n\t\t\t\t\t\ttop\t\t: ht + \"px\"\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\t/**\r\n\t\t\t\t * triggered on the document when a drag is in progress\r\n\t\t\t\t * @event\r\n\t\t\t\t * @plugin dnd\r\n\t\t\t\t * @name dnd_move.vakata\r\n\t\t\t\t * @param {Mixed} data any data supplied with the call to $.vakata.dnd.start\r\n\t\t\t\t * @param {DOM} element the DOM element being dragged\r\n\t\t\t\t * @param {jQuery} helper the helper shown next to the mouse\r\n\t\t\t\t * @param {Object} event the event that caused this to trigger (most likely mousemove)\r\n\t\t\t\t */\r\n\t\t\t\t$.vakata.dnd._trigger(\"move\", e);\r\n\t\t\t\treturn false;\r\n\t\t\t},\r\n\t\t\tstop : function (e) {\r\n\t\t\t\tif(e.type === \"touchend\" && e.originalEvent && e.originalEvent.changedTouches && e.originalEvent.changedTouches[0]) {\r\n\t\t\t\t\te.pageX = e.originalEvent.changedTouches[0].pageX;\r\n\t\t\t\t\te.pageY = e.originalEvent.changedTouches[0].pageY;\r\n\t\t\t\t\te.target = document.elementFromPoint(e.originalEvent.changedTouches[0].pageX - window.pageXOffset, e.originalEvent.changedTouches[0].pageY - window.pageYOffset);\r\n\t\t\t\t}\r\n\t\t\t\tif(vakata_dnd.is_drag) {\r\n\t\t\t\t\t/**\r\n\t\t\t\t\t * triggered on the document when a drag stops (the dragged element is dropped)\r\n\t\t\t\t\t * @event\r\n\t\t\t\t\t * @plugin dnd\r\n\t\t\t\t\t * @name dnd_stop.vakata\r\n\t\t\t\t\t * @param {Mixed} data any data supplied with the call to $.vakata.dnd.start\r\n\t\t\t\t\t * @param {DOM} element the DOM element being dragged\r\n\t\t\t\t\t * @param {jQuery} helper the helper shown next to the mouse\r\n\t\t\t\t\t * @param {Object} event the event that caused the stop\r\n\t\t\t\t\t */\r\n\t\t\t\t\tif (e.target !== vakata_dnd.target) {\r\n\t\t\t\t\t\t$(vakata_dnd.target).off('click.vakata');\r\n\t\t\t\t\t}\r\n\t\t\t\t\t$.vakata.dnd._trigger(\"stop\", e);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tif(e.type === \"touchend\" && e.target === vakata_dnd.target) {\r\n\t\t\t\t\t\tvar to = setTimeout(function () { $(e.target).click(); }, 100);\r\n\t\t\t\t\t\t$(e.target).one('click', function() { if(to) { clearTimeout(to); } });\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t$.vakata.dnd._clean();\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t};\r\n\t}($));\r\n\r\n\t// include the dnd plugin by default\r\n\t// $.jstree.defaults.plugins.push(\"dnd\");\r\n\r\n\treturn $;\r\n\t\r\n});\r\n\ndefine('skylark-jstree/plugin/massload',[\r\n  \"skylark-langx/langx\",\r\n  \"skylark-utils-dom/browser\",\r\n  \"skylark-utils-dom/eventer\",\r\n  \"skylark-utils-dom/noder\",\r\n  \"skylark-utils-dom/geom\",\r\n  \"skylark-utils-dom/query\",\r\n  \"../tree\"\r\n],function(langx,browser,eventer,noder,geom,$,jstree){\r\n\r\n\t\"use strict\";\r\n\r\n\tif($.jstree.plugins.massload) { return; }\r\n\r\n\t/**\r\n\t * massload configuration\r\n\t *\r\n\t * It is possible to set this to a standard jQuery-like AJAX config.\r\n\t * In addition to the standard jQuery ajax options here you can supply functions for `data` and `url`, the functions will be run in the current instance's scope and a param will be passed indicating which node IDs need to be loaded, the return value of those functions will be used.\r\n\t *\r\n\t * You can also set this to a function, that function will receive the node IDs being loaded as argument and a second param which is a function (callback) which should be called with the result.\r\n\t *\r\n\t * Both the AJAX and the function approach rely on the same return value - an object where the keys are the node IDs, and the value is the children of that node as an array.\r\n\t *\r\n\t *\t{\r\n\t *\t\t\"id1\" : [{ \"text\" : \"Child of ID1\", \"id\" : \"c1\" }, { \"text\" : \"Another child of ID1\", \"id\" : \"c2\" }],\r\n\t *\t\t\"id2\" : [{ \"text\" : \"Child of ID2\", \"id\" : \"c3\" }]\r\n\t *\t}\r\n\t * \r\n\t * @name $.jstree.defaults.massload\r\n\t * @plugin massload\r\n\t */\r\n\t$.jstree.defaults.massload = null;\r\n\t$.jstree.plugins.massload = function (options, parent) {\r\n\t\tthis.init = function (el, options) {\r\n\t\t\tthis._data.massload = {};\r\n\t\t\tparent.init.call(this, el, options);\r\n\t\t};\r\n\t\tthis._load_nodes = function (nodes, callback, is_callback, force_reload) {\r\n\t\t\tvar s = this.settings.massload,\r\n\t\t\t\tnodesString = JSON.stringify(nodes),\r\n\t\t\t\ttoLoad = [],\r\n\t\t\t\tm = this._model.data,\r\n\t\t\t\ti, j, dom;\r\n\t\t\tif (!is_callback) {\r\n\t\t\t\tfor(i = 0, j = nodes.length; i < j; i++) {\r\n\t\t\t\t\tif(!m[nodes[i]] || ( (!m[nodes[i]].state.loaded && !m[nodes[i]].state.failed) || force_reload) ) {\r\n\t\t\t\t\t\ttoLoad.push(nodes[i]);\r\n\t\t\t\t\t\tdom = this.get_node(nodes[i], true);\r\n\t\t\t\t\t\tif (dom && dom.length) {\r\n\t\t\t\t\t\t\tdom.addClass(\"jstree-loading\").attr('aria-busy',true);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tthis._data.massload = {};\r\n\t\t\t\tif (toLoad.length) {\r\n\t\t\t\t\tif($.isFunction(s)) {\r\n\t\t\t\t\t\treturn s.call(this, toLoad, $.proxy(function (data) {\r\n\t\t\t\t\t\t\tvar i, j;\r\n\t\t\t\t\t\t\tif(data) {\r\n\t\t\t\t\t\t\t\tfor(i in data) {\r\n\t\t\t\t\t\t\t\t\tif(data.hasOwnProperty(i)) {\r\n\t\t\t\t\t\t\t\t\t\tthis._data.massload[i] = data[i];\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tfor(i = 0, j = nodes.length; i < j; i++) {\r\n\t\t\t\t\t\t\t\tdom = this.get_node(nodes[i], true);\r\n\t\t\t\t\t\t\t\tif (dom && dom.length) {\r\n\t\t\t\t\t\t\t\t\tdom.removeClass(\"jstree-loading\").attr('aria-busy',false);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tparent._load_nodes.call(this, nodes, callback, is_callback, force_reload);\r\n\t\t\t\t\t\t}, this));\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(typeof s === 'object' && s && s.url) {\r\n\t\t\t\t\t\ts = $.extend(true, {}, s);\r\n\t\t\t\t\t\tif($.isFunction(s.url)) {\r\n\t\t\t\t\t\t\ts.url = s.url.call(this, toLoad);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif($.isFunction(s.data)) {\r\n\t\t\t\t\t\t\ts.data = s.data.call(this, toLoad);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn $.ajax(s)\r\n\t\t\t\t\t\t\t.done($.proxy(function (data,t,x) {\r\n\t\t\t\t\t\t\t\t\tvar i, j;\r\n\t\t\t\t\t\t\t\t\tif(data) {\r\n\t\t\t\t\t\t\t\t\t\tfor(i in data) {\r\n\t\t\t\t\t\t\t\t\t\t\tif(data.hasOwnProperty(i)) {\r\n\t\t\t\t\t\t\t\t\t\t\t\tthis._data.massload[i] = data[i];\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\tfor(i = 0, j = nodes.length; i < j; i++) {\r\n\t\t\t\t\t\t\t\t\t\tdom = this.get_node(nodes[i], true);\r\n\t\t\t\t\t\t\t\t\t\tif (dom && dom.length) {\r\n\t\t\t\t\t\t\t\t\t\t\tdom.removeClass(\"jstree-loading\").attr('aria-busy',false);\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\tparent._load_nodes.call(this, nodes, callback, is_callback, force_reload);\r\n\t\t\t\t\t\t\t\t}, this))\r\n\t\t\t\t\t\t\t.fail($.proxy(function (f) {\r\n\t\t\t\t\t\t\t\t\tparent._load_nodes.call(this, nodes, callback, is_callback, force_reload);\r\n\t\t\t\t\t\t\t\t}, this));\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn parent._load_nodes.call(this, nodes, callback, is_callback, force_reload);\r\n\t\t};\r\n\t\tthis._load_node = function (obj, callback) {\r\n\t\t\tvar data = this._data.massload[obj.id],\r\n\t\t\t\trslt = null, dom;\r\n\t\t\tif(data) {\r\n\t\t\t\trslt = this[typeof data === 'string' ? '_append_html_data' : '_append_json_data'](\r\n\t\t\t\t\tobj,\r\n\t\t\t\t\ttypeof data === 'string' ? $($.parseHTML(data)).filter(function () { return this.nodeType !== 3; }) : data,\r\n\t\t\t\t\tfunction (status) { callback.call(this, status); }\r\n\t\t\t\t);\r\n\t\t\t\tdom = this.get_node(obj.id, true);\r\n\t\t\t\tif (dom && dom.length) {\r\n\t\t\t\t\tdom.removeClass(\"jstree-loading\").attr('aria-busy',false);\r\n\t\t\t\t}\r\n\t\t\t\tdelete this._data.massload[obj.id];\r\n\t\t\t\treturn rslt;\r\n\t\t\t}\r\n\t\t\treturn parent._load_node.call(this, obj, callback);\r\n\t\t};\r\n\t};\r\n\r\n\treturn $;\r\n\t\r\n});\ndefine('skylark-jstree/plugin/search',[\r\n  \"skylark-langx/langx\",\r\n  \"skylark-utils-dom/browser\",\r\n  \"skylark-utils-dom/eventer\",\r\n  \"skylark-utils-dom/noder\",\r\n  \"skylark-utils-dom/geom\",\r\n  \"skylark-utils-dom/query\",\r\n  \"../tree\"\r\n],function(langx,browser,eventer,noder,geom,$,jstree){\r\n\r\n\t\"use strict\";\r\n\r\n\tif($.jstree.plugins.search) { return; }\r\n\r\n\t/**\r\n\t * stores all defaults for the search plugin\r\n\t * @name $.jstree.defaults.search\r\n\t * @plugin search\r\n\t */\r\n\t$.jstree.defaults.search = {\r\n\t\t/**\r\n\t\t * a jQuery-like AJAX config, which jstree uses if a server should be queried for results.\r\n\t\t *\r\n\t\t * A `str` (which is the search string) parameter will be added with the request, an optional `inside` parameter will be added if the search is limited to a node id. The expected result is a JSON array with nodes that need to be opened so that matching nodes will be revealed.\r\n\t\t * Leave this setting as `false` to not query the server. You can also set this to a function, which will be invoked in the instance's scope and receive 3 parameters - the search string, the callback to call with the array of nodes to load, and the optional node ID to limit the search to\r\n\t\t * @name $.jstree.defaults.search.ajax\r\n\t\t * @plugin search\r\n\t\t */\r\n\t\tajax : false,\r\n\t\t/**\r\n\t\t * Indicates if the search should be fuzzy or not (should `chnd3` match `child node 3`). Default is `false`.\r\n\t\t * @name $.jstree.defaults.search.fuzzy\r\n\t\t * @plugin search\r\n\t\t */\r\n\t\tfuzzy : false,\r\n\t\t/**\r\n\t\t * Indicates if the search should be case sensitive. Default is `false`.\r\n\t\t * @name $.jstree.defaults.search.case_sensitive\r\n\t\t * @plugin search\r\n\t\t */\r\n\t\tcase_sensitive : false,\r\n\t\t/**\r\n\t\t * Indicates if the tree should be filtered (by default) to show only matching nodes (keep in mind this can be a heavy on large trees in old browsers).\r\n\t\t * This setting can be changed at runtime when calling the search method. Default is `false`.\r\n\t\t * @name $.jstree.defaults.search.show_only_matches\r\n\t\t * @plugin search\r\n\t\t */\r\n\t\tshow_only_matches : false,\r\n\t\t/**\r\n\t\t * Indicates if the children of matched element are shown (when show_only_matches is true)\r\n\t\t * This setting can be changed at runtime when calling the search method. Default is `false`.\r\n\t\t * @name $.jstree.defaults.search.show_only_matches_children\r\n\t\t * @plugin search\r\n\t\t */\r\n\t\tshow_only_matches_children : false,\r\n\t\t/**\r\n\t\t * Indicates if all nodes opened to reveal the search result, should be closed when the search is cleared or a new search is performed. Default is `true`.\r\n\t\t * @name $.jstree.defaults.search.close_opened_onclear\r\n\t\t * @plugin search\r\n\t\t */\r\n\t\tclose_opened_onclear : true,\r\n\t\t/**\r\n\t\t * Indicates if only leaf nodes should be included in search results. Default is `false`.\r\n\t\t * @name $.jstree.defaults.search.search_leaves_only\r\n\t\t * @plugin search\r\n\t\t */\r\n\t\tsearch_leaves_only : false,\r\n\t\t/**\r\n\t\t * If set to a function it wil be called in the instance's scope with two arguments - search string and node (where node will be every node in the structure, so use with caution).\r\n\t\t * If the function returns a truthy value the node will be considered a match (it might not be displayed if search_only_leaves is set to true and the node is not a leaf). Default is `false`.\r\n\t\t * @name $.jstree.defaults.search.search_callback\r\n\t\t * @plugin search\r\n\t\t */\r\n\t\tsearch_callback : false\r\n\t};\r\n\r\n\t$.jstree.plugins.search = function (options, parent) {\r\n\t\tthis.bind = function () {\r\n\t\t\tparent.bind.call(this);\r\n\r\n\t\t\tthis._data.search.str = \"\";\r\n\t\t\tthis._data.search.dom = $();\r\n\t\t\tthis._data.search.res = [];\r\n\t\t\tthis._data.search.opn = [];\r\n\t\t\tthis._data.search.som = false;\r\n\t\t\tthis._data.search.smc = false;\r\n\t\t\tthis._data.search.hdn = [];\r\n\r\n\t\t\tthis.element\r\n\t\t\t\t.on(\"search.jstree\", $.proxy(function (e, data) {\r\n\t\t\t\t\t\tif(this._data.search.som && data.res.length) {\r\n\t\t\t\t\t\t\tvar m = this._model.data, i, j, p = [], k, l;\r\n\t\t\t\t\t\t\tfor(i = 0, j = data.res.length; i < j; i++) {\r\n\t\t\t\t\t\t\t\tif(m[data.res[i]] && !m[data.res[i]].state.hidden) {\r\n\t\t\t\t\t\t\t\t\tp.push(data.res[i]);\r\n\t\t\t\t\t\t\t\t\tp = p.concat(m[data.res[i]].parents);\r\n\t\t\t\t\t\t\t\t\tif(this._data.search.smc) {\r\n\t\t\t\t\t\t\t\t\t\tfor (k = 0, l = m[data.res[i]].children_d.length; k < l; k++) {\r\n\t\t\t\t\t\t\t\t\t\t\tif (m[m[data.res[i]].children_d[k]] && !m[m[data.res[i]].children_d[k]].state.hidden) {\r\n\t\t\t\t\t\t\t\t\t\t\t\tp.push(m[data.res[i]].children_d[k]);\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tp = $.vakata.array_remove_item($.vakata.array_unique(p), $.jstree.root);\r\n\t\t\t\t\t\t\tthis._data.search.hdn = this.hide_all(true);\r\n\t\t\t\t\t\t\tthis.show_node(p, true);\r\n\t\t\t\t\t\t\tthis.redraw(true);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}, this))\r\n\t\t\t\t.on(\"clear_search.jstree\", $.proxy(function (e, data) {\r\n\t\t\t\t\t\tif(this._data.search.som && data.res.length) {\r\n\t\t\t\t\t\t\tthis.show_node(this._data.search.hdn, true);\r\n\t\t\t\t\t\t\tthis.redraw(true);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}, this));\r\n\t\t};\r\n\t\t/**\r\n\t\t * used to search the tree nodes for a given string\r\n\t\t * @name search(str [, skip_async])\r\n\t\t * @param {String} str the search string\r\n\t\t * @param {Boolean} skip_async if set to true server will not be queried even if configured\r\n\t\t * @param {Boolean} show_only_matches if set to true only matching nodes will be shown (keep in mind this can be very slow on large trees or old browsers)\r\n\t\t * @param {mixed} inside an optional node to whose children to limit the search\r\n\t\t * @param {Boolean} append if set to true the results of this search are appended to the previous search\r\n\t\t * @plugin search\r\n\t\t * @trigger search.jstree\r\n\t\t */\r\n\t\tthis.search = function (str, skip_async, show_only_matches, inside, append, show_only_matches_children) {\r\n\t\t\tif(str === false || $.trim(str.toString()) === \"\") {\r\n\t\t\t\treturn this.clear_search();\r\n\t\t\t}\r\n\t\t\tinside = this.get_node(inside);\r\n\t\t\tinside = inside && inside.id ? inside.id : null;\r\n\t\t\tstr = str.toString();\r\n\t\t\tvar s = this.settings.search,\r\n\t\t\t\ta = s.ajax ? s.ajax : false,\r\n\t\t\t\tm = this._model.data,\r\n\t\t\t\tf = null,\r\n\t\t\t\tr = [],\r\n\t\t\t\tp = [], i, j;\r\n\t\t\tif(this._data.search.res.length && !append) {\r\n\t\t\t\tthis.clear_search();\r\n\t\t\t}\r\n\t\t\tif(show_only_matches === undefined) {\r\n\t\t\t\tshow_only_matches = s.show_only_matches;\r\n\t\t\t}\r\n\t\t\tif(show_only_matches_children === undefined) {\r\n\t\t\t\tshow_only_matches_children = s.show_only_matches_children;\r\n\t\t\t}\r\n\t\t\tif(!skip_async && a !== false) {\r\n\t\t\t\tif($.isFunction(a)) {\r\n\t\t\t\t\treturn a.call(this, str, $.proxy(function (d) {\r\n\t\t\t\t\t\t\tif(d && d.d) { d = d.d; }\r\n\t\t\t\t\t\t\tthis._load_nodes(!$.isArray(d) ? [] : $.vakata.array_unique(d), function () {\r\n\t\t\t\t\t\t\t\tthis.search(str, true, show_only_matches, inside, append, show_only_matches_children);\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t}, this), inside);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\ta = $.extend({}, a);\r\n\t\t\t\t\tif(!a.data) { a.data = {}; }\r\n\t\t\t\t\ta.data.str = str;\r\n\t\t\t\t\tif(inside) {\r\n\t\t\t\t\t\ta.data.inside = inside;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (this._data.search.lastRequest) {\r\n\t\t\t\t\t\tthis._data.search.lastRequest.abort();\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis._data.search.lastRequest = $.ajax(a)\r\n\t\t\t\t\t\t.fail($.proxy(function () {\r\n\t\t\t\t\t\t\tthis._data.core.last_error = { 'error' : 'ajax', 'plugin' : 'search', 'id' : 'search_01', 'reason' : 'Could not load search parents', 'data' : JSON.stringify(a) };\r\n\t\t\t\t\t\t\tthis.settings.core.error.call(this, this._data.core.last_error);\r\n\t\t\t\t\t\t}, this))\r\n\t\t\t\t\t\t.done($.proxy(function (d) {\r\n\t\t\t\t\t\t\tif(d && d.d) { d = d.d; }\r\n\t\t\t\t\t\t\tthis._load_nodes(!$.isArray(d) ? [] : $.vakata.array_unique(d), function () {\r\n\t\t\t\t\t\t\t\tthis.search(str, true, show_only_matches, inside, append, show_only_matches_children);\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t}, this));\r\n\t\t\t\t\treturn this._data.search.lastRequest;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(!append) {\r\n\t\t\t\tthis._data.search.str = str;\r\n\t\t\t\tthis._data.search.dom = $();\r\n\t\t\t\tthis._data.search.res = [];\r\n\t\t\t\tthis._data.search.opn = [];\r\n\t\t\t\tthis._data.search.som = show_only_matches;\r\n\t\t\t\tthis._data.search.smc = show_only_matches_children;\r\n\t\t\t}\r\n\r\n\t\t\tf = new $.vakata.search(str, true, { caseSensitive : s.case_sensitive, fuzzy : s.fuzzy });\r\n\t\t\t$.each(m[inside ? inside : $.jstree.root].children_d, function (ii, i) {\r\n\t\t\t\tvar v = m[i];\r\n\t\t\t\tif(v.text && !v.state.hidden && (!s.search_leaves_only || (v.state.loaded && v.children.length === 0)) && ( (s.search_callback && s.search_callback.call(this, str, v)) || (!s.search_callback && f.search(v.text).isMatch) ) ) {\r\n\t\t\t\t\tr.push(i);\r\n\t\t\t\t\tp = p.concat(v.parents);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\tif(r.length) {\r\n\t\t\t\tp = $.vakata.array_unique(p);\r\n\t\t\t\tfor(i = 0, j = p.length; i < j; i++) {\r\n\t\t\t\t\tif(p[i] !== $.jstree.root && m[p[i]] && this.open_node(p[i], null, 0) === true) {\r\n\t\t\t\t\t\tthis._data.search.opn.push(p[i]);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif(!append) {\r\n\t\t\t\t\tthis._data.search.dom = $(this.element[0].querySelectorAll('#' + $.map(r, function (v) { return \"0123456789\".indexOf(v[0]) !== -1 ? '\\\\3' + v[0] + ' ' + v.substr(1).replace($.jstree.idregex,'\\\\$&') : v.replace($.jstree.idregex,'\\\\$&'); }).join(', #')));\r\n\t\t\t\t\tthis._data.search.res = r;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tthis._data.search.dom = this._data.search.dom.add($(this.element[0].querySelectorAll('#' + $.map(r, function (v) { return \"0123456789\".indexOf(v[0]) !== -1 ? '\\\\3' + v[0] + ' ' + v.substr(1).replace($.jstree.idregex,'\\\\$&') : v.replace($.jstree.idregex,'\\\\$&'); }).join(', #'))));\r\n\t\t\t\t\tthis._data.search.res = $.vakata.array_unique(this._data.search.res.concat(r));\r\n\t\t\t\t}\r\n\t\t\t\tthis._data.search.dom.children(\".jstree-anchor\").addClass('jstree-search');\r\n\t\t\t}\r\n\t\t\t/**\r\n\t\t\t * triggered after search is complete\r\n\t\t\t * @event\r\n\t\t\t * @name search.jstree\r\n\t\t\t * @param {jQuery} nodes a jQuery collection of matching nodes\r\n\t\t\t * @param {String} str the search string\r\n\t\t\t * @param {Array} res a collection of objects represeing the matching nodes\r\n\t\t\t * @plugin search\r\n\t\t\t */\r\n\t\t\tthis.trigger('search', { nodes : this._data.search.dom, str : str, res : this._data.search.res, show_only_matches : show_only_matches });\r\n\t\t};\r\n\t\t/**\r\n\t\t * used to clear the last search (removes classes and shows all nodes if filtering is on)\r\n\t\t * @name clear_search()\r\n\t\t * @plugin search\r\n\t\t * @trigger clear_search.jstree\r\n\t\t */\r\n\t\tthis.clear_search = function () {\r\n\t\t\tif(this.settings.search.close_opened_onclear) {\r\n\t\t\t\tthis.close_node(this._data.search.opn, 0);\r\n\t\t\t}\r\n\t\t\t/**\r\n\t\t\t * triggered after search is complete\r\n\t\t\t * @event\r\n\t\t\t * @name clear_search.jstree\r\n\t\t\t * @param {jQuery} nodes a jQuery collection of matching nodes (the result from the last search)\r\n\t\t\t * @param {String} str the search string (the last search string)\r\n\t\t\t * @param {Array} res a collection of objects represeing the matching nodes (the result from the last search)\r\n\t\t\t * @plugin search\r\n\t\t\t */\r\n\t\t\tthis.trigger('clear_search', { 'nodes' : this._data.search.dom, str : this._data.search.str, res : this._data.search.res });\r\n\t\t\tif(this._data.search.res.length) {\r\n\t\t\t\tthis._data.search.dom = $(this.element[0].querySelectorAll('#' + $.map(this._data.search.res, function (v) {\r\n\t\t\t\t\treturn \"0123456789\".indexOf(v[0]) !== -1 ? '\\\\3' + v[0] + ' ' + v.substr(1).replace($.jstree.idregex,'\\\\$&') : v.replace($.jstree.idregex,'\\\\$&');\r\n\t\t\t\t}).join(', #')));\r\n\t\t\t\tthis._data.search.dom.children(\".jstree-anchor\").removeClass(\"jstree-search\");\r\n\t\t\t}\r\n\t\t\tthis._data.search.str = \"\";\r\n\t\t\tthis._data.search.res = [];\r\n\t\t\tthis._data.search.opn = [];\r\n\t\t\tthis._data.search.dom = $();\r\n\t\t};\r\n\r\n\t\tthis.redraw_node = function(obj, deep, callback, force_render) {\r\n\t\t\tobj = parent.redraw_node.apply(this, arguments);\r\n\t\t\tif(obj) {\r\n\t\t\t\tif($.inArray(obj.id, this._data.search.res) !== -1) {\r\n\t\t\t\t\tvar i, j, tmp = null;\r\n\t\t\t\t\tfor(i = 0, j = obj.childNodes.length; i < j; i++) {\r\n\t\t\t\t\t\tif(obj.childNodes[i] && obj.childNodes[i].className && obj.childNodes[i].className.indexOf(\"jstree-anchor\") !== -1) {\r\n\t\t\t\t\t\t\ttmp = obj.childNodes[i];\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(tmp) {\r\n\t\t\t\t\t\ttmp.className += ' jstree-search';\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn obj;\r\n\t\t};\r\n\t};\r\n\r\n\t// helpers\r\n\t(function ($) {\r\n\t\t// from http://kiro.me/projects/fuse.html\r\n\t\t$.vakata.search = function(pattern, txt, options) {\r\n\t\t\toptions = options || {};\r\n\t\t\toptions = $.extend({}, $.vakata.search.defaults, options);\r\n\t\t\tif(options.fuzzy !== false) {\r\n\t\t\t\toptions.fuzzy = true;\r\n\t\t\t}\r\n\t\t\tpattern = options.caseSensitive ? pattern : pattern.toLowerCase();\r\n\t\t\tvar MATCH_LOCATION\t= options.location,\r\n\t\t\t\tMATCH_DISTANCE\t= options.distance,\r\n\t\t\t\tMATCH_THRESHOLD\t= options.threshold,\r\n\t\t\t\tpatternLen = pattern.length,\r\n\t\t\t\tmatchmask, pattern_alphabet, match_bitapScore, search;\r\n\t\t\tif(patternLen > 32) {\r\n\t\t\t\toptions.fuzzy = false;\r\n\t\t\t}\r\n\t\t\tif(options.fuzzy) {\r\n\t\t\t\tmatchmask = 1 << (patternLen - 1);\r\n\t\t\t\tpattern_alphabet = (function () {\r\n\t\t\t\t\tvar mask = {},\r\n\t\t\t\t\t\ti = 0;\r\n\t\t\t\t\tfor (i = 0; i < patternLen; i++) {\r\n\t\t\t\t\t\tmask[pattern.charAt(i)] = 0;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tfor (i = 0; i < patternLen; i++) {\r\n\t\t\t\t\t\tmask[pattern.charAt(i)] |= 1 << (patternLen - i - 1);\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn mask;\r\n\t\t\t\t}());\r\n\t\t\t\tmatch_bitapScore = function (e, x) {\r\n\t\t\t\t\tvar accuracy = e / patternLen,\r\n\t\t\t\t\t\tproximity = Math.abs(MATCH_LOCATION - x);\r\n\t\t\t\t\tif(!MATCH_DISTANCE) {\r\n\t\t\t\t\t\treturn proximity ? 1.0 : accuracy;\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn accuracy + (proximity / MATCH_DISTANCE);\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t\tsearch = function (text) {\r\n\t\t\t\ttext = options.caseSensitive ? text : text.toLowerCase();\r\n\t\t\t\tif(pattern === text || text.indexOf(pattern) !== -1) {\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tisMatch: true,\r\n\t\t\t\t\t\tscore: 0\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t\tif(!options.fuzzy) {\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tisMatch: false,\r\n\t\t\t\t\t\tscore: 1\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t\tvar i, j,\r\n\t\t\t\t\ttextLen = text.length,\r\n\t\t\t\t\tscoreThreshold = MATCH_THRESHOLD,\r\n\t\t\t\t\tbestLoc = text.indexOf(pattern, MATCH_LOCATION),\r\n\t\t\t\t\tbinMin, binMid,\r\n\t\t\t\t\tbinMax = patternLen + textLen,\r\n\t\t\t\t\tlastRd, start, finish, rd, charMatch,\r\n\t\t\t\t\tscore = 1,\r\n\t\t\t\t\tlocations = [];\r\n\t\t\t\tif (bestLoc !== -1) {\r\n\t\t\t\t\tscoreThreshold = Math.min(match_bitapScore(0, bestLoc), scoreThreshold);\r\n\t\t\t\t\tbestLoc = text.lastIndexOf(pattern, MATCH_LOCATION + patternLen);\r\n\t\t\t\t\tif (bestLoc !== -1) {\r\n\t\t\t\t\t\tscoreThreshold = Math.min(match_bitapScore(0, bestLoc), scoreThreshold);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tbestLoc = -1;\r\n\t\t\t\tfor (i = 0; i < patternLen; i++) {\r\n\t\t\t\t\tbinMin = 0;\r\n\t\t\t\t\tbinMid = binMax;\r\n\t\t\t\t\twhile (binMin < binMid) {\r\n\t\t\t\t\t\tif (match_bitapScore(i, MATCH_LOCATION + binMid) <= scoreThreshold) {\r\n\t\t\t\t\t\t\tbinMin = binMid;\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tbinMax = binMid;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbinMid = Math.floor((binMax - binMin) / 2 + binMin);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbinMax = binMid;\r\n\t\t\t\t\tstart = Math.max(1, MATCH_LOCATION - binMid + 1);\r\n\t\t\t\t\tfinish = Math.min(MATCH_LOCATION + binMid, textLen) + patternLen;\r\n\t\t\t\t\trd = new Array(finish + 2);\r\n\t\t\t\t\trd[finish + 1] = (1 << i) - 1;\r\n\t\t\t\t\tfor (j = finish; j >= start; j--) {\r\n\t\t\t\t\t\tcharMatch = pattern_alphabet[text.charAt(j - 1)];\r\n\t\t\t\t\t\tif (i === 0) {\r\n\t\t\t\t\t\t\trd[j] = ((rd[j + 1] << 1) | 1) & charMatch;\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\trd[j] = ((rd[j + 1] << 1) | 1) & charMatch | (((lastRd[j + 1] | lastRd[j]) << 1) | 1) | lastRd[j + 1];\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (rd[j] & matchmask) {\r\n\t\t\t\t\t\t\tscore = match_bitapScore(i, j - 1);\r\n\t\t\t\t\t\t\tif (score <= scoreThreshold) {\r\n\t\t\t\t\t\t\t\tscoreThreshold = score;\r\n\t\t\t\t\t\t\t\tbestLoc = j - 1;\r\n\t\t\t\t\t\t\t\tlocations.push(bestLoc);\r\n\t\t\t\t\t\t\t\tif (bestLoc > MATCH_LOCATION) {\r\n\t\t\t\t\t\t\t\t\tstart = Math.max(1, 2 * MATCH_LOCATION - bestLoc);\r\n\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (match_bitapScore(i + 1, MATCH_LOCATION) > scoreThreshold) {\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tlastRd = rd;\r\n\t\t\t\t}\r\n\t\t\t\treturn {\r\n\t\t\t\t\tisMatch: bestLoc >= 0,\r\n\t\t\t\t\tscore: score\r\n\t\t\t\t};\r\n\t\t\t};\r\n\t\t\treturn txt === true ? { 'search' : search } : search(txt);\r\n\t\t};\r\n\t\t$.vakata.search.defaults = {\r\n\t\t\tlocation : 0,\r\n\t\t\tdistance : 100,\r\n\t\t\tthreshold : 0.6,\r\n\t\t\tfuzzy : false,\r\n\t\t\tcaseSensitive : false\r\n\t\t};\r\n\t}($));\r\n\r\n\t// include the search plugin by default\r\n\t// $.jstree.defaults.plugins.push(\"search\");\r\n\r\n\treturn $;\r\n\t\r\n});\r\n\ndefine('skylark-jstree/plugin/sort',[\r\n  \"skylark-langx/langx\",\r\n  \"skylark-utils-dom/browser\",\r\n  \"skylark-utils-dom/eventer\",\r\n  \"skylark-utils-dom/noder\",\r\n  \"skylark-utils-dom/geom\",\r\n  \"skylark-utils-dom/query\",\r\n  \"../tree\"\r\n],function(langx,browser,eventer,noder,geom,$,jstree){\r\n\r\n\t\"use strict\";\r\n\r\n\tif($.jstree.plugins.sort) { return; }\r\n\r\n\t/**\r\n\t * the settings function used to sort the nodes.\r\n\t * It is executed in the tree's context, accepts two nodes as arguments and should return `1` or `-1`.\r\n\t * @name $.jstree.defaults.sort\r\n\t * @plugin sort\r\n\t */\r\n\t$.jstree.defaults.sort = function (a, b) {\r\n\t\t//return this.get_type(a) === this.get_type(b) ? (this.get_text(a) > this.get_text(b) ? 1 : -1) : this.get_type(a) >= this.get_type(b);\r\n\t\treturn this.get_text(a) > this.get_text(b) ? 1 : -1;\r\n\t};\r\n\t$.jstree.plugins.sort = function (options, parent) {\r\n\t\tthis.bind = function () {\r\n\t\t\tparent.bind.call(this);\r\n\t\t\tthis.element\r\n\t\t\t\t.on(\"model.jstree\", $.proxy(function (e, data) {\r\n\t\t\t\t\t\tthis.sort(data.parent, true);\r\n\t\t\t\t\t}, this))\r\n\t\t\t\t.on(\"rename_node.jstree create_node.jstree\", $.proxy(function (e, data) {\r\n\t\t\t\t\t\tthis.sort(data.parent || data.node.parent, false);\r\n\t\t\t\t\t\tthis.redraw_node(data.parent || data.node.parent, true);\r\n\t\t\t\t\t}, this))\r\n\t\t\t\t.on(\"move_node.jstree copy_node.jstree\", $.proxy(function (e, data) {\r\n\t\t\t\t\t\tthis.sort(data.parent, false);\r\n\t\t\t\t\t\tthis.redraw_node(data.parent, true);\r\n\t\t\t\t\t}, this));\r\n\t\t};\r\n\t\t/**\r\n\t\t * used to sort a node's children\r\n\t\t * @private\r\n\t\t * @name sort(obj [, deep])\r\n\t\t * @param  {mixed} obj the node\r\n\t\t * @param {Boolean} deep if set to `true` nodes are sorted recursively.\r\n\t\t * @plugin sort\r\n\t\t * @trigger search.jstree\r\n\t\t */\r\n\t\tthis.sort = function (obj, deep) {\r\n\t\t\tvar i, j;\r\n\t\t\tobj = this.get_node(obj);\r\n\t\t\tif(obj && obj.children && obj.children.length) {\r\n\t\t\t\tobj.children.sort($.proxy(this.settings.sort, this));\r\n\t\t\t\tif(deep) {\r\n\t\t\t\t\tfor(i = 0, j = obj.children_d.length; i < j; i++) {\r\n\t\t\t\t\t\tthis.sort(obj.children_d[i], false);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t};\r\n\r\n\t// include the sort plugin by default\r\n\t// $.jstree.defaults.plugins.push(\"sort\");\r\n\r\n\treturn $;\r\n\t\r\n});\ndefine('skylark-jstree/plugin/state',[\r\n  \"skylark-langx/langx\",\r\n  \"skylark-utils-dom/browser\",\r\n  \"skylark-utils-dom/eventer\",\r\n  \"skylark-utils-dom/noder\",\r\n  \"skylark-utils-dom/geom\",\r\n  \"skylark-utils-dom/query\",\r\n  \"../tree\"\r\n],function(langx,browser,eventer,noder,geom,$,jstree){\r\n\r\n\t\"use strict\";\r\n\r\n\tif($.jstree.plugins.state) { return; }\r\n\r\n\tvar to = false;\r\n\t/**\r\n\t * stores all defaults for the state plugin\r\n\t * @name $.jstree.defaults.state\r\n\t * @plugin state\r\n\t */\r\n\t$.jstree.defaults.state = {\r\n\t\t/**\r\n\t\t * A string for the key to use when saving the current tree (change if using multiple trees in your project). Defaults to `jstree`.\r\n\t\t * @name $.jstree.defaults.state.key\r\n\t\t * @plugin state\r\n\t\t */\r\n\t\tkey\t\t: 'jstree',\r\n\t\t/**\r\n\t\t * A space separated list of events that trigger a state save. Defaults to `changed.jstree open_node.jstree close_node.jstree`.\r\n\t\t * @name $.jstree.defaults.state.events\r\n\t\t * @plugin state\r\n\t\t */\r\n\t\tevents\t: 'changed.jstree open_node.jstree close_node.jstree check_node.jstree uncheck_node.jstree',\r\n\t\t/**\r\n\t\t * Time in milliseconds after which the state will expire. Defaults to 'false' meaning - no expire.\r\n\t\t * @name $.jstree.defaults.state.ttl\r\n\t\t * @plugin state\r\n\t\t */\r\n\t\tttl\t\t: false,\r\n\t\t/**\r\n\t\t * A function that will be executed prior to restoring state with one argument - the state object. Can be used to clear unwanted parts of the state.\r\n\t\t * @name $.jstree.defaults.state.filter\r\n\t\t * @plugin state\r\n\t\t */\r\n\t\tfilter\t: false,\r\n\t\t/**\r\n\t\t * Should loaded nodes be restored (setting this to true means that it is possible that the whole tree will be loaded for some users - use with caution). Defaults to `false`\r\n\t\t * @name $.jstree.defaults.state.preserve_loaded\r\n\t\t * @plugin state\r\n\t\t */\r\n\t\tpreserve_loaded : false\r\n\t};\r\n\t$.jstree.plugins.state = function (options, parent) {\r\n\t\tthis.bind = function () {\r\n\t\t\tparent.bind.call(this);\r\n\t\t\tvar bind = $.proxy(function () {\r\n\t\t\t\tthis.element.on(this.settings.state.events, $.proxy(function () {\r\n\t\t\t\t\tif(to) { clearTimeout(to); }\r\n\t\t\t\t\tto = setTimeout($.proxy(function () { this.save_state(); }, this), 100);\r\n\t\t\t\t}, this));\r\n\t\t\t\t/**\r\n\t\t\t\t * triggered when the state plugin is finished restoring the state (and immediately after ready if there is no state to restore).\r\n\t\t\t\t * @event\r\n\t\t\t\t * @name state_ready.jstree\r\n\t\t\t\t * @plugin state\r\n\t\t\t\t */\r\n\t\t\t\tthis.trigger('state_ready');\r\n\t\t\t}, this);\r\n\t\t\tthis.element\r\n\t\t\t\t.on(\"ready.jstree\", $.proxy(function (e, data) {\r\n\t\t\t\t\t\tthis.element.one(\"restore_state.jstree\", bind);\r\n\t\t\t\t\t\tif(!this.restore_state()) { bind(); }\r\n\t\t\t\t\t}, this));\r\n\t\t};\r\n\t\t/**\r\n\t\t * save the state\r\n\t\t * @name save_state()\r\n\t\t * @plugin state\r\n\t\t */\r\n\t\tthis.save_state = function () {\r\n\t\t\tvar tm = this.get_state();\r\n\t\t\tif (!this.settings.state.preserve_loaded) {\r\n\t\t\t\tdelete tm.core.loaded;\r\n\t\t\t}\r\n\t\t\tvar st = { 'state' : tm, 'ttl' : this.settings.state.ttl, 'sec' : +(new Date()) };\r\n\t\t\t$.vakata.storage.set(this.settings.state.key, JSON.stringify(st));\r\n\t\t};\r\n\t\t/**\r\n\t\t * restore the state from the user's computer\r\n\t\t * @name restore_state()\r\n\t\t * @plugin state\r\n\t\t */\r\n\t\tthis.restore_state = function () {\r\n\t\t\tvar k = $.vakata.storage.get(this.settings.state.key);\r\n\t\t\tif(!!k) { try { k = JSON.parse(k); } catch(ex) { return false; } }\r\n\t\t\tif(!!k && k.ttl && k.sec && +(new Date()) - k.sec > k.ttl) { return false; }\r\n\t\t\tif(!!k && k.state) { k = k.state; }\r\n\t\t\tif(!!k && $.isFunction(this.settings.state.filter)) { k = this.settings.state.filter.call(this, k); }\r\n\t\t\tif(!!k) {\r\n\t\t\t\tif (!this.settings.state.preserve_loaded) {\r\n\t\t\t\t\tdelete k.core.loaded;\r\n\t\t\t\t}\r\n\t\t\t\tthis.element.one(\"set_state.jstree\", function (e, data) { data.instance.trigger('restore_state', { 'state' : $.extend(true, {}, k) }); });\r\n\t\t\t\tthis.set_state(k);\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\treturn false;\r\n\t\t};\r\n\t\t/**\r\n\t\t * clear the state on the user's computer\r\n\t\t * @name clear_state()\r\n\t\t * @plugin state\r\n\t\t */\r\n\t\tthis.clear_state = function () {\r\n\t\t\treturn $.vakata.storage.del(this.settings.state.key);\r\n\t\t};\r\n\t};\r\n\r\n\t(function ($, undefined) {\r\n\t\t$.vakata.storage = {\r\n\t\t\t// simply specifying the functions in FF throws an error\r\n\t\t\tset : function (key, val) { return window.localStorage.setItem(key, val); },\r\n\t\t\tget : function (key) { return window.localStorage.getItem(key); },\r\n\t\t\tdel : function (key) { return window.localStorage.removeItem(key); }\r\n\t\t};\r\n\t}($));\r\n\r\n\t// include the state plugin by default\r\n\t// $.jstree.defaults.plugins.push(\"state\");\r\n\r\n\treturn $;\r\n\t\r\n});\ndefine('skylark-jstree/plugin/treegrid',[\r\n  \"skylark-langx/langx\",\r\n  \"skylark-utils-dom/browser\",\r\n  \"skylark-utils-dom/eventer\",\r\n  \"skylark-utils-dom/noder\",\r\n  \"skylark-utils-dom/geom\",\r\n  \"skylark-utils-dom/query\",\r\n  \"./menu\",\r\n  \"../tree\"\r\n],function(langx,browser,eventer,noder,geom,$,menu,jstree){\r\n    var BLANKRE = /^\\s*$/g,\r\n        IDREGEX = /[\\\\:&!^|()\\[\\]<>@*'+~#\";,= \\/${}%]/g,\r\n        escapeId = function(id) {\r\n            return (id || \"\").replace(IDREGEX, '\\\\$&');\r\n        },\r\n        NODE_DATA_ATTR = \"data-jstreegrid\",\r\n        COL_DATA_ATTR = \"data-jstreegrid-column\",\r\n        SEARCHCLASS = \"jstree-search\",\r\n        SPECIAL_TITLE = \"_DATA_\",\r\n        LEVELINDENT = 24,\r\n        styled = false,\r\n        MINCOLWIDTH = 10,\r\n        generateCellId = function(tree, id) {\r\n            return (\"jstree_\" + tree + \"_grid_\" + escapeId(id) + \"_col\");\r\n        },\r\n        getIds = function(nodes) {\r\n            return $.makeArray(nodes.map(function() {\r\n                return this.id;\r\n            }));\r\n        },\r\n        findDataCell = function(uniq, ids, col, scope) {\r\n            if (scope == undefined) {\r\n                scope = $();\r\n            };\r\n            if (ids === null || ids === undefined || ids.length === 0) {\r\n                return scope;\r\n            }\r\n            var ret = $(),\r\n                columns = [].concat(col),\r\n                cellId;\r\n            if (typeof(ids) === \"string\") {\r\n                cellId = generateCellId(uniq, ids);\r\n                ret = columns.map(function(col) {\r\n                    return \"#\" + cellId + col;\r\n                }).join(\", \");\r\n            } else {\r\n                ret = []\r\n                ids.forEach(function(elm, i) {\r\n                    var cellId = generateCellId(uniq, elm);\r\n                    ret = ret.concat(columns.map(function(col) {\r\n                        return \"#\" + cellId + col;\r\n                    }));\r\n                });\r\n                ret = ret.join(\", \");\r\n            }\r\n            return columns.length == 1 ? scope.find(ret) : $(ret);\r\n        },\r\n        isClickedSep = false,\r\n        toResize = null,\r\n        oldMouseX = 0,\r\n        newMouseX = 0,\r\n\r\n        /*jslint regexp:true */\r\n        htmlstripre = /<\\/?[^>]+>/gi,\r\n        /*jslint regexp:false */\r\n\r\n        getIndent = function(node, tree) {\r\n            var div, i, li, width;\r\n\r\n            // did we already save it for this tree?\r\n            tree._gridSettings = tree._gridSettings || {};\r\n            if (tree._gridSettings.indent > 0) {\r\n                width = tree._gridSettings.indent;\r\n            } else {\r\n                // create a new div on the DOM but not visible on the page\r\n                div = $(\"<div></div>\");\r\n                i = node.prev(\"i\");\r\n                li = i.parent();\r\n                // add to that div all of the classes on the tree root\r\n                div.addClass(tree.get_node(\"#\", true).attr(\"class\"));\r\n\r\n                // move the li to the temporary div root\r\n                li.appendTo(div);\r\n\r\n                // attach to the body quickly\r\n                div.appendTo($(\"body\"));\r\n\r\n                // get the width\r\n                width = i.width() || LEVELINDENT;\r\n\r\n                // detach the li from the new div and destroy the new div\r\n                li.detach();\r\n                div.remove();\r\n\r\n                // save it for the future\r\n                tree._gridSettings.indent = width;\r\n            }\r\n\r\n\r\n            return (width);\r\n\r\n        },\r\n\r\n        copyData = function(fromtree, from, totree, to, recurse) {\r\n            var i, j;\r\n            to.data = $.extend(true, {}, from.data);\r\n            if (from && from.children_d && recurse) {\r\n                for (i = 0, j = from.children_d.length; i < j; i++) {\r\n                    copyData(fromtree, fromtree.get_node(from.children_d[i]), totree, totree.get_node(to.children_d[i]), recurse);\r\n                }\r\n            }\r\n        },\r\n\r\n        findLastClosedNode = function(tree, id) {\r\n            // first get our node\r\n            var ret, node = tree.get_node(id),\r\n                children = node.children;\r\n            // is it closed?\r\n            if (!children || children.length <= 0 || !node.state.opened) {\r\n                ret = id;\r\n            } else {\r\n                ret = findLastClosedNode(tree, children[children.length - 1]);\r\n            }\r\n            return (ret);\r\n        },\r\n\r\n        renderAWidth = function(node, tree) {\r\n            var depth, width,\r\n                fullWidth = parseInt(tree.settings.grid.columns[0].width, 10) + parseInt(tree._gridSettings.treeWidthDiff, 10);\r\n            // need to use a selector in jquery 1.4.4+\r\n            depth = tree.get_node(node).parents.length;\r\n            width = fullWidth - depth * getIndent(node, tree);\r\n            // the following line is no longer needed, since we are doing this inside a <td>\r\n            //a.css({\"vertical-align\": \"top\", \"overflow\":\"hidden\"});\r\n            return (fullWidth);\r\n        },\r\n        renderATitle = function(node, t, tree) {\r\n            var a = node.hasClass(\"jstree-anchor\") ? node : node.children(\"[class~='jstree-anchor']\"),\r\n                title, col = tree.settings.grid.columns[0];\r\n            // get the title\r\n            title = \"\";\r\n            if (col.title) {\r\n                if (col.title === SPECIAL_TITLE) {\r\n                    title = tree.get_text(t);\r\n                } else if (t.attr(col.title)) {\r\n                    title = t.attr(col.title);\r\n                }\r\n            }\r\n            // strip out HTML\r\n            title = title.replace(htmlstripre, '');\r\n            if (title) {\r\n                a.attr(\"title\", title);\r\n            }\r\n        },\r\n        getCellData = function(value, data) {\r\n            var val;\r\n            // get the contents of the cell - value could be a string or a function\r\n            if (value !== undefined && value !== null) {\r\n                if (typeof(value) === \"function\") {\r\n                    val = value(data);\r\n                } else if (data.data !== null && data.data !== undefined && data.data[value] !== undefined) {\r\n                    val = data.data[value];\r\n                } else {\r\n                    val = \"\";\r\n                }\r\n            } else {\r\n                val = \"\";\r\n            }\r\n            return val;\r\n        };\r\n\r\n    $.jstree.defaults.grid = {\r\n        width: 'auto'\r\n    };\r\n\r\n    $.jstree.plugins.grid = function(options, parent) {\r\n        this._initialize = function() {\r\n            if (!this._initialized) {\r\n                var s = this.settings.grid || {},\r\n                    styles, container = this.element,\r\n                    i,\r\n                    gs = this._gridSettings = {\r\n                        columns: s.columns || [],\r\n                        treeClass: \"jstree-grid-col-0\",\r\n                        context: s.contextmenu || false,\r\n                        columnWidth: s.columnWidth,\r\n                        defaultConf: {\r\n                            \"*display\": \"inline\",\r\n                            \"*+display\": \"inline\"\r\n                        },\r\n                        isThemeroller: !!this._data.themeroller,\r\n                        treeWidthDiff: 0,\r\n                        resizable: s.resizable,\r\n                        draggable: s.draggable,\r\n                        stateful: s.stateful,\r\n                        indent: 0,\r\n                        sortOrder: 'text',\r\n                        sortAsc: true,\r\n                        caseInsensitive: s.caseInsensitive,\r\n                        fixedHeader: s.fixedHeader !== false,\r\n                        width: s.width,\r\n                        height: s.height,\r\n                        gridcontextmenu: s.gridcontextmenu,\r\n                        treecol: 0,\r\n                        gridcols: []\r\n                    },\r\n                    cols = gs.columns,\r\n                    treecol = 0,\r\n                    columnSearch = false;\r\n                if (gs.gridcontextmenu === true) {\r\n                    gs.gridcontextmenu = function(grid, tree, node, val, col, t, target) {\r\n                        return {\r\n                            \"edit\": {\r\n                                label: \"Edit\",\r\n                                \"action\": function(data) {\r\n                                    var obj = t.get_node(node);\r\n                                    grid._edit(obj, col, target);\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                } else if (gs.gridcontextmenu === false) {\r\n                    gs.gridcontextmenu = false;\r\n                }\r\n                // find which column our tree shuld go in\r\n                for (var i = 0, len = s.columns.length; i < len; i++) {\r\n                    if (s.columns[i].tree) {\r\n                        // save which column it was\r\n                        treecol = i;\r\n                        gs.treecol = treecol;\r\n                    } else {\r\n                        gs.gridcols.push(i);\r\n                    }\r\n                }\r\n                // set a unique ID for this table\r\n                this.uniq = Math.ceil(Math.random() * 1000);\r\n                this.rootid = container.attr(\"id\");\r\n\r\n                var msie = /msie/.test(navigator.userAgent.toLowerCase());\r\n                if (msie) {\r\n                    var version = parseFloat(navigator.appVersion.split(\"MSIE\")[1]);\r\n                    if (version < 8) {\r\n                        gs.defaultConf.display = \"inline\";\r\n                        gs.defaultConf.zoom = \"1\";\r\n                    }\r\n                }\r\n\r\n                // set up the classes we need\r\n                if (!styled) {\r\n                    styled = true;\r\n                    styles = [\r\n                        '.jstree-grid-cell {vertical-align: top; overflow:hidden;margin-left:0;position:relative;width: 100%;padding-left:7px;white-space: nowrap;}',\r\n                        '.jstree-grid-cell span {margin-right:0px;margin-right:0px;*display:inline;*+display:inline;white-space: nowrap;}',\r\n                        '.jstree-grid-separator {position:absolute; top:0; right:0; height:24px; margin-left: -2px; border-width: 0 2px 0 0; *display:inline; *+display:inline; margin-right:0px;width:0px;}',\r\n                        '.jstree-grid-header-cell {overflow: hidden; white-space: nowrap;padding: 1px 3px 2px 5px; cursor: default;}',\r\n                        '.jstree-grid-header-themeroller {border: 0; padding: 1px 3px;}',\r\n                        '.jstree-grid-header-regular {position:relative; background-color: #EBF3FD; z-index: 1;}',\r\n                        '.jstree-grid-hidden {display: none;}',\r\n                        '.jstree-grid-resizable-separator {cursor: col-resize; width: 2px;}',\r\n                        '.jstree-grid-separator-regular {border-color: #d0d0d0; border-style: solid;}',\r\n                        '.jstree-grid-cell-themeroller {border: none !important; background: transparent !important;}',\r\n                        '.jstree-grid-wrapper {table-layout: fixed; width: 100%; overflow: auto; position: relative;}',\r\n                        '.jstree-grid-midwrapper {display: table-row;}',\r\n                        '.jstree-grid-width-auto {width:auto;display:block;}',\r\n                        '.jstree-grid-column {display: table-cell; overflow: hidden;}',\r\n                        '.jstree-grid-ellipsis {text-overflow: ellipsis;}',\r\n                        '.jstree-grid-col-0 {width: 100%;}'\r\n                    ];\r\n                    $('<style type=\"text/css\">' + styles.join(\"\\n\") + '</style>').appendTo(\"head\");\r\n                }\r\n                this.gridWrapper = $(\"<div></div>\").addClass(\"jstree-grid-wrapper\").insertAfter(container);\r\n                this.midWrapper = $(\"<div></div>\").addClass(\"jstree-grid-midwrapper\").appendTo(this.gridWrapper);\r\n                // set the wrapper width\r\n                if (s.width) {\r\n                    this.gridWrapper.width(s.width);\r\n                }\r\n                if (s.height) {\r\n                    this.gridWrapper.height(s.height);\r\n                }\r\n                // create the data columns\r\n                for (var i = 0, len = cols.length; i < len; i++) {\r\n                    // create the column\r\n                    $(\"<div></div>\").addClass(\"jstree-default jstree-grid-column jstree-grid-column-\" + i + \" jstree-grid-column-root-\" + this.rootid).appendTo(this.midWrapper);\r\n                }\r\n                this.midWrapper.children(\"div:eq(\" + treecol + \")\").append(container);\r\n                container.addClass(\"jstree-grid-cell\");\r\n\r\n                //move header with scroll\r\n                if (gs.fixedHeader) {\r\n                    this.gridWrapper.scroll(function() {\r\n                        $(this).find('.jstree-grid-header').css('top', $(this).scrollTop());\r\n                    });\r\n                }\r\n\r\n                // copy original sort function\r\n                var defaultSort = $.proxy(this.settings.sort, this);\r\n\r\n                // override sort function\r\n                this.settings.sort = function(a, b) {\r\n                    var bigger, colrefs = this.colrefs;\r\n\r\n                    if (gs.sortOrder === 'text') {\r\n                        var caseInsensitiveSort = this.get_text(a).toLowerCase().localeCompare(this.get_text(b).toLowerCase());\r\n                        bigger = gs.caseInsensitive ? (caseInsensitiveSort === 1) : (defaultSort(a, b) === 1);\r\n                    } else {\r\n                        // gs.sortOrder just refers to the unique random name for this column\r\n                        // we need to get the correct value\r\n                        var nodeA = this.get_node(a),\r\n                            nodeB = this.get_node(b),\r\n                            value = colrefs[gs.sortOrder].value,\r\n                            valueA = typeof(value) === 'function' ? value(nodeA) : nodeA.data[value],\r\n                            valueB = typeof(value) === 'function' ? value(nodeB) : nodeB.data[value];\r\n                        if (typeof(valueA) && typeof(valueB) !== 'undefined') {\r\n                            bigger = gs.caseInsensitive ? valueA.toLowerCase() > valueB.toLowerCase() : valueA > valueB;\r\n                        }\r\n                    }\r\n\r\n                    if (!gs.sortAsc)\r\n                        bigger = !bigger;\r\n\r\n                    return bigger ? 1 : -1;\r\n                };\r\n\r\n                // sortable columns when jQuery UI is available\r\n                if (gs.draggable) {\r\n                    if (!$.ui || !$.ui.sortable) {\r\n                        console.warn('[jstree-grid] draggable option requires jQuery UI');\r\n                    } else {\r\n                        var from, to;\r\n\r\n                        $(this.midWrapper).sortable({\r\n                            axis: \"x\",\r\n                            handle: \".jstree-grid-header\",\r\n                            cancel: \".jstree-grid-separator\",\r\n                            start: function(event, ui) {\r\n                                from = ui.item.index();\r\n                            },\r\n                            stop: function(event, ui) {\r\n                                to = ui.item.index();\r\n                                gs.columns.splice(to, 0, gs.columns.splice(from, 1)[0]);\r\n                            }\r\n                        });\r\n                    }\r\n                }\r\n\r\n                //public function. validate searchObject keys, set columnSearch flag, calls jstree search and reset columnSearch flag\r\n                this.searchColumn = function(searchObj) {\r\n                    var validatedSearchObj = {};\r\n\r\n                    if (typeof searchObj == 'object') {\r\n                        for (var columnIndex in searchObj) {\r\n                            if (searchObj.hasOwnProperty(columnIndex)) {\r\n                                // keys should be the index of a column. This means the following:\r\n                                // only integers and smaller than the number of columns and bigger or equal to 0\r\n                                // (possilbe idea for in the future: ability to set key as a more human readable term like the column header and then map it here to an index)\r\n                                if (columnIndex % 1 === 0 && columnIndex < cols.length && columnIndex >= 0) {\r\n                                    validatedSearchObj[columnIndex] = searchObj[columnIndex];\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    columnSearch = validatedSearchObj;\r\n\r\n                    if (Object.keys(validatedSearchObj).length !== 0) {\r\n                        //the search string doesn't matter. we'll use the search string in the columnSearch object!\r\n                        this.search('someValue');\r\n                    } else { // nothing to search so reset jstree's search by passing an empty string\r\n                        this.search('');\r\n                    }\r\n                    columnSearch = false;\r\n                }\r\n\r\n\r\n                // set default search for each column with no user defined search function (used when doing a columnSearch)\r\n                for (var i = 0, len = cols.length; i < len; i++) {\r\n                    var column = cols[i];\r\n                    if (typeof(column.search_callback) !== \"function\") {\r\n                        // no search callback so set default function\r\n                        column.search_callback = function(str, columnValue, node, column) {\r\n                            var f = new $.vakata.search(str, true, {\r\n                                caseSensitive: searchSettings.case_sensitive,\r\n                                fuzzy: searchSettings.fuzzy\r\n                            });\r\n\r\n                            return f.search(columnValue).isMatch;\r\n\r\n                        };\r\n                    }\r\n                }\r\n\r\n                // if there was no overridden search_callback, we will provide it\r\n                // it will use the default per-node search algorithm, augmented by searching our data nodes\r\n                var searchSettings = this.settings.search;\r\n                var omniSearchCallback = searchSettings.search_callback;\r\n\r\n                if (!omniSearchCallback) {\r\n                    omniSearchCallback = function(str, node) {\r\n                        var i, f = new $.vakata.search(str, true, {\r\n                                caseSensitive: searchSettings.case_sensitive,\r\n                                fuzzy: searchSettings.fuzzy\r\n                            }),\r\n                            matched = f.search(node.text).isMatch,\r\n                            col;\r\n\r\n                        // only bother looking in each cell if it was not yet matched\r\n                        if (!matched) {\r\n                            for (var i = 0, len = cols.length; i < len; i++) {\r\n                                if (treecol === i) {\r\n                                    continue;\r\n                                }\r\n                                col = cols[i];\r\n                                matched = f.search(getCellData(col.value, node)).isMatch;\r\n                                if (matched) {\r\n                                    break;\r\n                                }\r\n                            }\r\n                        }\r\n                        return matched;\r\n                    }\r\n                }\r\n\r\n                searchSettings.search_callback = function(str, node) {\r\n                    var matched = false;\r\n                    if (columnSearch) {\r\n                        //using logical AND for column searches (more options in the future)\r\n                        for (var columnIndex in columnSearch) {\r\n                            if (columnSearch.hasOwnProperty(columnIndex)) {\r\n                                var searchValue = columnSearch[columnIndex];\r\n                                if (searchValue == '') {\r\n                                    continue;\r\n                                }\r\n                                var col = cols[columnIndex];\r\n                                if (treecol == columnIndex) {\r\n                                    matched = col.search_callback(searchValue, node.text, node, col)\r\n                                } else {\r\n                                    matched = col.search_callback(searchValue, getCellData(col.value, node), node, col)\r\n                                }\r\n\r\n                                if (!matched) {\r\n                                    break; //found one that didn't match\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        container.trigger(\"columnSearch_grid.jstree\");\r\n                    } else {\r\n                        matched = omniSearchCallback(str, node);\r\n                        container.trigger(\"omniSearch_grid.jstree\");\r\n                    }\r\n                    return matched;\r\n                };\r\n                this._initialized = true;\r\n            }\r\n        };\r\n        this.init = function(el, options) {\r\n            parent.init.call(this, el, options);\r\n            this._initialize();\r\n        };\r\n        this.bind = function() {\r\n            parent.bind.call(this);\r\n            this._initialize();\r\n            this.element\r\n                .on(\"move_node.jstree create_node.jstree clean_node.jstree change_node.jstree\", $.proxy(function(e, data) {\r\n                    var target = this.get_node(data || \"#\", true);\r\n                    var id = _guid();\r\n                    this._detachColumns(id);\r\n                    this._prepare_grid(target);\r\n                    this._reattachColumns(id);\r\n                }, this))\r\n                .on(\"delete_node.jstree\", $.proxy(function(e, data) {\r\n                    if (data.node.id !== undefined) {\r\n                        var grid = this.gridWrapper,\r\n                            removeNodes = [data.node.id],\r\n                            i;\r\n                        // add children to remove list\r\n                        if (data.node && data.node.children_d) {\r\n                            removeNodes = removeNodes.concat(data.node.children_d);\r\n                        }\r\n                        findDataCell(this.uniq, removeNodes, this._gridSettings.gridcols).remove();\r\n                    }\r\n                }, this))\r\n                .on(\"show_node.jstree\", $.proxy(function(e, data) {\r\n                    this._hideOrShowTree(data.node, false);\r\n                }, this))\r\n                .on(\"hide_node.jstree\", $.proxy(function(e, data) {\r\n                    this._hideOrShowTree(data.node, true);\r\n                }, this))\r\n                .on(\"close_node.jstree\", $.proxy(function(e, data) {\r\n                    this._hide_grid(data.node);\r\n                }, this))\r\n                .on(\"open_node.jstree\", $.proxy(function(e, data) {}, this))\r\n                .on(\"load_node.jstree\", $.proxy(function(e, data) {}, this))\r\n                .on(\"loaded.jstree\", $.proxy(function(e) {\r\n                    this._prepare_headers();\r\n                    this.element.trigger(\"loaded_grid.jstree\");\r\n                }, this))\r\n                .on(\"ready.jstree\", $.proxy(function(e, data) {\r\n                    // find the line-height of the first known node\r\n                    var anchorHeight = this.element.find(\"[class~='jstree-anchor']:first\").outerHeight(),\r\n                        q,\r\n                        cls = this.element.attr(\"class\") || \"\";\r\n                    $('<style type=\"text/css\">div.jstree-grid-cell-root-' + this.rootid + ' {line-height: ' + anchorHeight + 'px; height: ' + anchorHeight + 'px;}</style>').appendTo(\"head\");\r\n\r\n                    // add container classes to the wrapper - EXCEPT those that are added by jstree, i.e. \"jstree\" and \"jstree-*\"\r\n                    q = cls.split(/\\s+/).map(function(i) {\r\n                        var match = i.match(/^jstree(-|$)/);\r\n                        return (match ? \"\" : i);\r\n                    });\r\n                    this.gridWrapper.addClass(q.join(\" \"));\r\n\r\n                }, this))\r\n                .on(\"move_node.jstree\", $.proxy(function(e, data) {\r\n                    var node = data.new_instance.element;\r\n                    //renderAWidth(node,this);\r\n                    // check all the children, because we could drag a tree over\r\n                    node.find(\"li > a\").each($.proxy(function(i, elm) {\r\n                        //renderAWidth($(elm),this);\r\n                    }, this));\r\n\r\n                }, this))\r\n                .on(\"hover_node.jstree\", $.proxy(function(node, selected, event) {\r\n                    var id = selected.node.id;\r\n                    if (this._hover_node !== null && this._hover_node !== undefined) {\r\n                        findDataCell(this.uniq, this._hover_node, this._gridSettings.gridcols).removeClass(\"jstree-hovered\");\r\n                    }\r\n                    this._hover_node = id;\r\n                    findDataCell(this.uniq, id, this._gridSettings.gridcols).addClass(\"jstree-hovered\");\r\n                }, this))\r\n                .on(\"dehover_node.jstree\", $.proxy(function(node, selected, event) {\r\n                    var id = selected.node.id;\r\n                    this._hover_node = null;\r\n                    findDataCell(this.uniq, id, this._gridSettings.gridcols).removeClass(\"jstree-hovered\");\r\n                }, this))\r\n                .on(\"select_node.jstree\", $.proxy(function(node, selected, event) {\r\n                    var id = selected.node.id;\r\n                    findDataCell(this.uniq, id, this._gridSettings.gridcols).addClass(\"jstree-clicked\");\r\n                    this.get_node(selected.node.id, true).children(\"div.jstree-grid-cell\").addClass(\"jstree-clicked\");\r\n                }, this))\r\n                .on(\"deselect_node.jstree\", $.proxy(function(node, selected, event) {\r\n                    var id = selected.node.id;\r\n                    findDataCell(this.uniq, id, this._gridSettings.gridcols).removeClass(\"jstree-clicked\");\r\n                }, this))\r\n                .on(\"deselect_all.jstree\", $.proxy(function(node, selected, event) {\r\n                    // get all of the ids that were unselected\r\n                    var ids = selected.node || [],\r\n                        i;\r\n                    findDataCell(this.uniq, ids, this._gridSettings.gridcols).removeClass(\"jstree-clicked\");\r\n                }, this))\r\n                .on(\"search.jstree\", $.proxy(function(e, data) {\r\n                    // search sometimes filters, so we need to hide all of the appropriate grid cells as well, and show only the matches\r\n                    var grid = this.gridWrapper,\r\n                        that = this,\r\n                        nodesToShow, startTime = new Date().getTime(),\r\n                        ids = getIds(data.nodes.filter(\".jstree-node\")),\r\n                        endTime;\r\n                    this.holdingCells = {};\r\n                    if (data.nodes.length) {\r\n                        var id = _guid();\r\n                        // save the cells we will hide\r\n                        var cells = grid.find('div.jstree-grid-cell-regular');\r\n                        this._detachColumns(id);\r\n                        if (this._data.search.som) {\r\n                            // create the list of nodes we want to look at\r\n                            if (this._data.search.smc) {\r\n                                nodesToShow = data.nodes.add(data.nodes.find('.jstree-node'));\r\n                            }\r\n                            nodesToShow = (nodesToShow || data.nodes).add(data.nodes.parentsUntil(\".jstree\"));\r\n\r\n                            // hide all of the grid cells\r\n                            cells.hide();\r\n                            // show only those that match\r\n                            nodesToShow.filter(\".jstree-node\").each(function(i, node) {\r\n                                var id = node.id;\r\n                                if (id) {\r\n                                    that._prepare_grid(node);\r\n                                    for (var i = 0, len = that._gridSettings.gridcols.length; i < len; i++) {\r\n                                        if (i === that._gridSettings.treecol) {\r\n                                            continue;\r\n                                        }\r\n                                        findDataCell(that.uniq, id, that._gridSettings.gridcols[i], $(that._domManipulation.columns[i])).show();\r\n                                    }\r\n                                }\r\n                            });\r\n                        }\r\n\r\n                        for (var i = 0, len = this._gridSettings.gridcols.length; i < len; i++) {\r\n                            if (i === this._gridSettings.treecol) {\r\n                                continue;\r\n                            }\r\n                            findDataCell(that.uniq, ids, this._gridSettings.gridcols[i], $(this._domManipulation.columns[i])).addClass(SEARCHCLASS);\r\n                        }\r\n                        this._reattachColumns(id);\r\n                        endTime = new Date().getTime();\r\n                        this.element.trigger(\"search-complete.jstree-grid\", [{\r\n                            time: endTime - startTime\r\n                        }]);\r\n                    }\r\n                    return true;\r\n                }, this))\r\n                .on(\"clear_search.jstree\", $.proxy(function(e, data) {\r\n                    // search has been cleared, so we need to show all rows\r\n                    var grid = this.gridWrapper,\r\n                        ids = getIds(data.nodes.filter(\".jstree-node\"));\r\n                    grid.find('div.jstree-grid-cell').show();\r\n                    findDataCell(this.uniq, ids, this._gridSettings.gridcols).removeClass(SEARCHCLASS);\r\n                    return true;\r\n                }, this))\r\n                .on(\"copy_node.jstree\", function(e, data) {\r\n                    var newtree = data.new_instance,\r\n                        oldtree = data.old_instance,\r\n                        obj = newtree.get_node(data.node, true);\r\n                    copyData(oldtree, data.original, newtree, data.node, true);\r\n                    newtree._detachColumns(obj.id);\r\n                    newtree._prepare_grid(obj);\r\n                    newtree._reattachColumns(obj.id);\r\n                    return true;\r\n                })\r\n                .on(\"show_ellipsis.jstree\", $.proxy(function(e, data) {\r\n                    this.gridWrapper.find(\".jstree-grid-cell\").add(\".jstree-grid-header\", this.gridWrapper).addClass(\"jstree-grid-ellipsis\");\r\n                    return true;\r\n                }, this))\r\n                .on(\"hide_ellipsis.jstree\", $.proxy(function(e, data) {\r\n                    this.gridWrapper.find(\".jstree-grid-cell\").add(\".jstree-grid-header\", this.gridWrapper).removeClass(\"jstree-grid-ellipsis\");\r\n                    return true;\r\n                }, this));\r\n            if (this._gridSettings.isThemeroller) {\r\n                this.element\r\n                    .on(\"select_node.jstree\", $.proxy(function(e, data) {\r\n                        data.rslt.obj.children(\"[class~='jstree-anchor']\").nextAll(\"div\").addClass(\"ui-state-active\");\r\n                    }, this))\r\n                    .on(\"deselect_node.jstree deselect_all.jstree\", $.proxy(function(e, data) {\r\n                        data.rslt.obj.children(\"[class~='jstree-anchor']\").nextAll(\"div\").removeClass(\"ui-state-active\");\r\n                    }, this))\r\n                    .on(\"hover_node.jstree\", $.proxy(function(e, data) {\r\n                        data.rslt.obj.children(\"[class~='jstree-anchor']\").nextAll(\"div\").addClass(\"ui-state-hover\");\r\n                    }, this))\r\n                    .on(\"dehover_node.jstree\", $.proxy(function(e, data) {\r\n                        data.rslt.obj.children(\"[class~='jstree-anchor']\").nextAll(\"div\").removeClass(\"ui-state-hover\");\r\n                    }, this));\r\n            }\r\n\r\n            if (this._gridSettings.stateful) {\r\n                this.element\r\n                    .on(\"resize_column.jstree-grid\", $.proxy(function(e, col, width) {\r\n                        localStorage['jstree-root-' + this.rootid + '-column-' + col] = width;\r\n                    }, this));\r\n            }\r\n        };\r\n\r\n        // tear down the tree entirely\r\n        this.teardown = function() {\r\n            var gw = this.gridWrapper,\r\n                container = this.element,\r\n                gridparent = gw.parent();\r\n            container.detach();\r\n            gw.remove();\r\n            gridparent.append(container);\r\n            parent.teardown.call(this);\r\n        };\r\n        // clean the grid in case of redraw or refresh entire tree\r\n        this._clean_grid = function(target, id) {\r\n            var grid = this.gridWrapper;\r\n            if (target) {\r\n                findDataCell(this.uniq, id, this._gridSettings.gridcols).remove();\r\n            } else {\r\n                // get all of the `div` children in all of the `td` in dataRow except for :first (that is the tree itself) and remove\r\n                grid.find(\"div.jstree-grid-cell-regular\").remove();\r\n            }\r\n        };\r\n        // prepare the headers\r\n        this._prepare_headers = function() {\r\n            var header, i, col, _this = this,\r\n                gs = this._gridSettings,\r\n                cols = gs.columns || [],\r\n                width, defaultWidth = gs.columnWidth,\r\n                resizable = gs.resizable || false,\r\n                cl, ccl, val, name, last, tr = gs.isThemeroller,\r\n                classAdd = (tr ? \"themeroller\" : \"regular\"),\r\n                puller,\r\n                hasHeaders = false,\r\n                gridparent = this.gridparent,\r\n                rootid = this.rootid,\r\n                conf = gs.defaultConf,\r\n                coluuid,\r\n                borPadWidth = 0,\r\n                totalWidth = 0;\r\n\r\n            // save the original parent so we can reparent on destroy\r\n            this.parent = gridparent;\r\n\r\n            // save the references to columns by unique ID\r\n            this.colrefs = {};\r\n\r\n\r\n            // create the headers\r\n            for (var i = 0, len = cols.length; i < len; i++) {\r\n                //col = $(\"<col/>\");\r\n                //col.appendTo(colgroup);\r\n                cl = cols[i].headerClass || \"\";\r\n                ccl = cols[i].columnClass || \"\";\r\n                val = cols[i].header || \"\";\r\n                do {\r\n                    coluuid = String(Math.floor(Math.random() * 10000));\r\n                } while (this.colrefs[coluuid] !== undefined);\r\n                // create a unique name for this column\r\n                name = cols[i].value ? coluuid : \"text\";\r\n                this.colrefs[name] = cols[i];\r\n\r\n                if (val) {\r\n                    hasHeaders = true;\r\n                }\r\n                if (gs.stateful && localStorage['jstree-root-' + rootid + '-column-' + i])\r\n                    width = localStorage['jstree-root-' + rootid + '-column-' + i];\r\n                else\r\n                    width = cols[i].width || defaultWidth;\r\n\r\n                var minWidth = cols[i].minWidth || width;\r\n                var maxWidth = cols[i].maxWidth || width;\r\n\r\n                // we only deal with borders if width is not auto and not percentages\r\n                borPadWidth = tr ? 1 + 6 : 2 + 8; // account for the borders and padding\r\n                if (width !== 'auto' && typeof(width) !== \"string\") {\r\n                    width -= borPadWidth;\r\n                }\r\n                col = this.midWrapper.children(\"div.jstree-grid-column-\" + i);\r\n                last = $(\"<div></div>\").css(conf).addClass(\"jstree-grid-div-\" + this.uniq + \"-\" + i + \" \" + (tr ? \"ui-widget-header \" : \"\") + \" jstree-grid-header jstree-grid-header-cell jstree-grid-header-\" + classAdd + \" \" + cl + \" \" + ccl).html(val);\r\n                last.addClass((tr ? \"ui-widget-header \" : \"\") + \"jstree-grid-header jstree-grid-header-\" + classAdd);\r\n                if (this.settings.core.themes.ellipsis === true) {\r\n                    last.addClass('jstree-grid-ellipsis');\r\n                }\r\n                last.prependTo(col);\r\n                last.attr(COL_DATA_ATTR, name);\r\n                totalWidth += last.outerWidth();\r\n                puller = $(\"<div class='jstree-grid-separator jstree-grid-separator-\" + classAdd + (tr ? \" ui-widget-header\" : \"\") + (resizable ? \" jstree-grid-resizable-separator\" : \"\") + \"'>&nbsp;</div>\").appendTo(last);\r\n                col.width(width);\r\n                col.css(\"min-width\", minWidth);\r\n                col.css(\"max-width\", maxWidth);\r\n            }\r\n\r\n            last.addClass((tr ? \"ui-widget-header \" : \"\") + \"jstree-grid-header jstree-grid-header-last jstree-grid-header-\" + classAdd);\r\n            // if there is no width given for the last column, do it via automatic\r\n            if (cols[cols.length - 1].width === undefined) {\r\n                totalWidth -= width;\r\n                col.css({\r\n                    width: \"auto\"\r\n                });\r\n                last.addClass(\"jstree-grid-width-auto\").next(\".jstree-grid-separator\").remove();\r\n            }\r\n            if (hasHeaders) {\r\n                // save the offset of the div from the body\r\n                //gs.divOffset = header.parent().offset().left;\r\n                gs.header = header;\r\n            } else {\r\n                $(\"div.jstree-grid-header\").hide();\r\n            }\r\n\r\n            if (!this.bound && resizable) {\r\n                this.bound = true;\r\n                $(document).mouseup(function() {\r\n                    var ref, cols, width, headers, currentTree, colNum;\r\n                    if (isClickedSep) {\r\n                        colNum = toResize.prevAll(\".jstree-grid-column\").length;\r\n                        currentTree = toResize.closest(\".jstree-grid-wrapper\").find(\".jstree\");\r\n                        ref = $.jstree.reference(currentTree);\r\n                        cols = ref.settings.grid.columns;\r\n                        headers = toResize.parent().children(\"div.jstree-grid-column\");\r\n                        if (isNaN(colNum) || colNum < 0) {\r\n                            ref._gridSettings.treeWidthDiff = currentTree.find(\"ins:eq(0)\").width() + currentTree.find(\"[class~='jstree-anchor']:eq(0)\").width() - ref._gridSettings.columns[0].width;\r\n                        }\r\n                        width = ref._gridSettings.columns[colNum].width = parseFloat(toResize.css(\"width\"));\r\n                        isClickedSep = false;\r\n                        toResize = null;\r\n\r\n                        currentTree.trigger(\"resize_column.jstree-grid\", [colNum, width]);\r\n                    }\r\n                }).mousemove(function(e) {\r\n                    if (isClickedSep) {\r\n                        newMouseX = e.pageX;\r\n                        var diff = newMouseX - oldMouseX,\r\n                            oldPrevHeaderInner,\r\n                            oldPrevColWidth, newPrevColWidth;\r\n\r\n                        if (diff !== 0) {\r\n                            oldPrevHeaderInner = toResize.width();\r\n                            oldPrevColWidth = parseFloat(toResize.css(\"width\"));\r\n\r\n                            // handle a Chrome issue with columns set to auto\r\n                            // thanks to Brabus https://github.com/side-by-side\r\n                            if (!oldPrevColWidth) {\r\n                                oldPrevColWidth = toResize.innerWidth();\r\n                            }\r\n\r\n                            // make sure that diff cannot be beyond the left/right limits\r\n                            diff = diff < 0 ? Math.max(diff, -oldPrevHeaderInner) : diff;\r\n                            newPrevColWidth = oldPrevColWidth + diff;\r\n\r\n                            // only do this if we are not shrinking past 0 on left - and limit it to that amount\r\n                            if ((diff > 0 || oldPrevHeaderInner > 0) && newPrevColWidth > MINCOLWIDTH) {\r\n                                toResize.width(newPrevColWidth + \"px\");\r\n                                toResize.css(\"min-width\", newPrevColWidth + \"px\");\r\n                                toResize.css(\"max-width\", newPrevColWidth + \"px\");\r\n                                oldMouseX = newMouseX;\r\n                            }\r\n                        }\r\n                    }\r\n                });\r\n                this.gridWrapper.on(\"selectstart\", \".jstree-grid-resizable-separator\", function() {\r\n                        return false;\r\n                    }).on(\"mousedown\", \".jstree-grid-resizable-separator\", function(e) {\r\n                        isClickedSep = true;\r\n                        oldMouseX = e.pageX;\r\n                        toResize = $(this).closest(\"div.jstree-grid-column\");\r\n                        // the max rightmost position we will allow is the right-most of the wrapper minus a buffer (10)\r\n                        return false;\r\n                    })\r\n                    .on(\"dblclick\", \".jstree-grid-resizable-separator\", function(e) {\r\n                        var clickedSep = $(this),\r\n                            col = clickedSep.closest(\"div.jstree-grid-column\"),\r\n                            oldPrevColWidth = parseFloat(col.css(\"width\")),\r\n                            newWidth = 0,\r\n                            diff,\r\n                            colNum = col.prevAll(\".jstree-grid-column\").length,\r\n                            oldPrevHeaderInner = col.width(),\r\n                            newPrevColWidth;\r\n\r\n\r\n                        //find largest width\r\n                        col.find(\".jstree-grid-cell\").each(function() {\r\n                            var item = $(this),\r\n                                width;\r\n                            item.css(\"position\", \"absolute\");\r\n                            item.css(\"width\", \"auto\");\r\n                            width = item.outerWidth();\r\n                            item.css(\"position\", \"relative\");\r\n\r\n                            if (width > newWidth) {\r\n                                newWidth = width;\r\n                            }\r\n                        });\r\n\r\n                        diff = newWidth - oldPrevColWidth;\r\n\r\n                        // make sure that diff cannot be beyond the left limits\r\n                        diff = diff < 0 ? Math.max(diff, -oldPrevHeaderInner) : diff;\r\n                        newPrevColWidth = (oldPrevColWidth + diff) + \"px\";\r\n\r\n                        col.width(newPrevColWidth);\r\n                        col.css(\"min-width\", newPrevColWidth);\r\n                        col.css(\"max-width\", newPrevColWidth);\r\n\r\n                        $(this).closest(\".jstree-grid-wrapper\").find(\".jstree\").trigger(\"resize_column.jstree-grid\", [colNum, newPrevColWidth]);\r\n                    })\r\n                    .on(\"click\", \".jstree-grid-separator\", function(e) {\r\n                        // don't sort after resize\r\n                        e.stopPropagation();\r\n                    });\r\n            }\r\n            this.gridWrapper.on(\"click\", \".jstree-grid-header-cell\", function(e) {\r\n                if (!_this.sort) {\r\n                    return;\r\n                }\r\n\r\n                // get column\r\n                var name = $(this).attr(COL_DATA_ATTR);\r\n\r\n                // sort order\r\n                var symbol;\r\n                if (gs.sortOrder === name && gs.sortAsc === true) {\r\n                    gs.sortAsc = false;\r\n                    symbol = \"&darr;\";\r\n                } else {\r\n                    gs.sortOrder = name;\r\n                    gs.sortAsc = true;\r\n                    symbol = \"&uarr;\";\r\n                }\r\n\r\n                // add sort arrow\r\n                $(this.closest('.jstree-grid-wrapper')).find(\".jstree-grid-sort-icon\").remove();\r\n                $(\"<span></span>\").addClass(\"jstree-grid-sort-icon\").appendTo($(this)).html(symbol);\r\n\r\n                // sort by column\r\n                var rootNode = _this.get_node('#');\r\n                _this.sort(rootNode, true);\r\n                _this.redraw_node(rootNode, true);\r\n            });\r\n\r\n        };\r\n\r\n        this._domManipulation = null; // We'll store the column nodes in this object and an id for the grid-node that started the manipulation { id: \"id of the node that started the manipulation\", columns: { Key-Value-Pair col-No: Column }}\r\n\r\n        function _guid() {\r\n            function s4() {\r\n                return Math.floor((1 + Math.random()) * 0x10000)\r\n                    .toString(16)\r\n                    .substring(1);\r\n            }\r\n            return s4() + s4() + '-' + s4() + '-' + s4() + '-' +\r\n                s4() + '-' + s4() + s4() + s4();\r\n        }\r\n        /*\r\n         * Trys to detach the tree columns on massive dom manipulations\r\n         */\r\n        this._detachColumns = function(id) {\r\n            // if the columns are not detached, then detach them\r\n            if (this._domManipulation == null) {\r\n                var cols = this._gridSettings.columns || [],\r\n                    treecol = this._gridSettings.treecol,\r\n                    mw = this.midWrapper;\r\n                this._domManipulation = {\r\n                    id: id,\r\n                    columns: {}\r\n                };\r\n                for (var i = 0, len = cols.length; i < len; i++) {\r\n                    //if (treecol === i) {\r\n                    //  continue;\r\n                    //}\r\n                    this._domManipulation.columns[i] = mw.children(\".jstree-grid-column-\" + i)[0];\r\n                    this._domManipulation.columns[i].parentNode.removeChild(this._domManipulation.columns[i]);\r\n                }\r\n            }\r\n            return this._domManipulation;\r\n        }\r\n\r\n        this._reattachColumns = function(id) {\r\n            if (this._domManipulation == null) {\r\n                return false;\r\n            }\r\n            if (this._domManipulation.id === id) {\r\n                var cols = this._gridSettings.columns || [],\r\n                    treecol = this._gridSettings.treecol,\r\n                    mw = this.midWrapper;\r\n                for (var i = 0, len = cols.length; i < len; i++) {\r\n                    //if (treecol === i) {\r\n                    //  continue;\r\n                    //}\r\n                    mw[0].appendChild(this._domManipulation.columns[i]);\r\n                }\r\n                this._domManipulation = null;\r\n            }\r\n            return true;\r\n        }\r\n\r\n        /*\r\n         * Override open_node to detach the columns before redrawing child-nodes, and do reattach them afterwarts\r\n         */\r\n        this.open_node = function(obj, callback, animation) {\r\n            var isArray = $.isArray(obj);\r\n            var node = null;\r\n            if (!isArray) {\r\n                node = this.get_node(obj);\r\n                if (node.id === \"#\") {\r\n                    return;\r\n                } // wtf??? we ar in the root and do not need a open!\r\n            }\r\n            var id = isArray ? _guid() : node.id;\r\n            this._detachColumns(id);\r\n            var ret = parent.open_node.call(this, obj, callback, animation);\r\n            this._reattachColumns(id);\r\n            return ret;\r\n        }\r\n\r\n        /*\r\n         * Override redraw_node to correctly insert the grid\r\n         */\r\n        this.redraw_node = function(obj, deep, is_callback, force_render) {\r\n            var id = $.isArray(obj) ? _guid() : this.get_node(obj).id;\r\n            // we detach the columns once\r\n            this._detachColumns(id);\r\n            // first allow the parent to redraw the node\r\n            obj = parent.redraw_node.call(this, obj, deep, is_callback, force_render);\r\n            // next prepare the grid for a redrawn node - but only if ths node is not hidden (search does that)\r\n            if (obj) {\r\n                this._prepare_grid(obj);\r\n            }\r\n            // don't forget to reattach\r\n            this._reattachColumns(id);\r\n            return obj;\r\n        };\r\n        this.refresh = function() {\r\n            this._clean_grid();\r\n            return parent.refresh.apply(this, arguments);\r\n        };\r\n        /*\r\n         * Override set_id to update cell attributes\r\n         */\r\n        this.set_id = function(obj, id) {\r\n            var old, uniq = this.uniq;\r\n            if (obj) {\r\n                old = obj.id;\r\n            }\r\n            var result = parent.set_id.apply(this, arguments);\r\n            if (result) {\r\n                if (old !== undefined) {\r\n                    var grid = this.gridWrapper,\r\n                        oldNodes = [old],\r\n                        i;\r\n                    // get children\r\n                    if (obj && obj.children_d) {\r\n                        oldNodes = oldNodes.concat(obj.children_d);\r\n                    }\r\n                    // update id in children\r\n                    findDataCell(uniq, oldNodes, this._gridSettings.gridcols)\r\n                        .attr(NODE_DATA_ATTR, obj.id)\r\n                        .removeClass(generateCellId(uniq, old))\r\n                        .addClass(generateCellId(uniq, obj.id))\r\n                        .each(function(i, node) {\r\n                            $(node).attr('id', generateCellId(uniq, obj.id) + (i + 1));\r\n                        });\r\n                }\r\n            }\r\n            return result;\r\n        };\r\n\r\n        this._hideOrShowTree = function(node, hide) {\r\n            //Hides or shows a tree\r\n            this._detachColumns(node.id);\r\n            // show cells in each detachted column\r\n            this._hideOrShowNode(node, hide, this._gridSettings.columns || [], this._gridSettings.treecol);\r\n            this._reattachColumns(node.id);\r\n        }\r\n        this._hideOrShowNode = function(node, hide, cols, treecol) {\r\n            //Hides or shows a node with recursive calls to all open child-nodes\r\n            for (var i = 0, len = cols.length; i < len; i++) {\r\n                if (i === treecol) {\r\n                    continue;\r\n                }\r\n                var cells = findDataCell(this.uniq, node.id, i, $(this._domManipulation.columns[i]));\r\n                if (hide) {\r\n                    cells.addClass(\"jstree-grid-hidden\");\r\n                } else {\r\n                    cells.removeClass(\"jstree-grid-hidden\");\r\n                }\r\n            }\r\n            if (node.state.opened && node.children) {\r\n                for (var i = 0, len = node.children.length; i < len; i++) {\r\n                    this._hideOrShowNode(this.get_node(node.children[i]), hide, cols, treecol);\r\n                }\r\n            }\r\n        }\r\n        this._hide_grid = function(node) {\r\n            if (!node) {\r\n                return true;\r\n            }\r\n            this._detachColumns(node.id);\r\n            var children = node.children ? node.children : [],\r\n                cols = this._gridSettings.columns || [],\r\n                treecol = this._gridSettings.treecol;\r\n            // try to remove all children\r\n            for (var i = 0, len = children.length; i < len; i++) {\r\n                var child = this.get_node(children[i]);\r\n                // go through each column, remove all children with the correct ID name\r\n                for (var j = 0, lenj = cols.length; j < lenj; j++) {\r\n                    if (j === treecol) {\r\n                        continue;\r\n                    }\r\n                    findDataCell(this.uniq, child.id, j, $(this._domManipulation.columns[j])).remove();\r\n                }\r\n                if (child.state.opened) {\r\n                    this._hide_grid(child);\r\n                }\r\n            }\r\n\r\n\r\n            this._reattachColumns(node.id);\r\n        };\r\n        this.holdingCells = {};\r\n        this.getHoldingCells = function(obj, col, hc) {\r\n            if (obj.state.hidden || !obj.state.opened) {\r\n                return $();\r\n            }\r\n            var ret = $(),\r\n                children = obj.children || [],\r\n                child, i, uniq = this.uniq;\r\n            // run through each child, render it, and then render its children recursively\r\n            for (i = 0; i < children.length; i++) {\r\n                child = generateCellId(uniq, children[i]) + col;\r\n                if (hc[child]) {\r\n                    ret = ret.add(hc[child]).add(this.getHoldingCells(this.get_node(children[i]), col, hc));\r\n                    //delete hc[child];\r\n                }\r\n            }\r\n            return (ret);\r\n        };\r\n\r\n        /**\r\n         * put a grid cell in edit mode (input field to edit the data)\r\n         * @name edit(obj, col)\r\n         * @param  {mixed} obj\r\n         * @param  {obj} col definition\r\n         * @param  {element} cell element, either span or wrapping div\r\n         */\r\n        this._edit = function(obj, col, element) {\r\n            if (!obj) {\r\n                return false;\r\n            }\r\n            if (!obj.data) {\r\n                obj.data = {};\r\n            }\r\n            if (element) {\r\n                element = $(element);\r\n                if (element.prop(\"tagName\").toLowerCase() === \"div\") {\r\n                    element = element.children(\"span:first\");\r\n                }\r\n            } else {\r\n                // need to find the element - later\r\n                return false;\r\n            }\r\n            var rtl = this._data.core.rtl,\r\n                w = this.element.width(),\r\n                t = obj.data[col.value],\r\n                h1 = $(\"<\" + \"div />\", {\r\n                    css: {\r\n                        \"position\": \"absolute\",\r\n                        \"top\": \"-200px\",\r\n                        \"left\": (rtl ? \"0px\" : \"-1000px\"),\r\n                        \"visibility\": \"hidden\"\r\n                    }\r\n                }).appendTo(\"body\"),\r\n                h2 = $(\"<\" + \"input />\", {\r\n                    \"value\": t,\r\n                    \"class\": \"jstree-rename-input\",\r\n                    \"css\": {\r\n                        \"padding\": \"0\",\r\n                        \"border\": \"1px solid silver\",\r\n                        \"box-sizing\": \"border-box\",\r\n                        \"display\": \"inline-block\",\r\n                        \"height\": (this._data.core.li_height) + \"px\",\r\n                        \"lineHeight\": (this._data.core.li_height) + \"px\",\r\n                        \"width\": \"150px\" // will be set a bit further down\r\n                    },\r\n                    \"blur\": $.proxy(function() {\r\n                        var v = h2.val();\r\n                        // save the value if changed\r\n                        if (v === \"\" || v === t) {\r\n                            v = t;\r\n                        } else {\r\n                            obj.data[col.value] = v;\r\n                            this.element.trigger('update_cell.jstree-grid', {\r\n                                node: obj,\r\n                                col: col.value,\r\n                                value: v,\r\n                                old: t\r\n                            });\r\n                            var id = _guid();\r\n                            this._detachColumns(id);\r\n                            this._prepare_grid(this.get_node(obj, true));\r\n                            this._reattachColumns(id);\r\n                        }\r\n                        h2.remove();\r\n                        element.show();\r\n                    }, this),\r\n                    \"keydown\": function(event) {\r\n                        var key = event.which;\r\n                        if (key === 27) {\r\n                            this.value = t;\r\n                        }\r\n                        if (key === 27 || key === 13 || key === 37 || key === 38 || key === 39 || key === 40 || key === 32) {\r\n                            event.stopImmediatePropagation();\r\n                        }\r\n                        if (key === 27 || key === 13) {\r\n                            event.preventDefault();\r\n                            this.blur();\r\n                        }\r\n                    },\r\n                    \"click\": function(e) {\r\n                        e.stopImmediatePropagation();\r\n                    },\r\n                    \"mousedown\": function(e) {\r\n                        e.stopImmediatePropagation();\r\n                    },\r\n                    \"keyup\": function(event) {\r\n                        h2.width(Math.min(h1.text(\"pW\" + this.value).width(), w));\r\n                    },\r\n                    \"keypress\": function(event) {\r\n                        if (event.which === 13) {\r\n                            return false;\r\n                        }\r\n                    }\r\n                }),\r\n                fn = {\r\n                    fontFamily: element.css('fontFamily') || '',\r\n                    fontSize: element.css('fontSize') || '',\r\n                    fontWeight: element.css('fontWeight') || '',\r\n                    fontStyle: element.css('fontStyle') || '',\r\n                    fontStretch: element.css('fontStretch') || '',\r\n                    fontVariant: element.css('fontVariant') || '',\r\n                    letterSpacing: element.css('letterSpacing') || '',\r\n                    wordSpacing: element.css('wordSpacing') || ''\r\n                };\r\n            element.hide();\r\n            element.parent().append(h2);\r\n            h2.css(fn).width(Math.min(h1.text(\"pW\" + h2[0].value).width(), w))[0].select();\r\n        };\r\n\r\n        this.grid_hide_column = function(col) {\r\n            this.midWrapper.find(\".jstree-grid-column-\" + col).hide();\r\n        };\r\n        this.grid_show_column = function(col) {\r\n            this.midWrapper.find(\".jstree-grid-column-\" + col).show();\r\n        };\r\n\r\n        this._prepare_grid = function(obj) {\r\n            var gs = this._gridSettings,\r\n                c = gs.treeClass,\r\n                _this = this,\r\n                t,\r\n                cols = gs.columns || [],\r\n                width, tr = gs.isThemeroller,\r\n                uniq = this.uniq,\r\n                treecol = gs.treecol,\r\n                tree = this.element,\r\n                rootid = this.rootid,\r\n                classAdd = (tr ? \"themeroller\" : \"regular\"),\r\n                img, objData = this.get_node(obj),\r\n                defaultWidth = gs.columnWidth,\r\n                conf = gs.defaultConf,\r\n                cellClickHandler = function(tree, node, val, col, t) {\r\n                    return function(e) {\r\n                        //node = tree.find(\"#\"+node.attr(\"id\"));\r\n                        var event = eventer.create(\"select_cell.jstree-grid\");\r\n                        tree.trigger(event, [{\r\n                            value: val,\r\n                            column: col.header,\r\n                            node: node,\r\n                            grid: $(this),\r\n                            sourceName: col.value\r\n                        }]);\r\n                        if (!event.isDefaultPrevented()) {\r\n                            node.children(\".jstree-anchor\").trigger(\"click.jstree\", e);\r\n                        }\r\n                    };\r\n                },\r\n                cellRightClickHandler = function(tree, node, val, col, t) {\r\n                    return function(e) {\r\n                        if (gs.gridcontextmenu) {\r\n                            e.preventDefault();\r\n                            menu.popup(this, {\r\n                                'x': e.pageX,\r\n                                'y': e.pageY\r\n                            }, gs.gridcontextmenu(_this, tree, node, val, col, t, e.target));\r\n                        }\r\n                    };\r\n                },\r\n                hoverInHandler = function(node, jsTreeInstance) {\r\n                    return function() {\r\n                        jsTreeInstance.hover_node(node);\r\n                    };\r\n                },\r\n                hoverOutHandler = function(node, jsTreeInstance) {\r\n                    return function() {\r\n                        jsTreeInstance.dehover_node(node);\r\n                    };\r\n                },\r\n                i, val, cl, wcl, ccl, a, last, valClass, wideValClass, span, paddingleft, title, gridCellName, gridCellParentId, gridCellParent,\r\n                gridCellPrev, gridCellPrevId, gridCellNext, gridCellNextId, gridCellChild, gridCellChildId,\r\n                col, content, tmpWidth, mw = this.midWrapper,\r\n                column, lid = objData.id,\r\n                highlightSearch, isClicked,\r\n                peers = this.get_node(objData.parent).children,\r\n                // find my position in the list of peers. \"peers\" is the list of everyone at my level under my parent, in order\r\n                pos = $.inArray(lid, peers),\r\n                hc = this.holdingCells,\r\n                rendered = false,\r\n                closed;\r\n            // get our column definition\r\n            t = $(obj);\r\n\r\n            // find the a children\r\n            a = t.children(\"[class~='jstree-anchor']\");\r\n            highlightSearch = a.hasClass(SEARCHCLASS);\r\n            isClicked = a.hasClass(\"jstree-clicked\");\r\n\r\n            if (a.length === 1) {\r\n                closed = !objData.state.opened;\r\n                gridCellName = generateCellId(uniq, lid);\r\n                gridCellParentId = objData.parent === \"#\" ? null : objData.parent;\r\n                a.addClass(c);\r\n                //renderAWidth(a,_this);\r\n                renderATitle(a, t, _this);\r\n                last = a;\r\n\r\n                // calculate position ids once\r\n                gridCellPrevId = pos <= 0 ? objData.parent : findLastClosedNode(this, peers[pos - 1]);\r\n                gridCellNextId = pos >= peers.length - 1 ? \"NULL\" : peers[pos + 1];\r\n                gridCellChildId = objData.children && objData.children.length > 0 ? objData.children[0] : \"NULL\";\r\n\r\n                // find which column our tree shuld go in\r\n                var s = this.settings.grid;\r\n                for (var i = 0, len = cols.length; i < len; i++) {\r\n                    if (treecol === i) {\r\n                        continue;\r\n                    }\r\n                    col = cols[i];\r\n                    column = this._domManipulation == null ? mw.children(\"div:eq(\" + i + \")\") : $(this._domManipulation.columns[i]); //Geht the detached column not mw.children(\"div:eq(\"+i+\")\");\r\n                    // get the cellClass, the wideCellClass, and the columnClass\r\n                    cl = col.cellClass || \"\";\r\n                    wcl = col.wideCellClass || \"\";\r\n                    ccl = col.columnClass || \"\";\r\n\r\n                    // add a column class to the Column\r\n                    column.addClass(ccl);\r\n\r\n\r\n                    // get the contents of the cell - value could be a string or a function\r\n                    val = getCellData(col.value, objData);\r\n\r\n                    if (typeof(col.format) === \"function\") {\r\n                        val = col.format(val);\r\n                    }\r\n\r\n                    // put images instead of text if needed\r\n                    if (col.images) {\r\n                        img = col.images[val] || col.images[\"default\"];\r\n                        if (img) {\r\n                            content = img[0] === \"*\" ? '<span class=\"' + img.substr(1) + '\"></span>' : '<img src=\"' + img + '\">';\r\n                        }\r\n                    } else {\r\n                        content = val;\r\n                    }\r\n\r\n                    // content cannot be blank, or it messes up heights\r\n                    if (content === undefined || content === null || BLANKRE.test(content)) {\r\n                        content = \"&nbsp;\";\r\n                    }\r\n\r\n                    // get the valueClass\r\n                    valClass = col.valueClass && objData.data !== null && objData.data !== undefined ? objData.data[col.valueClass] || \"\" : \"\";\r\n                    if (valClass && col.valueClassPrefix && col.valueClassPrefix !== \"\") {\r\n                        valClass = col.valueClassPrefix + valClass;\r\n                    }\r\n                    // get the wideValueClass\r\n                    wideValClass = col.wideValueClass && objData.data !== null && objData.data !== undefined ? objData.data[col.wideValueClass] || \"\" : \"\";\r\n                    if (wideValClass && col.wideValueClassPrefix && col.wideValueClassPrefix !== \"\") {\r\n                        wideValClass = col.wideValueClassPrefix + wideValClass;\r\n                    }\r\n                    // get the title\r\n                    title = col.title && objData.data !== null && objData.data !== undefined ? objData.data[col.title] || \"\" : \"\";\r\n                    // strip out HTML\r\n                    title = title.replace(htmlstripre, '');\r\n\r\n                    // get the width\r\n                    paddingleft = 7;\r\n                    width = col.width || defaultWidth;\r\n                    if (width !== 'auto') {\r\n                        width = tmpWidth || (width - paddingleft);\r\n                    }\r\n\r\n                    last = findDataCell(uniq, lid, i, column);\r\n                    if (!last || last.length < 1) {\r\n                        last = $(\"<div></div>\");\r\n                        $(\"<span></span>\").appendTo(last);\r\n                        last.attr(\"id\", gridCellName + i);\r\n                        last.addClass(gridCellName);\r\n                        last.attr(NODE_DATA_ATTR, lid);\r\n                        if (highlightSearch) {\r\n                            last.addClass(SEARCHCLASS);\r\n                        } else {\r\n                            last.removeClass(SEARCHCLASS);\r\n                        }\r\n                        if (isClicked) {\r\n                            last.addClass(\"jstree-clicked\");\r\n                        } else {\r\n                            last.removeClass(\"jstree-clicked\");\r\n                        }\r\n                        if (this.settings.core.themes.ellipsis === true && i !== treecol) {\r\n                            last.addClass('jstree-grid-ellipsis');\r\n                        }\r\n\r\n                    }\r\n\r\n                    // we need to check the hidden-state and see if we need to hide the node\r\n                    if (objData.state.hidden) {\r\n                        last.addClass(\"jstree-grid-hidden\");\r\n                    } else {\r\n                        last.removeClass(\"jstree-grid-hidden\");\r\n                    }\r\n\r\n                    // we need to put it in the dataCell - after the parent, but the position matters\r\n                    // if we have no parent, then we are one of the root nodes, but still need to look at peers\r\n\r\n\r\n                    // if we are first, i.e. pos === 0, we go right after the parent;\r\n                    // if we are not first, and our previous peer (one before us) is closed, we go right after the previous peer cell\r\n                    // if we are not first, and our previous peer is opened, then we have to find its youngest & lowest closed child (incl. leaf)\r\n                    //\r\n                    // probably be much easier to go *before* our next one\r\n                    // but that one might not be drawn yet\r\n                    // here is the logic for jstree drawing:\r\n                    //   it draws peers from first to last or from last to first\r\n                    //   it draws children before a parent\r\n                    //\r\n                    // so I can rely on my *parent* not being drawn, but I cannot rely on my previous peer or my next peer being drawn\r\n\r\n                    // so we do the following:\r\n                    //   1- We are the first child: install after the parent\r\n                    //   2- Our previous peer is already drawn: install after the previous peer\r\n                    //   3- Our previous peer is not drawn, we have a child that is drawn: install right before our first child\r\n                    //   4- Our previous peer is not drawn, we have no child that is drawn, our next peer is drawn: install right before our next peer\r\n                    //   5- Our previous peer is not drawn, we have no child that is drawn, our next peer is not drawn: install right after parent\r\n                    gridCellPrev = findDataCell(uniq, gridCellPrevId, i, column);\r\n                    gridCellNext = findDataCell(uniq, gridCellNextId, i, column);\r\n                    gridCellChild = findDataCell(uniq, gridCellChildId, i, column);\r\n                    gridCellParent = findDataCell(uniq, gridCellParentId, i, column);\r\n\r\n\r\n                    // if our parent is already drawn, then we put this in the right order under our parent\r\n                    if (gridCellParentId) {\r\n                        if (gridCellParent && gridCellParent.length > 0) {\r\n                            if (gridCellPrev && gridCellPrev.length > 0) {\r\n                                last.insertAfter(gridCellPrev);\r\n                            } else if (gridCellChild && gridCellChild.length > 0) {\r\n                                last.insertBefore(gridCellChild);\r\n                            } else if (gridCellNext && gridCellNext.length > 0) {\r\n                                last.insertBefore(gridCellNext);\r\n                            } else {\r\n                                last.insertAfter(gridCellParent);\r\n                            }\r\n                            rendered = true;\r\n                        } else {\r\n                            rendered = false;\r\n                        }\r\n                        // always put it in the holding cells, and then sort when the parent comes in, in case parent is (re)drawn later\r\n                        hc[gridCellName + i] = last;\r\n                    } else {\r\n                        if (gridCellPrev && gridCellPrev.length > 0) {\r\n                            last.insertAfter(gridCellPrev);\r\n                        } else if (gridCellChild && gridCellChild.length > 0) {\r\n                            last.insertBefore(gridCellChild);\r\n                        } else if (gridCellNext && gridCellNext.length > 0) {\r\n                            last.insertBefore(gridCellNext);\r\n                        } else {\r\n                            last.appendTo(column);\r\n                        }\r\n                        rendered = true;\r\n                    }\r\n                    // do we have any children waiting for this cell? walk down through the children/grandchildren/etc tree\r\n                    if (rendered) {\r\n                        var toRen = this.getHoldingCells(objData, i, hc);\r\n                        last.after(toRen);\r\n                    }\r\n                    // need to make the height of this match the line height of the tree. How?\r\n                    span = last.children(\"span\");\r\n\r\n                    // create a span inside the div, so we can control what happens in the whole div versus inside just the text/background\r\n                    span.addClass(cl + \" \" + valClass).html(content);\r\n                    last = last.css(conf).addClass(\"jstree-grid-cell jstree-grid-cell-regular jstree-grid-cell-root-\" + rootid + \" jstree-grid-cell-\" + classAdd + \" \" + wcl + \" \" + wideValClass + (tr ? \" ui-state-default\" : \"\")).addClass(\"jstree-grid-col-\" + i).addClass(\"jstree-animated\");\r\n                    // add click handler for clicking inside a grid cell\r\n                    last.click(cellClickHandler(tree, t, val, col, this));\r\n                    last.on(\"contextmenu\", cellRightClickHandler(tree, t, val, col, this));\r\n                    last.hover(hoverInHandler(t, this), hoverOutHandler(t, this));\r\n\r\n                    if (title) {\r\n                        span.attr(\"title\", title);\r\n                    }\r\n\r\n                    tree.trigger(\"render_cell.jstree-grid\", [{\r\n                        value: val,\r\n                        column: col.header,\r\n                        node: t,\r\n                        sourceName: col.value\r\n                    }]);\r\n                }\r\n                last.addClass(\"jstree-grid-cell-last\" + (tr ? \" ui-state-default\" : \"\"));\r\n                // if there is no width given for the last column, do it via automatic\r\n                if (cols[cols.length - 1].width === undefined) {\r\n                    last.addClass(\"jstree-grid-width-auto\").next(\".jstree-grid-separator\").remove();\r\n                }\r\n            }\r\n            this.element.css({\r\n                'overflow-y': 'auto !important'\r\n            });\r\n        };\r\n        // clean up holding cells\r\n        this.holdingCells = {};\r\n\r\n        // need to do alternating background colors or borders\r\n    };\r\n\r\n    return $;\r\n});\ndefine('skylark-jstree/plugin/types',[\r\n  \"skylark-langx/langx\",\r\n  \"skylark-utils-dom/browser\",\r\n  \"skylark-utils-dom/eventer\",\r\n  \"skylark-utils-dom/noder\",\r\n  \"skylark-utils-dom/geom\",\r\n  \"skylark-utils-dom/query\",\r\n  \"../tree\"\r\n],function(langx,browser,eventer,noder,geom,$,jstree){\r\n\t\"use strict\";\r\n\r\n\tif($.jstree.plugins.types) { return; }\r\n\r\n\t/**\r\n\t * An object storing all types as key value pairs, where the key is the type name and the value is an object that could contain following keys (all optional).\r\n\t *\r\n\t * * `max_children` the maximum number of immediate children this node type can have. Do not specify or set to `-1` for unlimited.\r\n\t * * `max_depth` the maximum number of nesting this node type can have. A value of `1` would mean that the node can have children, but no grandchildren. Do not specify or set to `-1` for unlimited.\r\n\t * * `valid_children` an array of node type strings, that nodes of this type can have as children. Do not specify or set to `-1` for no limits.\r\n\t * * `icon` a string - can be a path to an icon or a className, if using an image that is in the current directory use a `./` prefix, otherwise it will be detected as a class. Omit to use the default icon from your theme.\r\n\t * * `li_attr` an object of values which will be used to add HTML attributes on the resulting LI DOM node (merged with the node's own data)\r\n\t * * `a_attr` an object of values which will be used to add HTML attributes on the resulting A DOM node (merged with the node's own data)\r\n\t *\r\n\t * There are two predefined types:\r\n\t *\r\n\t * * `#` represents the root of the tree, for example `max_children` would control the maximum number of root nodes.\r\n\t * * `default` represents the default node - any settings here will be applied to all nodes that do not have a type specified.\r\n\t *\r\n\t * @name $.jstree.defaults.types\r\n\t * @plugin types\r\n\t */\r\n\t$.jstree.defaults.types = {\r\n\t\t'default' : {}\r\n\t};\r\n\t$.jstree.defaults.types[$.jstree.root] = {};\r\n\r\n\t$.jstree.plugins.types = function (options, parent) {\r\n\t\tthis.init = function (el, options) {\r\n\t\t\tvar i, j;\r\n\t\t\tif(options && options.types && options.types['default']) {\r\n\t\t\t\tfor(i in options.types) {\r\n\t\t\t\t\tif(i !== \"default\" && i !== $.jstree.root && options.types.hasOwnProperty(i)) {\r\n\t\t\t\t\t\tfor(j in options.types['default']) {\r\n\t\t\t\t\t\t\tif(options.types['default'].hasOwnProperty(j) && options.types[i][j] === undefined) {\r\n\t\t\t\t\t\t\t\toptions.types[i][j] = options.types['default'][j];\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tparent.init.call(this, el, options);\r\n\t\t\tthis._model.data[$.jstree.root].type = $.jstree.root;\r\n\t\t};\r\n\t\tthis.refresh = function (skip_loading, forget_state) {\r\n\t\t\tparent.refresh.call(this, skip_loading, forget_state);\r\n\t\t\tthis._model.data[$.jstree.root].type = $.jstree.root;\r\n\t\t};\r\n\t\tthis.bind = function () {\r\n\t\t\tthis.element\r\n\t\t\t\t.on('model.jstree', $.proxy(function (e, data) {\r\n\t\t\t\t\t\tvar m = this._model.data,\r\n\t\t\t\t\t\t\tdpc = data.nodes,\r\n\t\t\t\t\t\t\tt = this.settings.types,\r\n\t\t\t\t\t\t\ti, j, c = 'default', k;\r\n\t\t\t\t\t\tfor(i = 0, j = dpc.length; i < j; i++) {\r\n\t\t\t\t\t\t\tc = 'default';\r\n\t\t\t\t\t\t\tif(m[dpc[i]].original && m[dpc[i]].original.type && t[m[dpc[i]].original.type]) {\r\n\t\t\t\t\t\t\t\tc = m[dpc[i]].original.type;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif(m[dpc[i]].data && m[dpc[i]].data.jstree && m[dpc[i]].data.jstree.type && t[m[dpc[i]].data.jstree.type]) {\r\n\t\t\t\t\t\t\t\tc = m[dpc[i]].data.jstree.type;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tm[dpc[i]].type = c;\r\n\t\t\t\t\t\t\tif(m[dpc[i]].icon === true && t[c].icon !== undefined) {\r\n\t\t\t\t\t\t\t\tm[dpc[i]].icon = t[c].icon;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif(t[c].li_attr !== undefined && typeof t[c].li_attr === 'object') {\r\n\t\t\t\t\t\t\t\tfor (k in t[c].li_attr) {\r\n\t\t\t\t\t\t\t\t\tif (t[c].li_attr.hasOwnProperty(k)) {\r\n\t\t\t\t\t\t\t\t\t\tif (k === 'id') {\r\n\t\t\t\t\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\telse if (m[dpc[i]].li_attr[k] === undefined) {\r\n\t\t\t\t\t\t\t\t\t\t\tm[dpc[i]].li_attr[k] = t[c].li_attr[k];\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\telse if (k === 'class') {\r\n\t\t\t\t\t\t\t\t\t\t\tm[dpc[i]].li_attr['class'] = t[c].li_attr['class'] + ' ' + m[dpc[i]].li_attr['class'];\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif(t[c].a_attr !== undefined && typeof t[c].a_attr === 'object') {\r\n\t\t\t\t\t\t\t\tfor (k in t[c].a_attr) {\r\n\t\t\t\t\t\t\t\t\tif (t[c].a_attr.hasOwnProperty(k)) {\r\n\t\t\t\t\t\t\t\t\t\tif (k === 'id') {\r\n\t\t\t\t\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\telse if (m[dpc[i]].a_attr[k] === undefined) {\r\n\t\t\t\t\t\t\t\t\t\t\tm[dpc[i]].a_attr[k] = t[c].a_attr[k];\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\telse if (k === 'href' && m[dpc[i]].a_attr[k] === '#') {\r\n\t\t\t\t\t\t\t\t\t\t\tm[dpc[i]].a_attr['href'] = t[c].a_attr['href'];\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\telse if (k === 'class') {\r\n\t\t\t\t\t\t\t\t\t\t\tm[dpc[i]].a_attr['class'] = t[c].a_attr['class'] + ' ' + m[dpc[i]].a_attr['class'];\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tm[$.jstree.root].type = $.jstree.root;\r\n\t\t\t\t\t}, this));\r\n\t\t\tparent.bind.call(this);\r\n\t\t};\r\n\t\tthis.get_json = function (obj, options, flat) {\r\n\t\t\tvar i, j,\r\n\t\t\t\tm = this._model.data,\r\n\t\t\t\topt = options ? $.extend(true, {}, options, {no_id:false}) : {},\r\n\t\t\t\ttmp = parent.get_json.call(this, obj, opt, flat);\r\n\t\t\tif(tmp === false) { return false; }\r\n\t\t\tif($.isArray(tmp)) {\r\n\t\t\t\tfor(i = 0, j = tmp.length; i < j; i++) {\r\n\t\t\t\t\ttmp[i].type = tmp[i].id && m[tmp[i].id] && m[tmp[i].id].type ? m[tmp[i].id].type : \"default\";\r\n\t\t\t\t\tif(options && options.no_id) {\r\n\t\t\t\t\t\tdelete tmp[i].id;\r\n\t\t\t\t\t\tif(tmp[i].li_attr && tmp[i].li_attr.id) {\r\n\t\t\t\t\t\t\tdelete tmp[i].li_attr.id;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif(tmp[i].a_attr && tmp[i].a_attr.id) {\r\n\t\t\t\t\t\t\tdelete tmp[i].a_attr.id;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\ttmp.type = tmp.id && m[tmp.id] && m[tmp.id].type ? m[tmp.id].type : \"default\";\r\n\t\t\t\tif(options && options.no_id) {\r\n\t\t\t\t\ttmp = this._delete_ids(tmp);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn tmp;\r\n\t\t};\r\n\t\tthis._delete_ids = function (tmp) {\r\n\t\t\tif($.isArray(tmp)) {\r\n\t\t\t\tfor(var i = 0, j = tmp.length; i < j; i++) {\r\n\t\t\t\t\ttmp[i] = this._delete_ids(tmp[i]);\r\n\t\t\t\t}\r\n\t\t\t\treturn tmp;\r\n\t\t\t}\r\n\t\t\tdelete tmp.id;\r\n\t\t\tif(tmp.li_attr && tmp.li_attr.id) {\r\n\t\t\t\tdelete tmp.li_attr.id;\r\n\t\t\t}\r\n\t\t\tif(tmp.a_attr && tmp.a_attr.id) {\r\n\t\t\t\tdelete tmp.a_attr.id;\r\n\t\t\t}\r\n\t\t\tif(tmp.children && $.isArray(tmp.children)) {\r\n\t\t\t\ttmp.children = this._delete_ids(tmp.children);\r\n\t\t\t}\r\n\t\t\treturn tmp;\r\n\t\t};\r\n\t\tthis.check = function (chk, obj, par, pos, more) {\r\n\t\t\tif(parent.check.call(this, chk, obj, par, pos, more) === false) { return false; }\r\n\t\t\tobj = obj && obj.id ? obj : this.get_node(obj);\r\n\t\t\tpar = par && par.id ? par : this.get_node(par);\r\n\t\t\tvar m = obj && obj.id ? (more && more.origin ? more.origin : $.jstree.reference(obj.id)) : null, tmp, d, i, j;\r\n\t\t\tm = m && m._model && m._model.data ? m._model.data : null;\r\n\t\t\tswitch(chk) {\r\n\t\t\t\tcase \"create_node\":\r\n\t\t\t\tcase \"move_node\":\r\n\t\t\t\tcase \"copy_node\":\r\n\t\t\t\t\tif(chk !== 'move_node' || $.inArray(obj.id, par.children) === -1) {\r\n\t\t\t\t\t\ttmp = this.get_rules(par);\r\n\t\t\t\t\t\tif(tmp.max_children !== undefined && tmp.max_children !== -1 && tmp.max_children === par.children.length) {\r\n\t\t\t\t\t\t\tthis._data.core.last_error = { 'error' : 'check', 'plugin' : 'types', 'id' : 'types_01', 'reason' : 'max_children prevents function: ' + chk, 'data' : JSON.stringify({ 'chk' : chk, 'pos' : pos, 'obj' : obj && obj.id ? obj.id : false, 'par' : par && par.id ? par.id : false }) };\r\n\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif(tmp.valid_children !== undefined && tmp.valid_children !== -1 && $.inArray((obj.type || 'default'), tmp.valid_children) === -1) {\r\n\t\t\t\t\t\t\tthis._data.core.last_error = { 'error' : 'check', 'plugin' : 'types', 'id' : 'types_02', 'reason' : 'valid_children prevents function: ' + chk, 'data' : JSON.stringify({ 'chk' : chk, 'pos' : pos, 'obj' : obj && obj.id ? obj.id : false, 'par' : par && par.id ? par.id : false }) };\r\n\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif(m && obj.children_d && obj.parents) {\r\n\t\t\t\t\t\t\td = 0;\r\n\t\t\t\t\t\t\tfor(i = 0, j = obj.children_d.length; i < j; i++) {\r\n\t\t\t\t\t\t\t\td = Math.max(d, m[obj.children_d[i]].parents.length);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\td = d - obj.parents.length + 1;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif(d <= 0 || d === undefined) { d = 1; }\r\n\t\t\t\t\t\tdo {\r\n\t\t\t\t\t\t\tif(tmp.max_depth !== undefined && tmp.max_depth !== -1 && tmp.max_depth < d) {\r\n\t\t\t\t\t\t\t\tthis._data.core.last_error = { 'error' : 'check', 'plugin' : 'types', 'id' : 'types_03', 'reason' : 'max_depth prevents function: ' + chk, 'data' : JSON.stringify({ 'chk' : chk, 'pos' : pos, 'obj' : obj && obj.id ? obj.id : false, 'par' : par && par.id ? par.id : false }) };\r\n\t\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tpar = this.get_node(par.parent);\r\n\t\t\t\t\t\t\ttmp = this.get_rules(par);\r\n\t\t\t\t\t\t\td++;\r\n\t\t\t\t\t\t} while(par);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t};\r\n\t\t/**\r\n\t\t * used to retrieve the type settings object for a node\r\n\t\t * @name get_rules(obj)\r\n\t\t * @param {mixed} obj the node to find the rules for\r\n\t\t * @return {Object}\r\n\t\t * @plugin types\r\n\t\t */\r\n\t\tthis.get_rules = function (obj) {\r\n\t\t\tobj = this.get_node(obj);\r\n\t\t\tif(!obj) { return false; }\r\n\t\t\tvar tmp = this.get_type(obj, true);\r\n\t\t\tif(tmp.max_depth === undefined) { tmp.max_depth = -1; }\r\n\t\t\tif(tmp.max_children === undefined) { tmp.max_children = -1; }\r\n\t\t\tif(tmp.valid_children === undefined) { tmp.valid_children = -1; }\r\n\t\t\treturn tmp;\r\n\t\t};\r\n\t\t/**\r\n\t\t * used to retrieve the type string or settings object for a node\r\n\t\t * @name get_type(obj [, rules])\r\n\t\t * @param {mixed} obj the node to find the rules for\r\n\t\t * @param {Boolean} rules if set to `true` instead of a string the settings object will be returned\r\n\t\t * @return {String|Object}\r\n\t\t * @plugin types\r\n\t\t */\r\n\t\tthis.get_type = function (obj, rules) {\r\n\t\t\tobj = this.get_node(obj);\r\n\t\t\treturn (!obj) ? false : ( rules ? $.extend({ 'type' : obj.type }, this.settings.types[obj.type]) : obj.type);\r\n\t\t};\r\n\t\t/**\r\n\t\t * used to change a node's type\r\n\t\t * @name set_type(obj, type)\r\n\t\t * @param {mixed} obj the node to change\r\n\t\t * @param {String} type the new type\r\n\t\t * @plugin types\r\n\t\t */\r\n\t\tthis.set_type = function (obj, type) {\r\n\t\t\tvar m = this._model.data, t, t1, t2, old_type, old_icon, k, d, a;\r\n\t\t\tif($.isArray(obj)) {\r\n\t\t\t\tobj = obj.slice();\r\n\t\t\t\tfor(t1 = 0, t2 = obj.length; t1 < t2; t1++) {\r\n\t\t\t\t\tthis.set_type(obj[t1], type);\r\n\t\t\t\t}\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\tt = this.settings.types;\r\n\t\t\tobj = this.get_node(obj);\r\n\t\t\tif(!t[type] || !obj) { return false; }\r\n\t\t\td = this.get_node(obj, true);\r\n\t\t\tif (d && d.length) {\r\n\t\t\t\ta = d.children('.jstree-anchor');\r\n\t\t\t}\r\n\t\t\told_type = obj.type;\r\n\t\t\told_icon = this.get_icon(obj);\r\n\t\t\tobj.type = type;\r\n\t\t\tif(old_icon === true || !t[old_type] || (t[old_type].icon !== undefined && old_icon === t[old_type].icon)) {\r\n\t\t\t\tthis.set_icon(obj, t[type].icon !== undefined ? t[type].icon : true);\r\n\t\t\t}\r\n\r\n\t\t\t// remove old type props\r\n\t\t\tif(t[old_type] && t[old_type].li_attr !== undefined && typeof t[old_type].li_attr === 'object') {\r\n\t\t\t\tfor (k in t[old_type].li_attr) {\r\n\t\t\t\t\tif (t[old_type].li_attr.hasOwnProperty(k)) {\r\n\t\t\t\t\t\tif (k === 'id') {\r\n\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse if (k === 'class') {\r\n\t\t\t\t\t\t\tm[obj.id].li_attr['class'] = (m[obj.id].li_attr['class'] || '').replace(t[old_type].li_attr[k], '');\r\n\t\t\t\t\t\t\tif (d) { d.removeClass(t[old_type].li_attr[k]); }\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse if (m[obj.id].li_attr[k] === t[old_type].li_attr[k]) {\r\n\t\t\t\t\t\t\tm[obj.id].li_attr[k] = null;\r\n\t\t\t\t\t\t\tif (d) { d.removeAttr(k); }\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(t[old_type] && t[old_type].a_attr !== undefined && typeof t[old_type].a_attr === 'object') {\r\n\t\t\t\tfor (k in t[old_type].a_attr) {\r\n\t\t\t\t\tif (t[old_type].a_attr.hasOwnProperty(k)) {\r\n\t\t\t\t\t\tif (k === 'id') {\r\n\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse if (k === 'class') {\r\n\t\t\t\t\t\t\tm[obj.id].a_attr['class'] = (m[obj.id].a_attr['class'] || '').replace(t[old_type].a_attr[k], '');\r\n\t\t\t\t\t\t\tif (a) { a.removeClass(t[old_type].a_attr[k]); }\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse if (m[obj.id].a_attr[k] === t[old_type].a_attr[k]) {\r\n\t\t\t\t\t\t\tif (k === 'href') {\r\n\t\t\t\t\t\t\t\tm[obj.id].a_attr[k] = '#';\r\n\t\t\t\t\t\t\t\tif (a) { a.attr('href', '#'); }\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\tdelete m[obj.id].a_attr[k];\r\n\t\t\t\t\t\t\t\tif (a) { a.removeAttr(k); }\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// add new props\r\n\t\t\tif(t[type].li_attr !== undefined && typeof t[type].li_attr === 'object') {\r\n\t\t\t\tfor (k in t[type].li_attr) {\r\n\t\t\t\t\tif (t[type].li_attr.hasOwnProperty(k)) {\r\n\t\t\t\t\t\tif (k === 'id') {\r\n\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse if (m[obj.id].li_attr[k] === undefined) {\r\n\t\t\t\t\t\t\tm[obj.id].li_attr[k] = t[type].li_attr[k];\r\n\t\t\t\t\t\t\tif (d) {\r\n\t\t\t\t\t\t\t\tif (k === 'class') {\r\n\t\t\t\t\t\t\t\t\td.addClass(t[type].li_attr[k]);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\td.attr(k, t[type].li_attr[k]);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse if (k === 'class') {\r\n\t\t\t\t\t\t\tm[obj.id].li_attr['class'] = t[type].li_attr[k] + ' ' + m[obj.id].li_attr['class'];\r\n\t\t\t\t\t\t\tif (d) { d.addClass(t[type].li_attr[k]); }\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(t[type].a_attr !== undefined && typeof t[type].a_attr === 'object') {\r\n\t\t\t\tfor (k in t[type].a_attr) {\r\n\t\t\t\t\tif (t[type].a_attr.hasOwnProperty(k)) {\r\n\t\t\t\t\t\tif (k === 'id') {\r\n\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse if (m[obj.id].a_attr[k] === undefined) {\r\n\t\t\t\t\t\t\tm[obj.id].a_attr[k] = t[type].a_attr[k];\r\n\t\t\t\t\t\t\tif (a) {\r\n\t\t\t\t\t\t\t\tif (k === 'class') {\r\n\t\t\t\t\t\t\t\t\ta.addClass(t[type].a_attr[k]);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\t\t\ta.attr(k, t[type].a_attr[k]);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse if (k === 'href' && m[obj.id].a_attr[k] === '#') {\r\n\t\t\t\t\t\t\tm[obj.id].a_attr['href'] = t[type].a_attr['href'];\r\n\t\t\t\t\t\t\tif (a) { a.attr('href', t[type].a_attr['href']); }\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse if (k === 'class') {\r\n\t\t\t\t\t\t\tm[obj.id].a_attr['class'] = t[type].a_attr['class'] + ' ' + m[obj.id].a_attr['class'];\r\n\t\t\t\t\t\t\tif (a) { a.addClass(t[type].a_attr[k]); }\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\treturn true;\r\n\t\t};\r\n\t};\r\n\t// include the types plugin by default\r\n\t// $.jstree.defaults.plugins.push(\"types\");\r\n\treturn $;\r\n\t\r\n});\r\n\ndefine('skylark-jstree/plugin/unique',[\r\n  \"skylark-langx/langx\",\r\n  \"skylark-utils-dom/browser\",\r\n  \"skylark-utils-dom/eventer\",\r\n  \"skylark-utils-dom/noder\",\r\n  \"skylark-utils-dom/geom\",\r\n  \"skylark-utils-dom/query\",\r\n  \"../tree\"\r\n],function(langx,browser,eventer,noder,geom,$,jstree){\r\n\t\"use strict\";\r\n\r\n\tif($.jstree.plugins.unique) { return; }\r\n\r\n\t/**\r\n\t * stores all defaults for the unique plugin\r\n\t * @name $.jstree.defaults.unique\r\n\t * @plugin unique\r\n\t */\r\n\t$.jstree.defaults.unique = {\r\n\t\t/**\r\n\t\t * Indicates if the comparison should be case sensitive. Default is `false`.\r\n\t\t * @name $.jstree.defaults.unique.case_sensitive\r\n\t\t * @plugin unique\r\n\t\t */\r\n\t\tcase_sensitive : false,\r\n\t\t/**\r\n\t\t * Indicates if white space should be trimmed before the comparison. Default is `false`.\r\n\t\t * @name $.jstree.defaults.unique.trim_whitespace\r\n\t\t * @plugin unique\r\n\t\t */\r\n\t\ttrim_whitespace : false,\r\n\t\t/**\r\n\t\t * A callback executed in the instance's scope when a new node is created and the name is already taken, the two arguments are the conflicting name and the counter. The default will produce results like `New node (2)`.\r\n\t\t * @name $.jstree.defaults.unique.duplicate\r\n\t\t * @plugin unique\r\n\t\t */\r\n\t\tduplicate : function (name, counter) {\r\n\t\t\treturn name + ' (' + counter + ')';\r\n\t\t}\r\n\t};\r\n\r\n\t$.jstree.plugins.unique = function (options, parent) {\r\n\t\tthis.check = function (chk, obj, par, pos, more) {\r\n\t\t\tif(parent.check.call(this, chk, obj, par, pos, more) === false) { return false; }\r\n\t\t\tobj = obj && obj.id ? obj : this.get_node(obj);\r\n\t\t\tpar = par && par.id ? par : this.get_node(par);\r\n\t\t\tif(!par || !par.children) { return true; }\r\n\t\t\tvar n = chk === \"rename_node\" ? pos : obj.text,\r\n\t\t\t\tc = [],\r\n\t\t\t\ts = this.settings.unique.case_sensitive,\r\n\t\t\t\tw = this.settings.unique.trim_whitespace,\r\n\t\t\t\tm = this._model.data, i, j, t;\r\n\t\t\tfor(i = 0, j = par.children.length; i < j; i++) {\r\n\t\t\t\tt = m[par.children[i]].text;\r\n\t\t\t\tif (!s) {\r\n\t\t\t\t\tt = t.toLowerCase();\r\n\t\t\t\t}\r\n\t\t\t\tif (w) {\r\n\t\t\t\t\tt = t.replace(/^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g, '');\r\n\t\t\t\t}\r\n\t\t\t\tc.push(t);\r\n\t\t\t}\r\n\t\t\tif(!s) { n = n.toLowerCase(); }\r\n\t\t\tif (w) { n = n.replace(/^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g, ''); }\r\n\t\t\tswitch(chk) {\r\n\t\t\t\tcase \"delete_node\":\r\n\t\t\t\t\treturn true;\r\n\t\t\t\tcase \"rename_node\":\r\n\t\t\t\t\tt = obj.text || '';\r\n\t\t\t\t\tif (!s) {\r\n\t\t\t\t\t\tt = t.toLowerCase();\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (w) {\r\n\t\t\t\t\t\tt = t.replace(/^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g, '');\r\n\t\t\t\t\t}\r\n\t\t\t\t\ti = ($.inArray(n, c) === -1 || (obj.text && t === n));\r\n\t\t\t\t\tif(!i) {\r\n\t\t\t\t\t\tthis._data.core.last_error = { 'error' : 'check', 'plugin' : 'unique', 'id' : 'unique_01', 'reason' : 'Child with name ' + n + ' already exists. Preventing: ' + chk, 'data' : JSON.stringify({ 'chk' : chk, 'pos' : pos, 'obj' : obj && obj.id ? obj.id : false, 'par' : par && par.id ? par.id : false }) };\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn i;\r\n\t\t\t\tcase \"create_node\":\r\n\t\t\t\t\ti = ($.inArray(n, c) === -1);\r\n\t\t\t\t\tif(!i) {\r\n\t\t\t\t\t\tthis._data.core.last_error = { 'error' : 'check', 'plugin' : 'unique', 'id' : 'unique_04', 'reason' : 'Child with name ' + n + ' already exists. Preventing: ' + chk, 'data' : JSON.stringify({ 'chk' : chk, 'pos' : pos, 'obj' : obj && obj.id ? obj.id : false, 'par' : par && par.id ? par.id : false }) };\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn i;\r\n\t\t\t\tcase \"copy_node\":\r\n\t\t\t\t\ti = ($.inArray(n, c) === -1);\r\n\t\t\t\t\tif(!i) {\r\n\t\t\t\t\t\tthis._data.core.last_error = { 'error' : 'check', 'plugin' : 'unique', 'id' : 'unique_02', 'reason' : 'Child with name ' + n + ' already exists. Preventing: ' + chk, 'data' : JSON.stringify({ 'chk' : chk, 'pos' : pos, 'obj' : obj && obj.id ? obj.id : false, 'par' : par && par.id ? par.id : false }) };\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn i;\r\n\t\t\t\tcase \"move_node\":\r\n\t\t\t\t\ti = ( (obj.parent === par.id && (!more || !more.is_multi)) || $.inArray(n, c) === -1);\r\n\t\t\t\t\tif(!i) {\r\n\t\t\t\t\t\tthis._data.core.last_error = { 'error' : 'check', 'plugin' : 'unique', 'id' : 'unique_03', 'reason' : 'Child with name ' + n + ' already exists. Preventing: ' + chk, 'data' : JSON.stringify({ 'chk' : chk, 'pos' : pos, 'obj' : obj && obj.id ? obj.id : false, 'par' : par && par.id ? par.id : false }) };\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn i;\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t};\r\n\t\tthis.create_node = function (par, node, pos, callback, is_loaded) {\r\n\t\t\tif(!node || node.text === undefined) {\r\n\t\t\t\tif(par === null) {\r\n\t\t\t\t\tpar = $.jstree.root;\r\n\t\t\t\t}\r\n\t\t\t\tpar = this.get_node(par);\r\n\t\t\t\tif(!par) {\r\n\t\t\t\t\treturn parent.create_node.call(this, par, node, pos, callback, is_loaded);\r\n\t\t\t\t}\r\n\t\t\t\tpos = pos === undefined ? \"last\" : pos;\r\n\t\t\t\tif(!pos.toString().match(/^(before|after)$/) && !is_loaded && !this.is_loaded(par)) {\r\n\t\t\t\t\treturn parent.create_node.call(this, par, node, pos, callback, is_loaded);\r\n\t\t\t\t}\r\n\t\t\t\tif(!node) { node = {}; }\r\n\t\t\t\tvar tmp, n, dpc, i, j, m = this._model.data, s = this.settings.unique.case_sensitive, w = this.settings.unique.trim_whitespace, cb = this.settings.unique.duplicate, t;\r\n\t\t\t\tn = tmp = this.get_string('New node');\r\n\t\t\t\tdpc = [];\r\n\t\t\t\tfor(i = 0, j = par.children.length; i < j; i++) {\r\n\t\t\t\t\tt = m[par.children[i]].text;\r\n\t\t\t\t\tif (!s) {\r\n\t\t\t\t\t\tt = t.toLowerCase();\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (w) {\r\n\t\t\t\t\t\tt = t.replace(/^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g, '');\r\n\t\t\t\t\t}\r\n\t\t\t\t\tdpc.push(t);\r\n\t\t\t\t}\r\n\t\t\t\ti = 1;\r\n\t\t\t\tt = n;\r\n\t\t\t\tif (!s) {\r\n\t\t\t\t\tt = t.toLowerCase();\r\n\t\t\t\t}\r\n\t\t\t\tif (w) {\r\n\t\t\t\t\tt = t.replace(/^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g, '');\r\n\t\t\t\t}\r\n\t\t\t\twhile($.inArray(t, dpc) !== -1) {\r\n\t\t\t\t\tn = cb.call(this, tmp, (++i)).toString();\r\n\t\t\t\t\tt = n;\r\n\t\t\t\t\tif (!s) {\r\n\t\t\t\t\t\tt = t.toLowerCase();\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (w) {\r\n\t\t\t\t\t\tt = t.replace(/^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g, '');\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tnode.text = n;\r\n\t\t\t}\r\n\t\t\treturn parent.create_node.call(this, par, node, pos, callback, is_loaded);\r\n\t\t};\r\n\t};\r\n\r\n\t// include the unique plugin by default\r\n\t// $.jstree.defaults.plugins.push(\"unique\");\r\n\treturn $;\r\n\t\r\n});\r\n\ndefine('skylark-jstree/plugin/wholerow',[\r\n  \"skylark-langx/langx\",\r\n  \"skylark-utils-dom/browser\",\r\n  \"skylark-utils-dom/eventer\",\r\n  \"skylark-utils-dom/noder\",\r\n  \"skylark-utils-dom/geom\",\r\n  \"skylark-utils-dom/query\",\r\n  \"../tree\"\r\n],function(langx,browser,eventer,noder,geom,$,jstree){\r\n\t\"use strict\";\r\n\r\n\tif($.jstree.plugins.wholerow) { return; }\r\n\r\n\tvar div = document.createElement('DIV');\r\n\tdiv.setAttribute('unselectable','on');\r\n\tdiv.setAttribute('role','presentation');\r\n\tdiv.className = 'jstree-wholerow';\r\n\tdiv.innerHTML = '&#160;';\r\n\t$.jstree.plugins.wholerow = function (options, parent) {\r\n\t\tthis.bind = function () {\r\n\t\t\tparent.bind.call(this);\r\n\r\n\t\t\tthis.element\r\n\t\t\t\t.on('ready.jstree set_state.jstree', $.proxy(function () {\r\n\t\t\t\t\t\tthis.hide_dots();\r\n\t\t\t\t\t}, this))\r\n\t\t\t\t.on(\"init.jstree loading.jstree ready.jstree\", $.proxy(function () {\r\n\t\t\t\t\t\t//div.style.height = this._data.core.li_height + 'px';\r\n\t\t\t\t\t\tthis.get_container_ul().addClass('jstree-wholerow-ul');\r\n\t\t\t\t\t}, this))\r\n\t\t\t\t.on(\"deselect_all.jstree\", $.proxy(function (e, data) {\r\n\t\t\t\t\t\tthis.element.find('.jstree-wholerow-clicked').removeClass('jstree-wholerow-clicked');\r\n\t\t\t\t\t}, this))\r\n\t\t\t\t.on(\"changed.jstree\", $.proxy(function (e, data) {\r\n\t\t\t\t\t\tthis.element.find('.jstree-wholerow-clicked').removeClass('jstree-wholerow-clicked');\r\n\t\t\t\t\t\tvar tmp = false, i, j;\r\n\t\t\t\t\t\tfor(i = 0, j = data.selected.length; i < j; i++) {\r\n\t\t\t\t\t\t\ttmp = this.get_node(data.selected[i], true);\r\n\t\t\t\t\t\t\tif(tmp && tmp.length) {\r\n\t\t\t\t\t\t\t\ttmp.children('.jstree-wholerow').addClass('jstree-wholerow-clicked');\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}, this))\r\n\t\t\t\t.on(\"open_node.jstree\", $.proxy(function (e, data) {\r\n\t\t\t\t\t\tthis.get_node(data.node, true).find('.jstree-clicked').parent().children('.jstree-wholerow').addClass('jstree-wholerow-clicked');\r\n\t\t\t\t\t}, this))\r\n\t\t\t\t.on(\"hover_node.jstree dehover_node.jstree\", $.proxy(function (e, data) {\r\n\t\t\t\t\t\tif(e.type === \"hover_node\" && this.is_disabled(data.node)) { return; }\r\n\t\t\t\t\t\tthis.get_node(data.node, true).children('.jstree-wholerow')[e.type === \"hover_node\"?\"addClass\":\"removeClass\"]('jstree-wholerow-hovered');\r\n\t\t\t\t\t}, this))\r\n\t\t\t\t.on(\"contextmenu.jstree\", \".jstree-wholerow\", $.proxy(function (e) {\r\n\t\t\t\t\t\tif (this._data.contextmenu) {\r\n\t\t\t\t\t\t\te.preventDefault();\r\n\t\t\t\t\t\t\tvar tmp = $.Event('contextmenu', { metaKey : e.metaKey, ctrlKey : e.ctrlKey, altKey : e.altKey, shiftKey : e.shiftKey, pageX : e.pageX, pageY : e.pageY });\r\n\t\t\t\t\t\t\t$(e.currentTarget).closest(\".jstree-node\").children(\".jstree-anchor\").first().trigger(tmp);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}, this))\r\n\t\t\t\t/*!\r\n\t\t\t\t.on(\"mousedown.jstree touchstart.jstree\", \".jstree-wholerow\", function (e) {\r\n\t\t\t\t\t\tif(e.target === e.currentTarget) {\r\n\t\t\t\t\t\t\tvar a = $(e.currentTarget).closest(\".jstree-node\").children(\".jstree-anchor\");\r\n\t\t\t\t\t\t\te.target = a[0];\r\n\t\t\t\t\t\t\ta.trigger(e);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t})\r\n\t\t\t\t*/\r\n\t\t\t\t.on(\"click.jstree\", \".jstree-wholerow\", function (e) {\r\n\t\t\t\t\t\te.stopImmediatePropagation();\r\n\t\t\t\t\t\tvar tmp = $.Event('click', { metaKey : e.metaKey, ctrlKey : e.ctrlKey, altKey : e.altKey, shiftKey : e.shiftKey });\r\n\t\t\t\t\t\t$(e.currentTarget).closest(\".jstree-node\").children(\".jstree-anchor\").first().trigger(tmp).focus();\r\n\t\t\t\t\t})\r\n\t\t\t\t.on(\"dblclick.jstree\", \".jstree-wholerow\", function (e) {\r\n\t\t\t\t\t\te.stopImmediatePropagation();\r\n\t\t\t\t\t\tvar tmp = $.Event('dblclick', { metaKey : e.metaKey, ctrlKey : e.ctrlKey, altKey : e.altKey, shiftKey : e.shiftKey });\r\n\t\t\t\t\t\t$(e.currentTarget).closest(\".jstree-node\").children(\".jstree-anchor\").first().trigger(tmp).focus();\r\n\t\t\t\t\t})\r\n\t\t\t\t.on(\"click.jstree\", \".jstree-leaf > .jstree-ocl\", $.proxy(function (e) {\r\n\t\t\t\t\t\te.stopImmediatePropagation();\r\n\t\t\t\t\t\tvar tmp = $.Event('click', { metaKey : e.metaKey, ctrlKey : e.ctrlKey, altKey : e.altKey, shiftKey : e.shiftKey });\r\n\t\t\t\t\t\t$(e.currentTarget).closest(\".jstree-node\").children(\".jstree-anchor\").first().trigger(tmp).focus();\r\n\t\t\t\t\t}, this))\r\n\t\t\t\t.on(\"mouseover.jstree\", \".jstree-wholerow, .jstree-icon\", $.proxy(function (e) {\r\n\t\t\t\t\t\te.stopImmediatePropagation();\r\n\t\t\t\t\t\tif(!this.is_disabled(e.currentTarget)) {\r\n\t\t\t\t\t\t\tthis.hover_node(e.currentTarget);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}, this))\r\n\t\t\t\t.on(\"mouseleave.jstree\", \".jstree-node\", $.proxy(function (e) {\r\n\t\t\t\t\t\tthis.dehover_node(e.currentTarget);\r\n\t\t\t\t\t}, this));\r\n\t\t};\r\n\t\tthis.teardown = function () {\r\n\t\t\tif(this.settings.wholerow) {\r\n\t\t\t\tthis.element.find(\".jstree-wholerow\").remove();\r\n\t\t\t}\r\n\t\t\tparent.teardown.call(this);\r\n\t\t};\r\n\t\tthis.redraw_node = function(obj, deep, callback, force_render) {\r\n\t\t\tobj = parent.redraw_node.apply(this, arguments);\r\n\t\t\tif(obj) {\r\n\t\t\t\tvar tmp = div.cloneNode(true);\r\n\t\t\t\t//tmp.style.height = this._data.core.li_height + 'px';\r\n\t\t\t\tif($.inArray(obj.id, this._data.core.selected) !== -1) { tmp.className += ' jstree-wholerow-clicked'; }\r\n\t\t\t\tif(this._data.core.focused && this._data.core.focused === obj.id) { tmp.className += ' jstree-wholerow-hovered'; }\r\n\t\t\t\tobj.insertBefore(tmp, obj.childNodes[0]);\r\n\t\t\t}\r\n\t\t\treturn obj;\r\n\t\t};\r\n\t};\r\n\t// include the wholerow plugin by default\r\n\t// $.jstree.defaults.plugins.push(\"wholerow\");\r\n\r\n\treturn $;\r\n\r\n});\r\n\ndefine('skylark-jstree/main',[\r\n    \"skylark-utils-dom/query\",\r\n    \"./tree\",\r\n    \"./plugin/changed\",\r\n    \"./plugin/checkbox\",\r\n    \"./plugin/conditionalselect\",\r\n    \"./plugin/contextmenu\",\r\n    \"./plugin/dnd\",\r\n    \"./plugin/massload\",\r\n    \"./plugin/search\",\r\n    \"./plugin/sort\",\r\n    \"./plugin/state\",\r\n    \"./plugin/treegrid\",\r\n    \"./plugin/types\",\r\n    \"./plugin/unique\",\r\n    \"./plugin/wholerow\"\r\n], function($) {\r\n    return $;\r\n});\ndefine('skylark-jstree', ['skylark-jstree/main'], function (main) { return main; });\n\n"]}