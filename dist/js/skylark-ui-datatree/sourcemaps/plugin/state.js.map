{"version":3,"sources":["plugin/state.js"],"names":["define","langx","browser","eventer","noder","geom","velm","$","jstree","sbswt","plugins","state","to","defaults","key","events","ttl","filter","preserve_loaded","options","parent","this","bind","call","proxy","element","on","settings","clearTimeout","setTimeout","save_state","trigger","e","data","one","restore_state","tm","get_state","core","loaded","st","sec","Date","vakata","storage","set","JSON","stringify","k","get","parse","ex","isFunction","instance","extend","set_state","clear_state","del","undefined","val","window","localStorage","setItem","getItem","removeItem"],"mappings":";;;;;;;AAAAA,QACE,sBACA,wBACA,wBACA,sBACA,qBACA,qBACA,sBACA,UACA,wBACA,SAASC,EAAMC,EAAQC,EAAQC,EAAMC,EAAKC,EAAKC,EAAEC,EAAOC,GAEzD,YAEA,KAAGF,EAAEC,OAAOE,QAAQC,MAApB,CAEA,GAAIC,IAAK,CAoHT,OA9GAL,GAAEC,OAAOK,SAASF,OAMjBG,IAAO,SAMPC,OAAS,0FAMTC,KAAO,EAMPC,QAAS,EAMTC,iBAAkB,GAEnBX,EAAEC,OAAOE,QAAQC,MAAQ,SAAUQ,EAASC,GAC3CC,KAAKC,KAAO,WACXF,EAAOE,KAAKC,KAAKF,KACjB,IAAIC,GAAOf,EAAEiB,MAAM,WAClBH,KAAKI,QAAQC,GAAGL,KAAKM,SAAShB,MAAMI,OAAQR,EAAEiB,MAAM,WAChDZ,GAAMgB,aAAahB,GACtBA,EAAKiB,WAAWtB,EAAEiB,MAAM,WAAcH,KAAKS,cAAiBT,MAAO,MACjEA,OAOHA,KAAKU,QAAQ,gBACXV,KACHA,MAAKI,QACHC,GAAG,eAAgBnB,EAAEiB,MAAM,SAAUQ,EAAGC,GACvCZ,KAAKI,QAAQS,IAAI,uBAAwBZ,GACrCD,KAAKc,iBAAmBb,KAC1BD,QAONA,KAAKS,WAAa,WACjB,GAAIM,GAAKf,KAAKgB,WACThB,MAAKM,SAAShB,MAAMO,uBACjBkB,GAAGE,KAAKC,MAEhB,IAAIC,IAAO7B,MAAUyB,EAAIpB,IAAQK,KAAKM,SAAShB,MAAMK,IAAKyB,KAAS,GAAKC,MACxEnC,GAAEoC,OAAOC,QAAQC,IAAIxB,KAAKM,SAAShB,MAAMG,IAAKgC,KAAKC,UAAUP,KAO9DnB,KAAKc,cAAgB,WACpB,GAAIa,GAAIzC,EAAEoC,OAAOC,QAAQK,IAAI5B,KAAKM,SAAShB,MAAMG,IACjD,IAAKkC,EAAK,IAAMA,EAAIF,KAAKI,MAAMF,GAAM,MAAMG,GAAM,OAAO,EACxD,QAAKH,GAAKA,EAAEhC,KAAOgC,EAAEP,MAAQ,GAAKC,MAAUM,EAAEP,IAAMO,EAAEhC,OACjDgC,GAAKA,EAAErC,QAASqC,EAAIA,EAAErC,OACtBqC,GAAKzC,EAAE6C,WAAW/B,KAAKM,SAAShB,MAAMM,UAAW+B,EAAI3B,KAAKM,SAAShB,MAAMM,OAAOM,KAAKF,KAAM2B,MAC3FA,IACC3B,KAAKM,SAAShB,MAAMO,uBACjB8B,GAAEV,KAAKC,OAEflB,KAAKI,QAAQS,IAAI,mBAAoB,SAAUF,EAAGC,GAAQA,EAAKoB,SAAStB,QAAQ,iBAAmBpB,MAAUJ,EAAE+C,QAAO,KAAUN,OAChI3B,KAAKkC,UAAUP,IACR,KAST3B,KAAKmC,YAAc,WAClB,MAAOjD,GAAEoC,OAAOC,QAAQa,IAAIpC,KAAKM,SAAShB,MAAMG,OAIjD,SAAUP,EAAGmD,GACbnD,EAAEoC,OAAOC,SAERC,IAAM,SAAU/B,EAAK6C,GAAO,MAAOC,QAAOC,aAAaC,QAAQhD,EAAK6C,IACpEV,IAAM,SAAUnC,GAAO,MAAO8C,QAAOC,aAAaE,QAAQjD,IAC1D2C,IAAM,SAAU3C,GAAO,MAAO8C,QAAOC,aAAaG,WAAWlD,MAE7DP,GAKKA","file":"../../plugin/state.js","sourcesContent":["define([\n  \"skylark-utils/langx\",\n  \"skylark-utils/browser\",\n  \"skylark-utils/eventer\",\n  \"skylark-utils/noder\",\n  \"skylark-utils/geom\",\n  \"skylark-utils/velm\",\n  \"skylark-utils/query\",\n  \"../tree\",\n  \"skylark-ui-swt/sbswt\"\n],function(langx,browser,eventer,noder,geom,velm,$,jstree,sbswt){\n\n\t\"use strict\";\n\n\tif($.jstree.plugins.state) { return; }\n\n\tvar to = false;\n\t/**\n\t * stores all defaults for the state plugin\n\t * @name $.jstree.defaults.state\n\t * @plugin state\n\t */\n\t$.jstree.defaults.state = {\n\t\t/**\n\t\t * A string for the key to use when saving the current tree (change if using multiple trees in your project). Defaults to `jstree`.\n\t\t * @name $.jstree.defaults.state.key\n\t\t * @plugin state\n\t\t */\n\t\tkey\t\t: 'jstree',\n\t\t/**\n\t\t * A space separated list of events that trigger a state save. Defaults to `changed.jstree open_node.jstree close_node.jstree`.\n\t\t * @name $.jstree.defaults.state.events\n\t\t * @plugin state\n\t\t */\n\t\tevents\t: 'changed.jstree open_node.jstree close_node.jstree check_node.jstree uncheck_node.jstree',\n\t\t/**\n\t\t * Time in milliseconds after which the state will expire. Defaults to 'false' meaning - no expire.\n\t\t * @name $.jstree.defaults.state.ttl\n\t\t * @plugin state\n\t\t */\n\t\tttl\t\t: false,\n\t\t/**\n\t\t * A function that will be executed prior to restoring state with one argument - the state object. Can be used to clear unwanted parts of the state.\n\t\t * @name $.jstree.defaults.state.filter\n\t\t * @plugin state\n\t\t */\n\t\tfilter\t: false,\n\t\t/**\n\t\t * Should loaded nodes be restored (setting this to true means that it is possible that the whole tree will be loaded for some users - use with caution). Defaults to `false`\n\t\t * @name $.jstree.defaults.state.preserve_loaded\n\t\t * @plugin state\n\t\t */\n\t\tpreserve_loaded : false\n\t};\n\t$.jstree.plugins.state = function (options, parent) {\n\t\tthis.bind = function () {\n\t\t\tparent.bind.call(this);\n\t\t\tvar bind = $.proxy(function () {\n\t\t\t\tthis.element.on(this.settings.state.events, $.proxy(function () {\n\t\t\t\t\tif(to) { clearTimeout(to); }\n\t\t\t\t\tto = setTimeout($.proxy(function () { this.save_state(); }, this), 100);\n\t\t\t\t}, this));\n\t\t\t\t/**\n\t\t\t\t * triggered when the state plugin is finished restoring the state (and immediately after ready if there is no state to restore).\n\t\t\t\t * @event\n\t\t\t\t * @name state_ready.jstree\n\t\t\t\t * @plugin state\n\t\t\t\t */\n\t\t\t\tthis.trigger('state_ready');\n\t\t\t}, this);\n\t\t\tthis.element\n\t\t\t\t.on(\"ready.jstree\", $.proxy(function (e, data) {\n\t\t\t\t\t\tthis.element.one(\"restore_state.jstree\", bind);\n\t\t\t\t\t\tif(!this.restore_state()) { bind(); }\n\t\t\t\t\t}, this));\n\t\t};\n\t\t/**\n\t\t * save the state\n\t\t * @name save_state()\n\t\t * @plugin state\n\t\t */\n\t\tthis.save_state = function () {\n\t\t\tvar tm = this.get_state();\n\t\t\tif (!this.settings.state.preserve_loaded) {\n\t\t\t\tdelete tm.core.loaded;\n\t\t\t}\n\t\t\tvar st = { 'state' : tm, 'ttl' : this.settings.state.ttl, 'sec' : +(new Date()) };\n\t\t\t$.vakata.storage.set(this.settings.state.key, JSON.stringify(st));\n\t\t};\n\t\t/**\n\t\t * restore the state from the user's computer\n\t\t * @name restore_state()\n\t\t * @plugin state\n\t\t */\n\t\tthis.restore_state = function () {\n\t\t\tvar k = $.vakata.storage.get(this.settings.state.key);\n\t\t\tif(!!k) { try { k = JSON.parse(k); } catch(ex) { return false; } }\n\t\t\tif(!!k && k.ttl && k.sec && +(new Date()) - k.sec > k.ttl) { return false; }\n\t\t\tif(!!k && k.state) { k = k.state; }\n\t\t\tif(!!k && $.isFunction(this.settings.state.filter)) { k = this.settings.state.filter.call(this, k); }\n\t\t\tif(!!k) {\n\t\t\t\tif (!this.settings.state.preserve_loaded) {\n\t\t\t\t\tdelete k.core.loaded;\n\t\t\t\t}\n\t\t\t\tthis.element.one(\"set_state.jstree\", function (e, data) { data.instance.trigger('restore_state', { 'state' : $.extend(true, {}, k) }); });\n\t\t\t\tthis.set_state(k);\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\treturn false;\n\t\t};\n\t\t/**\n\t\t * clear the state on the user's computer\n\t\t * @name clear_state()\n\t\t * @plugin state\n\t\t */\n\t\tthis.clear_state = function () {\n\t\t\treturn $.vakata.storage.del(this.settings.state.key);\n\t\t};\n\t};\n\n\t(function ($, undefined) {\n\t\t$.vakata.storage = {\n\t\t\t// simply specifying the functions in FF throws an error\n\t\t\tset : function (key, val) { return window.localStorage.setItem(key, val); },\n\t\t\tget : function (key) { return window.localStorage.getItem(key); },\n\t\t\tdel : function (key) { return window.localStorage.removeItem(key); }\n\t\t};\n\t}($));\n\n\t// include the state plugin by default\n\t// $.jstree.defaults.plugins.push(\"state\");\n\n\treturn $;\n\t\n});"]}