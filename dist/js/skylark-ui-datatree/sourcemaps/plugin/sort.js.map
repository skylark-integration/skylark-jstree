{"version":3,"sources":["plugin/sort.js"],"names":["define","langx","browser","eventer","noder","geom","velm","$","jstree","sbswt","plugins","sort","defaults","a","b","this","get_text","options","parent","bind","call","element","on","proxy","e","data","node","redraw_node","obj","deep","i","j","get_node","children","length","settings","children_d"],"mappings":";;;;;;;AAAAA,QACE,sBACA,wBACA,wBACA,sBACA,qBACA,qBACA,sBACA,UACA,wBACA,SAASC,EAAMC,EAAQC,EAAQC,EAAMC,EAAKC,EAAKC,EAAEC,EAAOC,GAEzD,YAEA,KAAGF,EAAEC,OAAOE,QAAQC,KAsDpB,MA9CAJ,GAAEC,OAAOI,SAASD,KAAO,SAAUE,EAAGC,GAErC,MAAOC,MAAKC,SAASH,GAAKE,KAAKC,SAASF,GAAK,MAE9CP,EAAEC,OAAOE,QAAQC,KAAO,SAAUM,EAASC,GAC1CH,KAAKI,KAAO,WACXD,EAAOC,KAAKC,KAAKL,MACjBA,KAAKM,QACHC,GAAG,eAAgBf,EAAEgB,MAAM,SAAUC,EAAGC,GACvCV,KAAKJ,KAAKc,EAAKP,QAAQ,IACrBH,OACHO,GAAG,wCAAyCf,EAAEgB,MAAM,SAAUC,EAAGC,GAChEV,KAAKJ,KAAKc,EAAKP,QAAUO,EAAKC,KAAKR,QAAQ,GAC3CH,KAAKY,YAAYF,EAAKP,QAAUO,EAAKC,KAAKR,QAAQ,IAChDH,OACHO,GAAG,oCAAqCf,EAAEgB,MAAM,SAAUC,EAAGC,GAC5DV,KAAKJ,KAAKc,EAAKP,QAAQ,GACvBH,KAAKY,YAAYF,EAAKP,QAAQ,IAC5BH,QAWNA,KAAKJ,KAAO,SAAUiB,EAAKC,GAC1B,GAAIC,GAAGC,CAEP,IADAH,EAAMb,KAAKiB,SAASJ,GACjBA,GAAOA,EAAIK,UAAYL,EAAIK,SAASC,SACtCN,EAAIK,SAAStB,KAAKJ,EAAEgB,MAAMR,KAAKoB,SAASxB,KAAMI,OAC3Cc,GACF,IAAIC,EAAI,EAAGC,EAAIH,EAAIQ,WAAWF,OAAQJ,EAAIC,EAAGD,IAC5Cf,KAAKJ,KAAKiB,EAAIQ,WAAWN,IAAI,KAU3BvB","file":"../../plugin/sort.js","sourcesContent":["define([\n  \"skylark-utils/langx\",\n  \"skylark-utils/browser\",\n  \"skylark-utils/eventer\",\n  \"skylark-utils/noder\",\n  \"skylark-utils/geom\",\n  \"skylark-utils/velm\",\n  \"skylark-utils/query\",\n  \"../tree\",\n  \"skylark-ui-swt/sbswt\"\n],function(langx,browser,eventer,noder,geom,velm,$,jstree,sbswt){\n\n\t\"use strict\";\n\n\tif($.jstree.plugins.sort) { return; }\n\n\t/**\n\t * the settings function used to sort the nodes.\n\t * It is executed in the tree's context, accepts two nodes as arguments and should return `1` or `-1`.\n\t * @name $.jstree.defaults.sort\n\t * @plugin sort\n\t */\n\t$.jstree.defaults.sort = function (a, b) {\n\t\t//return this.get_type(a) === this.get_type(b) ? (this.get_text(a) > this.get_text(b) ? 1 : -1) : this.get_type(a) >= this.get_type(b);\n\t\treturn this.get_text(a) > this.get_text(b) ? 1 : -1;\n\t};\n\t$.jstree.plugins.sort = function (options, parent) {\n\t\tthis.bind = function () {\n\t\t\tparent.bind.call(this);\n\t\t\tthis.element\n\t\t\t\t.on(\"model.jstree\", $.proxy(function (e, data) {\n\t\t\t\t\t\tthis.sort(data.parent, true);\n\t\t\t\t\t}, this))\n\t\t\t\t.on(\"rename_node.jstree create_node.jstree\", $.proxy(function (e, data) {\n\t\t\t\t\t\tthis.sort(data.parent || data.node.parent, false);\n\t\t\t\t\t\tthis.redraw_node(data.parent || data.node.parent, true);\n\t\t\t\t\t}, this))\n\t\t\t\t.on(\"move_node.jstree copy_node.jstree\", $.proxy(function (e, data) {\n\t\t\t\t\t\tthis.sort(data.parent, false);\n\t\t\t\t\t\tthis.redraw_node(data.parent, true);\n\t\t\t\t\t}, this));\n\t\t};\n\t\t/**\n\t\t * used to sort a node's children\n\t\t * @private\n\t\t * @name sort(obj [, deep])\n\t\t * @param  {mixed} obj the node\n\t\t * @param {Boolean} deep if set to `true` nodes are sorted recursively.\n\t\t * @plugin sort\n\t\t * @trigger search.jstree\n\t\t */\n\t\tthis.sort = function (obj, deep) {\n\t\t\tvar i, j;\n\t\t\tobj = this.get_node(obj);\n\t\t\tif(obj && obj.children && obj.children.length) {\n\t\t\t\tobj.children.sort($.proxy(this.settings.sort, this));\n\t\t\t\tif(deep) {\n\t\t\t\t\tfor(i = 0, j = obj.children_d.length; i < j; i++) {\n\t\t\t\t\t\tthis.sort(obj.children_d[i], false);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t};\n\n\t// include the sort plugin by default\n\t// $.jstree.defaults.plugins.push(\"sort\");\n\n\treturn $;\n\t\n});"]}