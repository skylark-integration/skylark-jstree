{"version":3,"sources":["plugin/massload.js"],"names":["define","langx","browser","eventer","noder","geom","velm","$","jstree","sbswt","plugins","massload","defaults","options","parent","this","init","el","_data","call","_load_nodes","nodes","callback","is_callback","force_reload","i","j","dom","s","settings","toLoad","JSON","stringify","m","_model","data","length","state","loaded","failed","push","get_node","addClass","attr","isFunction","proxy","hasOwnProperty","removeClass","url","extend","ajax","done","t","x","fail","f","_load_node","obj","id","rslt","parseHTML","filter","nodeType","status"],"mappings":"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","file":"../../plugin/massload.js","sourcesContent":["define([\n  \"skylark-utils/langx\",\n  \"skylark-utils/browser\",\n  \"skylark-utils/eventer\",\n  \"skylark-utils/noder\",\n  \"skylark-utils/geom\",\n  \"skylark-utils/velm\",\n  \"skylark-utils/query\",\n  \"../tree\",\n  \"skylark-ui-swt/sbswt\"\n],function(langx,browser,eventer,noder,geom,velm,$,jstree,sbswt){\n\n\t\"use strict\";\n\n\tif($.jstree.plugins.massload) { return; }\n\n\t/**\n\t * massload configuration\n\t *\n\t * It is possible to set this to a standard jQuery-like AJAX config.\n\t * In addition to the standard jQuery ajax options here you can supply functions for `data` and `url`, the functions will be run in the current instance's scope and a param will be passed indicating which node IDs need to be loaded, the return value of those functions will be used.\n\t *\n\t * You can also set this to a function, that function will receive the node IDs being loaded as argument and a second param which is a function (callback) which should be called with the result.\n\t *\n\t * Both the AJAX and the function approach rely on the same return value - an object where the keys are the node IDs, and the value is the children of that node as an array.\n\t *\n\t *\t{\n\t *\t\t\"id1\" : [{ \"text\" : \"Child of ID1\", \"id\" : \"c1\" }, { \"text\" : \"Another child of ID1\", \"id\" : \"c2\" }],\n\t *\t\t\"id2\" : [{ \"text\" : \"Child of ID2\", \"id\" : \"c3\" }]\n\t *\t}\n\t * \n\t * @name $.jstree.defaults.massload\n\t * @plugin massload\n\t */\n\t$.jstree.defaults.massload = null;\n\t$.jstree.plugins.massload = function (options, parent) {\n\t\tthis.init = function (el, options) {\n\t\t\tthis._data.massload = {};\n\t\t\tparent.init.call(this, el, options);\n\t\t};\n\t\tthis._load_nodes = function (nodes, callback, is_callback, force_reload) {\n\t\t\tvar s = this.settings.massload,\n\t\t\t\tnodesString = JSON.stringify(nodes),\n\t\t\t\ttoLoad = [],\n\t\t\t\tm = this._model.data,\n\t\t\t\ti, j, dom;\n\t\t\tif (!is_callback) {\n\t\t\t\tfor(i = 0, j = nodes.length; i < j; i++) {\n\t\t\t\t\tif(!m[nodes[i]] || ( (!m[nodes[i]].state.loaded && !m[nodes[i]].state.failed) || force_reload) ) {\n\t\t\t\t\t\ttoLoad.push(nodes[i]);\n\t\t\t\t\t\tdom = this.get_node(nodes[i], true);\n\t\t\t\t\t\tif (dom && dom.length) {\n\t\t\t\t\t\t\tdom.addClass(\"jstree-loading\").attr('aria-busy',true);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tthis._data.massload = {};\n\t\t\t\tif (toLoad.length) {\n\t\t\t\t\tif($.isFunction(s)) {\n\t\t\t\t\t\treturn s.call(this, toLoad, $.proxy(function (data) {\n\t\t\t\t\t\t\tvar i, j;\n\t\t\t\t\t\t\tif(data) {\n\t\t\t\t\t\t\t\tfor(i in data) {\n\t\t\t\t\t\t\t\t\tif(data.hasOwnProperty(i)) {\n\t\t\t\t\t\t\t\t\t\tthis._data.massload[i] = data[i];\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfor(i = 0, j = nodes.length; i < j; i++) {\n\t\t\t\t\t\t\t\tdom = this.get_node(nodes[i], true);\n\t\t\t\t\t\t\t\tif (dom && dom.length) {\n\t\t\t\t\t\t\t\t\tdom.removeClass(\"jstree-loading\").attr('aria-busy',false);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tparent._load_nodes.call(this, nodes, callback, is_callback, force_reload);\n\t\t\t\t\t\t}, this));\n\t\t\t\t\t}\n\t\t\t\t\tif(typeof s === 'object' && s && s.url) {\n\t\t\t\t\t\ts = $.extend(true, {}, s);\n\t\t\t\t\t\tif($.isFunction(s.url)) {\n\t\t\t\t\t\t\ts.url = s.url.call(this, toLoad);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif($.isFunction(s.data)) {\n\t\t\t\t\t\t\ts.data = s.data.call(this, toLoad);\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn $.ajax(s)\n\t\t\t\t\t\t\t.done($.proxy(function (data,t,x) {\n\t\t\t\t\t\t\t\t\tvar i, j;\n\t\t\t\t\t\t\t\t\tif(data) {\n\t\t\t\t\t\t\t\t\t\tfor(i in data) {\n\t\t\t\t\t\t\t\t\t\t\tif(data.hasOwnProperty(i)) {\n\t\t\t\t\t\t\t\t\t\t\t\tthis._data.massload[i] = data[i];\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tfor(i = 0, j = nodes.length; i < j; i++) {\n\t\t\t\t\t\t\t\t\t\tdom = this.get_node(nodes[i], true);\n\t\t\t\t\t\t\t\t\t\tif (dom && dom.length) {\n\t\t\t\t\t\t\t\t\t\t\tdom.removeClass(\"jstree-loading\").attr('aria-busy',false);\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tparent._load_nodes.call(this, nodes, callback, is_callback, force_reload);\n\t\t\t\t\t\t\t\t}, this))\n\t\t\t\t\t\t\t.fail($.proxy(function (f) {\n\t\t\t\t\t\t\t\t\tparent._load_nodes.call(this, nodes, callback, is_callback, force_reload);\n\t\t\t\t\t\t\t\t}, this));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn parent._load_nodes.call(this, nodes, callback, is_callback, force_reload);\n\t\t};\n\t\tthis._load_node = function (obj, callback) {\n\t\t\tvar data = this._data.massload[obj.id],\n\t\t\t\trslt = null, dom;\n\t\t\tif(data) {\n\t\t\t\trslt = this[typeof data === 'string' ? '_append_html_data' : '_append_json_data'](\n\t\t\t\t\tobj,\n\t\t\t\t\ttypeof data === 'string' ? $($.parseHTML(data)).filter(function () { return this.nodeType !== 3; }) : data,\n\t\t\t\t\tfunction (status) { callback.call(this, status); }\n\t\t\t\t);\n\t\t\t\tdom = this.get_node(obj.id, true);\n\t\t\t\tif (dom && dom.length) {\n\t\t\t\t\tdom.removeClass(\"jstree-loading\").attr('aria-busy',false);\n\t\t\t\t}\n\t\t\t\tdelete this._data.massload[obj.id];\n\t\t\t\treturn rslt;\n\t\t\t}\n\t\t\treturn parent._load_node.call(this, obj, callback);\n\t\t};\n\t};\n\n\treturn $;\n\t\n});"]}